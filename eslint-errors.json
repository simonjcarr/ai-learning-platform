[{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/ai-interactions/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":12,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":77,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":116,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":151,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":19}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { AlertCircle, Brain, DollarSign, Edit, Plus, Settings, Zap } from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface AIModel {\n  modelId: string;\n  displayName: string;\n  provider: string;\n  isActive: boolean;\n}\n\ninterface AIInteractionType {\n  typeId: string;\n  typeName: string;\n  displayName: string;\n  description?: string;\n  defaultModelId?: string;\n  defaultModel?: AIModel;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface TypeFormData {\n  typeName: string;\n  displayName: string;\n  description: string;\n  defaultModelId: string;\n}\n\nconst initialFormData: TypeFormData = {\n  typeName: '',\n  displayName: '',\n  description: '',\n  defaultModelId: '',\n};\n\nexport default function AIInteractionsPage() {\n  const [interactionTypes, setInteractionTypes] = useState<AIInteractionType[]>([]);\n  const [models, setModels] = useState<AIModel[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingType, setEditingType] = useState<AIInteractionType | null>(null);\n  const [formData, setFormData] = useState<TypeFormData>(initialFormData);\n  const [submitting, setSubmitting] = useState(false);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const [typesResponse, modelsResponse] = await Promise.all([\n        fetch('/api/admin/ai-interaction-types'),\n        fetch('/api/admin/ai-models')\n      ]);\n\n      if (typesResponse.ok && modelsResponse.ok) {\n        const [typesData, modelsData] = await Promise.all([\n          typesResponse.json(),\n          modelsResponse.json()\n        ]);\n        setInteractionTypes(typesData);\n        setModels(modelsData.filter((m: AIModel) => m.isActive));\n      } else {\n        toast.error('Failed to fetch data');\n      }\n    } catch (error) {\n      toast.error('Error fetching data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSubmitting(true);\n\n    try {\n      const url = editingType \n        ? `/api/admin/ai-interaction-types/${editingType.typeId}`\n        : '/api/admin/ai-interaction-types';\n      \n      const method = editingType ? 'PUT' : 'POST';\n      \n      const payload = {\n        ...formData,\n        defaultModelId: formData.defaultModelId === 'none' ? null : formData.defaultModelId || null,\n      };\n\n      const response = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n\n      if (response.ok) {\n        toast.success(editingType ? 'Interaction type updated successfully' : 'Interaction type created successfully');\n        setIsCreateOpen(false);\n        setEditingType(null);\n        setFormData(initialFormData);\n        fetchData();\n      } else {\n        const error = await response.json();\n        toast.error(error.error || 'Failed to save interaction type');\n      }\n    } catch (error) {\n      toast.error('Error saving interaction type');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleEdit = (type: AIInteractionType) => {\n    setEditingType(type);\n    setFormData({\n      typeName: type.typeName,\n      displayName: type.displayName,\n      description: type.description || '',\n      defaultModelId: type.defaultModelId || '',\n    });\n    setIsCreateOpen(true);\n  };\n\n  const handleDelete = async (typeId: string) => {\n    if (!confirm('Are you sure you want to delete this interaction type?')) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/admin/ai-interaction-types/${typeId}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        toast.success('Interaction type deleted successfully');\n        fetchData();\n      } else {\n        const error = await response.json();\n        toast.error(error.error || 'Failed to delete interaction type');\n      }\n    } catch (error) {\n      toast.error('Error deleting interaction type');\n    }\n  };\n\n  const resetForm = () => {\n    setFormData(initialFormData);\n    setEditingType(null);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">AI Interaction Types</h1>\n          <p className=\"text-gray-600\">Configure AI models for different types of interactions</p>\n        </div>\n        <Dialog open={isCreateOpen} onOpenChange={(open) => {\n          setIsCreateOpen(open);\n          if (!open) resetForm();\n        }}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Interaction Type\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-lg\">\n            <DialogHeader>\n              <DialogTitle>{editingType ? 'Edit Interaction Type' : 'Add New Interaction Type'}</DialogTitle>\n              <DialogDescription>\n                {editingType ? 'Update the interaction type configuration' : 'Configure a new type of AI interaction'}\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"typeName\">Type Name (Internal)</Label>\n                <Input\n                  id=\"typeName\"\n                  value={formData.typeName}\n                  onChange={(e) => setFormData({ ...formData, typeName: e.target.value })}\n                  placeholder=\"article_generation\"\n                  required\n                  disabled={editingType !== null}\n                  pattern=\"[a-z_]+\"\n                  title=\"Use lowercase letters and underscores only\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">Used internally by the system</p>\n              </div>\n\n              <div>\n                <Label htmlFor=\"displayName\">Display Name</Label>\n                <Input\n                  id=\"displayName\"\n                  value={formData.displayName}\n                  onChange={(e) => setFormData({ ...formData, displayName: e.target.value })}\n                  placeholder=\"Article Generation\"\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  placeholder=\"Generate full article content using AI\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"defaultModel\">Default AI Model</Label>\n                <Select \n                  value={formData.defaultModelId} \n                  onValueChange={(value) => setFormData({ ...formData, defaultModelId: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select default model\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"none\">No default model</SelectItem>\n                    {models.map((model) => (\n                      <SelectItem key={model.modelId} value={model.modelId}>\n                        {model.displayName} ({model.provider})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <p className=\"text-xs text-gray-500 mt-1\">Model to use for this type of interaction</p>\n              </div>\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsCreateOpen(false)}\n                  disabled={submitting}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={submitting}>\n                  {submitting ? 'Saving...' : editingType ? 'Update Type' : 'Create Type'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-6\">\n        {interactionTypes.length === 0 ? (\n          <Card>\n            <CardContent className=\"flex items-center justify-center h-32\">\n              <div className=\"text-center\">\n                <Zap className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n                <p className=\"text-gray-500\">No interaction types configured yet</p>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          interactionTypes.map((type) => (\n            <Card key={type.typeId}>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Zap className=\"h-5 w-5\" />\n                      {type.displayName}\n                    </CardTitle>\n                    <CardDescription>\n                      {type.typeName}\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(type)}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(type.typeId)}\n                      className=\"text-red-600 hover:text-red-700\"\n                    >\n                      <Settings className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {type.description && (\n                  <p className=\"text-gray-600 mb-4\">{type.description}</p>\n                )}\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <span className=\"font-medium text-gray-900\">Default Model:</span>\n                    {type.defaultModel ? (\n                      <Badge variant=\"secondary\" className=\"ml-2\">\n                        <Brain className=\"h-3 w-3 mr-1\" />\n                        {type.defaultModel.displayName}\n                      </Badge>\n                    ) : (\n                      <span className=\"text-gray-500 ml-2\">No default model</span>\n                    )}\n                  </div>\n                  {!type.defaultModel?.isActive && type.defaultModel && (\n                    <div className=\"flex items-center text-amber-600\">\n                      <AlertCircle className=\"h-4 w-4 mr-1\" />\n                      <span className=\"text-sm\">Default model is inactive</span>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {models.length === 0 && (\n        <Card className=\"border-amber-200 bg-amber-50\">\n          <CardContent className=\"flex items-center justify-center p-6\">\n            <div className=\"text-center\">\n              <AlertCircle className=\"h-8 w-8 text-amber-600 mx-auto mb-2\" />\n              <p className=\"text-amber-800 font-medium\">No active AI models available</p>\n              <p className=\"text-amber-700 text-sm\">Add and activate AI models before configuring interaction types.</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/ai-models/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertCircle' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":77,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2817,2820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2817,2820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":123,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":163,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":183,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":183,"endColumn":19}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { AlertCircle, Brain, DollarSign, Edit, Plus, Trash2, Eye, EyeOff } from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface AIModel {\n  modelId: string;\n  modelName: string;\n  provider: string;\n  displayName: string;\n  description?: string;\n  inputTokenCostPer1M: number;\n  outputTokenCostPer1M: number;\n  maxTokens?: number;\n  isActive: boolean;\n  isDefault: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface ModelFormData {\n  modelName: string;\n  provider: string;\n  displayName: string;\n  description: string;\n  apiKey: string;\n  inputTokenCostPer1M: string;\n  outputTokenCostPer1M: string;\n  maxTokens: string;\n  isDefault: boolean;\n}\n\nconst initialFormData: ModelFormData = {\n  modelName: '',\n  provider: 'openai',\n  displayName: '',\n  description: '',\n  apiKey: '',\n  inputTokenCostPer1M: '',\n  outputTokenCostPer1M: '',\n  maxTokens: '',\n  isDefault: false,\n};\n\nexport default function AIModelsPage() {\n  const [models, setModels] = useState<AIModel[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingModel, setEditingModel] = useState<AIModel | null>(null);\n  const [formData, setFormData] = useState<ModelFormData>(initialFormData);\n  const [showApiKey, setShowApiKey] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n\n  useEffect(() => {\n    fetchModels();\n  }, []);\n\n  const fetchModels = async () => {\n    try {\n      const response = await fetch('/api/admin/ai-models');\n      if (response.ok) {\n        const data = await response.json();\n        setModels(data);\n      } else {\n        toast.error('Failed to fetch AI models');\n      }\n    } catch (error) {\n      toast.error('Error fetching AI models');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSubmitting(true);\n\n    try {\n      const url = editingModel \n        ? `/api/admin/ai-models/${editingModel.modelId}`\n        : '/api/admin/ai-models';\n      \n      const method = editingModel ? 'PUT' : 'POST';\n      \n      const payload: any = {\n        ...formData,\n        inputTokenCostPer1M: parseFloat(formData.inputTokenCostPer1M),\n        outputTokenCostPer1M: parseFloat(formData.outputTokenCostPer1M),\n        maxTokens: formData.maxTokens ? parseInt(formData.maxTokens) : null,\n      };\n\n      // Only include API key if it's provided (for updates, empty means no change)\n      if (!editingModel || formData.apiKey.trim()) {\n        payload.apiKey = formData.apiKey;\n      }\n\n      const response = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n\n      if (response.ok) {\n        toast.success(editingModel ? 'Model updated successfully' : 'Model created successfully');\n        setIsCreateOpen(false);\n        setEditingModel(null);\n        setFormData(initialFormData);\n        fetchModels();\n      } else {\n        const error = await response.json();\n        toast.error(error.error || 'Failed to save model');\n      }\n    } catch (error) {\n      toast.error('Error saving model');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleEdit = (model: AIModel) => {\n    setEditingModel(model);\n    setFormData({\n      modelName: model.modelName,\n      provider: model.provider,\n      displayName: model.displayName,\n      description: model.description || '',\n      apiKey: '', // Don't show existing API key\n      inputTokenCostPer1M: model.inputTokenCostPer1M.toString(),\n      outputTokenCostPer1M: model.outputTokenCostPer1M.toString(),\n      maxTokens: model.maxTokens?.toString() || '',\n      isDefault: model.isDefault,\n    });\n    setIsCreateOpen(true);\n  };\n\n  const handleDelete = async (modelId: string) => {\n    if (!confirm('Are you sure you want to delete this model?')) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/admin/ai-models/${modelId}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        toast.success('Model deleted successfully');\n        fetchModels();\n      } else {\n        const error = await response.json();\n        toast.error(error.error || 'Failed to delete model');\n      }\n    } catch (error) {\n      toast.error('Error deleting model');\n    }\n  };\n\n  const toggleModelStatus = async (modelId: string, isActive: boolean) => {\n    try {\n      const response = await fetch(`/api/admin/ai-models/${modelId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ isActive: !isActive }),\n      });\n\n      if (response.ok) {\n        toast.success(`Model ${!isActive ? 'activated' : 'deactivated'} successfully`);\n        fetchModels();\n      } else {\n        const error = await response.json();\n        toast.error(error.error || 'Failed to update model status');\n      }\n    } catch (error) {\n      toast.error('Error updating model status');\n    }\n  };\n\n  const resetForm = () => {\n    setFormData(initialFormData);\n    setEditingModel(null);\n    setShowApiKey(false);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">AI Models</h1>\n          <p className=\"text-gray-600\">Manage AI models and their configurations</p>\n        </div>\n        <Dialog open={isCreateOpen} onOpenChange={(open) => {\n          setIsCreateOpen(open);\n          if (!open) resetForm();\n        }}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Model\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>{editingModel ? 'Edit Model' : 'Add New Model'}</DialogTitle>\n              <DialogDescription>\n                {editingModel ? 'Update the AI model configuration' : 'Configure a new AI model for the platform'}\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"modelName\">Model Name</Label>\n                  <Input\n                    id=\"modelName\"\n                    value={formData.modelName}\n                    onChange={(e) => setFormData({ ...formData, modelName: e.target.value })}\n                    placeholder=\"gpt-4-0125-preview\"\n                    required\n                    disabled={editingModel !== null}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"provider\">Provider</Label>\n                  <Select \n                    value={formData.provider} \n                    onValueChange={(value) => setFormData({ ...formData, provider: value })}\n                    disabled={editingModel !== null}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select provider\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"openai\">OpenAI</SelectItem>\n                      <SelectItem value=\"anthropic\">Anthropic</SelectItem>\n                      <SelectItem value=\"google\">Google</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"displayName\">Display Name</Label>\n                <Input\n                  id=\"displayName\"\n                  value={formData.displayName}\n                  onChange={(e) => setFormData({ ...formData, displayName: e.target.value })}\n                  placeholder=\"GPT-4 Turbo\"\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  placeholder=\"Description of this model's capabilities\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"apiKey\">API Key</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"apiKey\"\n                    type={showApiKey ? \"text\" : \"password\"}\n                    value={formData.apiKey}\n                    onChange={(e) => setFormData({ ...formData, apiKey: e.target.value })}\n                    placeholder={editingModel ? \"Leave empty to keep current key\" : \"Enter API key\"}\n                    required={!editingModel}\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0\"\n                    onClick={() => setShowApiKey(!showApiKey)}\n                  >\n                    {showApiKey ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"inputCost\">Input Cost (per 1M tokens)</Label>\n                  <Input\n                    id=\"inputCost\"\n                    type=\"number\"\n                    step=\"0.000001\"\n                    value={formData.inputTokenCostPer1M}\n                    onChange={(e) => setFormData({ ...formData, inputTokenCostPer1M: e.target.value })}\n                    placeholder=\"10.0\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"outputCost\">Output Cost (per 1M tokens)</Label>\n                  <Input\n                    id=\"outputCost\"\n                    type=\"number\"\n                    step=\"0.000001\"\n                    value={formData.outputTokenCostPer1M}\n                    onChange={(e) => setFormData({ ...formData, outputTokenCostPer1M: e.target.value })}\n                    placeholder=\"30.0\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"maxTokens\">Max Tokens (optional)</Label>\n                  <Input\n                    id=\"maxTokens\"\n                    type=\"number\"\n                    value={formData.maxTokens}\n                    onChange={(e) => setFormData({ ...formData, maxTokens: e.target.value })}\n                    placeholder=\"4096\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"isDefault\"\n                  checked={formData.isDefault}\n                  onCheckedChange={(checked) => setFormData({ ...formData, isDefault: checked })}\n                />\n                <Label htmlFor=\"isDefault\">Set as default model</Label>\n              </div>\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsCreateOpen(false)}\n                  disabled={submitting}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={submitting}>\n                  {submitting ? 'Saving...' : editingModel ? 'Update Model' : 'Create Model'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-6\">\n        {models.length === 0 ? (\n          <Card>\n            <CardContent className=\"flex items-center justify-center h-32\">\n              <div className=\"text-center\">\n                <Brain className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n                <p className=\"text-gray-500\">No AI models configured yet</p>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          models.map((model) => (\n            <Card key={model.modelId}>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Brain className=\"h-5 w-5\" />\n                      {model.displayName}\n                      {model.isDefault && <Badge variant=\"secondary\">Default</Badge>}\n                      {!model.isActive && <Badge variant=\"destructive\">Inactive</Badge>}\n                    </CardTitle>\n                    <CardDescription>\n                      {model.provider} • {model.modelName}\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => toggleModelStatus(model.modelId, model.isActive)}\n                    >\n                      {model.isActive ? 'Deactivate' : 'Activate'}\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(model)}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(model.modelId)}\n                      className=\"text-red-600 hover:text-red-700\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {model.description && (\n                  <p className=\"text-gray-600 mb-4\">{model.description}</p>\n                )}\n                <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                  <div>\n                    <span className=\"font-medium text-gray-900\">Input Cost:</span>\n                    <div className=\"flex items-center text-green-600\">\n                      <DollarSign className=\"h-3 w-3 mr-1\" />\n                      {model.inputTokenCostPer1M}/1M tokens\n                    </div>\n                  </div>\n                  <div>\n                    <span className=\"font-medium text-gray-900\">Output Cost:</span>\n                    <div className=\"flex items-center text-green-600\">\n                      <DollarSign className=\"h-3 w-3 mr-1\" />\n                      {model.outputTokenCostPer1M}/1M tokens\n                    </div>\n                  </div>\n                  <div>\n                    <span className=\"font-medium text-gray-900\">Max Tokens:</span>\n                    <div className=\"text-gray-600\">\n                      {model.maxTokens ? model.maxTokens.toLocaleString() : 'Unlimited'}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/ai-reports/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Line' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":7},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAllData'. Either include it or remove the dependency array.","line":89,"column":6,"nodeType":"ArrayExpression","endLine":89,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [fetchAllData, period]","fix":{"range":[1989,1997],"text":"[fetchAllData, period]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport {\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\n\ntype TimePeriod = 'hour' | 'day' | 'week' | 'month' | 'year' | 'all';\n\ninterface ModelData {\n  modelId: string;\n  modelName: string;\n  provider: string;\n  interactions: number;\n  inputTokens: number;\n  outputTokens: number;\n  totalTokens: number;\n  inputCost: number;\n  outputCost: number;\n  totalCost: number;\n}\n\ninterface InteractionTypeData {\n  typeId: string;\n  typeName: string;\n  displayName: string;\n  interactions: number;\n  inputTokens: number;\n  outputTokens: number;\n  totalTokens: number;\n  inputCost: number;\n  outputCost: number;\n  totalCost: number;\n}\n\ninterface UserData {\n  userId: string;\n  email: string;\n  displayName: string;\n  interactions: number;\n  inputTokens: number;\n  outputTokens: number;\n  totalTokens: number;\n  inputCost: number;\n  outputCost: number;\n  totalCost: number;\n}\n\ninterface TotalsData {\n  totalInteractions: number;\n  successfulInteractions: number;\n  failedInteractions: number;\n  successRate: string;\n  uniqueUsers: number;\n  totalInputTokens: number;\n  totalOutputTokens: number;\n  totalTokens: number;\n  totalInputCost: number;\n  totalOutputCost: number;\n  totalCost: number;\n  averageResponseTime: number;\n  averageCostPerInteraction: number;\n}\n\nconst COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#ec4899'];\n\nexport default function AIReportsPage() {\n  const [period, setPeriod] = useState<TimePeriod>('day');\n  const [modelData, setModelData] = useState<ModelData[]>([]);\n  const [interactionData, setInteractionData] = useState<InteractionTypeData[]>([]);\n  const [userData, setUserData] = useState<UserData[]>([]);\n  const [totalsData, setTotalsData] = useState<TotalsData | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchAllData();\n  }, [period]);\n\n  const fetchAllData = async () => {\n    setLoading(true);\n    try {\n      const [modelsRes, interactionsRes, usersRes, totalsRes] = await Promise.all([\n        fetch(`/api/admin/ai-reports/by-model?period=${period}`),\n        fetch(`/api/admin/ai-reports/by-interaction?period=${period}`),\n        fetch(`/api/admin/ai-reports/by-user?period=${period}`),\n        fetch(`/api/admin/ai-reports/totals?period=${period}`)\n      ]);\n\n      if (modelsRes.ok) {\n        const data = await modelsRes.json();\n        setModelData(data.data);\n      }\n\n      if (interactionsRes.ok) {\n        const data = await interactionsRes.json();\n        setInteractionData(data.data);\n      }\n\n      if (usersRes.ok) {\n        const data = await usersRes.json();\n        setUserData(data.data);\n      }\n\n      if (totalsRes.ok) {\n        const data = await totalsRes.json();\n        setTotalsData(data.data);\n      }\n    } catch (error) {\n      console.error('Error fetching AI reports:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 4\n    }).format(value);\n  };\n\n  const formatNumber = (value: number) => {\n    return new Intl.NumberFormat('en-US').format(value);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-lg text-gray-600\">Loading AI reports...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">AI Usage Reports</h1>\n          \n          {/* Time Period Selector */}\n          <div className=\"flex space-x-2\">\n            {(['hour', 'day', 'week', 'month', 'year', 'all'] as TimePeriod[]).map((p) => (\n              <button\n                key={p}\n                onClick={() => setPeriod(p)}\n                className={`px-4 py-2 rounded-lg font-medium capitalize transition-colors ${\n                  period === p\n                    ? 'bg-blue-600 text-white'\n                    : 'bg-white text-gray-700 hover:bg-gray-100'\n                }`}\n              >\n                {p === 'all' ? 'All Time' : p}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Total Stats */}\n        {totalsData && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-sm font-medium text-gray-500 mb-2\">Total Interactions</h3>\n              <p className=\"text-2xl font-bold text-gray-900\">{formatNumber(totalsData.totalInteractions)}</p>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                {totalsData.successRate}% success rate\n              </p>\n            </div>\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-sm font-medium text-gray-500 mb-2\">Total Tokens</h3>\n              <p className=\"text-2xl font-bold text-gray-900\">{formatNumber(totalsData.totalTokens)}</p>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                {formatNumber(totalsData.totalInputTokens)} input / {formatNumber(totalsData.totalOutputTokens)} output\n              </p>\n            </div>\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-sm font-medium text-gray-500 mb-2\">Total Cost</h3>\n              <p className=\"text-2xl font-bold text-gray-900\">{formatCurrency(totalsData.totalCost)}</p>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                {formatCurrency(totalsData.averageCostPerInteraction)} per interaction\n              </p>\n            </div>\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-sm font-medium text-gray-500 mb-2\">Performance</h3>\n              <p className=\"text-2xl font-bold text-gray-900\">{totalsData.averageResponseTime}ms</p>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                Avg response time\n              </p>\n            </div>\n          </div>\n        )}\n\n        {/* Usage by Model */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Usage by AI Model</h2>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Model Chart */}\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Cost Distribution</h3>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={modelData}\n                    dataKey=\"totalCost\"\n                    nameKey=\"modelName\"\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={100}\n                    label={(entry) => `${entry.modelName}: ${formatCurrency(entry.totalCost)}`}\n                  >\n                    {modelData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                    ))}\n                  </Pie>\n                  <Tooltip formatter={(value: number) => formatCurrency(value)} />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n\n            {/* Model Table */}\n            <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n              <table className=\"min-w-full\">\n                <thead>\n                  <tr className=\"bg-gray-50\">\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Model\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Interactions\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Tokens\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Cost\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {modelData.map((model) => (\n                    <tr key={model.modelId}>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-900\">{model.modelName}</div>\n                          <div className=\"text-sm text-gray-500\">{model.provider}</div>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {formatNumber(model.interactions)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {formatNumber(model.totalTokens)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {formatCurrency(model.totalCost)}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n\n        {/* Usage by Interaction Type */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Usage by Interaction Type</h2>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Interaction Chart */}\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Token Usage</h3>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={interactionData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"displayName\" angle={-45} textAnchor=\"end\" height={80} />\n                  <YAxis />\n                  <Tooltip formatter={(value: number) => formatNumber(value)} />\n                  <Legend />\n                  <Bar dataKey=\"inputTokens\" fill=\"#3b82f6\" name=\"Input Tokens\" />\n                  <Bar dataKey=\"outputTokens\" fill=\"#10b981\" name=\"Output Tokens\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n\n            {/* Interaction Table */}\n            <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n              <table className=\"min-w-full\">\n                <thead>\n                  <tr className=\"bg-gray-50\">\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Type\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Interactions\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Tokens\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Cost\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {interactionData.map((interaction) => (\n                    <tr key={interaction.typeId}>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"text-sm font-medium text-gray-900\">{interaction.displayName}</div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {formatNumber(interaction.interactions)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {formatNumber(interaction.totalTokens)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                        {formatCurrency(interaction.totalCost)}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n\n        {/* Top Users */}\n        <div>\n          <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Top Users by Usage</h2>\n          <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n            <table className=\"min-w-full\">\n              <thead>\n                <tr className=\"bg-gray-50\">\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    User\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Email\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Interactions\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Tokens\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Cost\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {userData.slice(0, 10).map((user) => (\n                  <tr key={user.userId}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                      {user.displayName}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {user.email}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {formatNumber(user.interactions)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {formatNumber(user.totalTokens)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {formatCurrency(user.totalCost)}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/articles/[articleId]/changes/[changeId]/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadChange'. Either include it or remove the dependency array.","line":63,"column":6,"nodeType":"ArrayExpression","endLine":63,"endColumn":41,"suggestions":[{"desc":"Update the dependencies array to be: [loadChange, params.articleId, params.changeId]","fix":{"range":[1493,1528],"text":"[loadChange, params.articleId, params.changeId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter, useParams } from 'next/navigation';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  ArrowLeft,\n  FileText,\n  User,\n  Calendar,\n  GitCompare,\n  RotateCcw\n} from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface ChangeDetail {\n  id: string;\n  articleId: string;\n  changeType: string;\n  description: string;\n  diff: string;\n  isActive: boolean;\n  createdAt: string;\n  rolledBackAt: string | null;\n  article: {\n    articleId: string;\n    articleTitle: string;\n    articleSlug: string;\n  };\n  user: {\n    clerkUserId: string;\n    email: string;\n    firstName: string | null;\n    lastName: string | null;\n    imageUrl: string | null;\n  };\n  suggestion: {\n    suggestionId: string;\n    suggestionType: string;\n    suggestionDetails: string;\n    isApproved: boolean;\n    processedAt: string;\n    aiValidationResponse: string;\n  } | null;\n  rollbackUser: {\n    clerkUserId: string;\n    email: string;\n    firstName: string | null;\n    lastName: string | null;\n  } | null;\n}\n\nexport default function ChangeDetailPage() {\n  const router = useRouter();\n  const params = useParams();\n  const [change, setChange] = useState<ChangeDetail | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadChange();\n  }, [params.articleId, params.changeId]);\n\n  const loadChange = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(\n        `/api/admin/articles/${params.articleId}/changes/${params.changeId}`\n      );\n      if (!response.ok) throw new Error('Failed to load change');\n\n      const data = await response.json();\n      setChange(data);\n    } catch (error) {\n      console.error('Error loading change:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRollback = async () => {\n    if (!change) return;\n    \n    if (!confirm('Are you sure you want to rollback this change? This will restore the article to its previous state.')) {\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        `/api/admin/articles/${change.articleId}/changes/${change.id}/rollback`,\n        {\n          method: 'POST',\n        }\n      );\n\n      if (!response.ok) throw new Error('Failed to rollback change');\n\n      const result = await response.json();\n      alert(result.message);\n      router.push('/admin/changes');\n    } catch (error) {\n      console.error('Error rolling back change:', error);\n      alert('Failed to rollback change');\n    }\n  };\n\n  const getUserName = (user: ChangeDetail['user'] | null) => {\n    if (!user) return 'Unknown';\n    if (user.firstName || user.lastName) {\n      return `${user.firstName || ''} ${user.lastName || ''}`.trim();\n    }\n    return user.email;\n  };\n\n  const formatDiff = (diff: string) => {\n    return diff.split('\\n').map((line, index) => {\n      let className = '';\n      if (line.startsWith('+') && !line.startsWith('+++')) {\n        className = 'bg-green-100 text-green-800';\n      } else if (line.startsWith('-') && !line.startsWith('---')) {\n        className = 'bg-red-100 text-red-800';\n      } else if (line.startsWith('@@')) {\n        className = 'bg-blue-100 text-blue-800 font-medium';\n      }\n\n      return (\n        <div key={index} className={`font-mono text-sm px-2 py-0.5 ${className}`}>\n          {line || '\\u00A0'}\n        </div>\n      );\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto py-6\">\n        <div className=\"text-center\">Loading change details...</div>\n      </div>\n    );\n  }\n\n  if (!change) {\n    return (\n      <div className=\"container mx-auto py-6\">\n        <div className=\"text-center\">Change not found</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => router.push('/admin/changes')}\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-1\" />\n            Back to Changes\n          </Button>\n          <h1 className=\"text-2xl font-bold\">Change Details</h1>\n        </div>\n\n        {change.isActive && change.changeType !== 'rollback' && (\n          <Button variant=\"destructive\" onClick={handleRollback}>\n            <RotateCcw className=\"h-4 w-4 mr-1\" />\n            Rollback This Change\n          </Button>\n        )}\n      </div>\n\n      {/* Change Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            {change.article.articleTitle}\n          </CardTitle>\n          <CardDescription>{change.description}</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground mb-1\">\n                Change Type\n              </p>\n              <Badge variant=\"secondary\">{change.changeType}</Badge>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground mb-1\">\n                Status\n              </p>\n              <Badge variant={change.isActive ? 'default' : 'secondary'}>\n                {change.isActive ? 'Active' : 'Rolled Back'}\n              </Badge>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground mb-1\">\n                Changed By\n              </p>\n              <div className=\"flex items-center gap-2\">\n                <User className=\"h-4 w-4\" />\n                {getUserName(change.user)}\n              </div>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground mb-1\">\n                Changed On\n              </p>\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4\" />\n                {formatDistanceToNow(new Date(change.createdAt), {\n                  addSuffix: true,\n                })}\n              </div>\n            </div>\n          </div>\n\n          {change.rolledBackAt && change.rollbackUser && (\n            <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4\">\n              <p className=\"text-sm text-orange-800\">\n                This change was rolled back by {getUserName(change.rollbackUser)}{' '}\n                {formatDistanceToNow(new Date(change.rolledBackAt), {\n                  addSuffix: true,\n                })}\n              </p>\n            </div>\n          )}\n\n          {change.suggestion && (\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 space-y-2\">\n              <h3 className=\"font-medium\">Original Suggestion</h3>\n              <p className=\"text-sm\">\n                <span className=\"font-medium\">Type:</span> {change.suggestion.suggestionType}\n              </p>\n              <p className=\"text-sm\">\n                <span className=\"font-medium\">Details:</span> {change.suggestion.suggestionDetails}\n              </p>\n              {change.suggestion.aiValidationResponse && (\n                <details className=\"text-sm\">\n                  <summary className=\"cursor-pointer font-medium\">\n                    AI Validation Response\n                  </summary>\n                  <pre className=\"mt-2 p-2 bg-white rounded overflow-x-auto\">\n                    {JSON.stringify(\n                      JSON.parse(change.suggestion.aiValidationResponse),\n                      null,\n                      2\n                    )}\n                  </pre>\n                </details>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Diff View */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <GitCompare className=\"h-5 w-5\" />\n            Change Diff\n          </CardTitle>\n          <CardDescription>\n            Shows what was added (+) and removed (-) in this change\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"bg-gray-50 rounded-lg p-4 overflow-x-auto\">\n            {formatDiff(change.diff)}\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"flex gap-4\">\n        <Button\n          variant=\"outline\"\n          onClick={() =>\n            router.push(`/articles/${change.article.articleSlug}`)\n          }\n        >\n          View Article\n        </Button>\n        <Button\n          variant=\"outline\"\n          onClick={() =>\n            router.push(`/admin/articles/${change.articleId}/edit`)\n          }\n        >\n          Edit Article\n        </Button>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/articles/[articleId]/edit/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'articleTags' is assigned a value but never used.","line":50,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":21},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchArticle', 'fetchArticleTags', and 'hasMinRole'. Either include them or remove the dependency array.","line":76,"column":6,"nodeType":"ArrayExpression","endLine":76,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [articleId, fetchArticle, fetchArticleTags, hasMinRole, isLoadingRole]","fix":{"range":[2121,2147],"text":"[articleId, fetchArticle, fetchArticleTags, hasMinRole, isLoadingRole]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, use } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Role } from \"@prisma/client\";\nimport { ArrowLeft, Save, Loader2 } from \"lucide-react\";\nimport MarkdownViewer from \"@/components/markdown-viewer\";\n\ninterface PageProps {\n  params: Promise<{ articleId: string }>;\n}\n\ninterface Article {\n  articleId: string;\n  articleTitle: string;\n  articleSlug: string;\n  contentHtml: string | null;\n  categoryId: string | null;\n  streamId: string | null;\n  category: {\n    categoryId: string;\n    categoryName: string;\n  } | null;\n  stream: {\n    streamId: string;\n    streamName: string;\n  } | null;\n}\n\ninterface Category {\n  categoryId: string;\n  categoryName: string;\n}\n\ninterface Tag {\n  tagId: string;\n  tagName: string;\n  description: string | null;\n  color: string | null;\n}\n\nexport default function EditArticlePage({ params }: PageProps) {\n  const { articleId } = use(params);\n  const router = useRouter();\n  const { hasMinRole, isLoadingRole } = useAuth();\n  const [article, setArticle] = useState<Article | null>(null);\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [allTags, setAllTags] = useState<Tag[]>([]);\n  const [articleTags, setArticleTags] = useState<Tag[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showPreview, setShowPreview] = useState(false);\n  \n  // Form state\n  const [title, setTitle] = useState(\"\");\n  const [slug, setSlug] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [categoryId, setCategoryId] = useState(\"\");\n  const [selectedTagIds, setSelectedTagIds] = useState<string[]>([]);\n\n  useEffect(() => {\n    if (!isLoadingRole && !hasMinRole(Role.EDITOR)) {\n      router.push(\"/dashboard\");\n    }\n  }, [isLoadingRole, hasMinRole, router]);\n\n  useEffect(() => {\n    if (!isLoadingRole && hasMinRole(Role.EDITOR)) {\n      fetchArticle();\n      fetchCategories();\n      fetchAllTags();\n      fetchArticleTags();\n    }\n  }, [articleId, isLoadingRole]);\n\n  async function fetchArticle() {\n    try {\n      console.log(\"Fetching article with ID:\", articleId);\n      const response = await fetch(`/api/admin/articles/${articleId}`);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `Failed to fetch article: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log(\"Article data:\", data);\n      \n      setArticle(data);\n      setTitle(data.articleTitle);\n      setSlug(data.articleSlug);\n      setContent(data.contentHtml || \"\");\n      setCategoryId(data.categoryId || \"\");\n    } catch (error) {\n      console.error(\"Error fetching article:\", error);\n      setError(error instanceof Error ? error.message : \"Failed to load article\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function fetchCategories() {\n    try {\n      const response = await fetch(\"/api/categories\");\n      if (!response.ok) throw new Error(\"Failed to fetch categories\");\n      \n      const data = await response.json();\n      setCategories(data);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n    }\n  }\n\n  async function fetchAllTags() {\n    try {\n      const response = await fetch(\"/api/admin/tags\");\n      if (!response.ok) throw new Error(\"Failed to fetch tags\");\n      \n      const data = await response.json();\n      setAllTags(data);\n    } catch (error) {\n      console.error(\"Error fetching tags:\", error);\n    }\n  }\n\n  async function fetchArticleTags() {\n    try {\n      const response = await fetch(`/api/admin/articles/${articleId}/tags`);\n      if (!response.ok) throw new Error(\"Failed to fetch article tags\");\n      \n      const data = await response.json();\n      setArticleTags(data);\n      setSelectedTagIds(data.map((tag: Tag) => tag.tagId));\n    } catch (error) {\n      console.error(\"Error fetching article tags:\", error);\n    }\n  }\n\n  async function handleSave() {\n    setSaving(true);\n    setError(null);\n    \n    try {\n      // Save article details\n      const articleResponse = await fetch(`/api/admin/articles/${articleId}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          articleTitle: title,\n          articleSlug: slug,\n          contentHtml: content,\n          categoryId: categoryId || null,\n        }),\n      });\n      \n      if (!articleResponse.ok) {\n        const data = await articleResponse.json();\n        throw new Error(data.error || \"Failed to save article\");\n      }\n\n      // Save tags\n      const tagsResponse = await fetch(`/api/admin/articles/${articleId}/tags`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          tagIds: selectedTagIds,\n        }),\n      });\n      \n      if (!tagsResponse.ok) {\n        const data = await tagsResponse.json();\n        throw new Error(data.error || \"Failed to save tags\");\n      }\n      \n      router.push(\"/admin/articles\");\n    } catch (error) {\n      console.error(\"Error saving article:\", error);\n      setError(error instanceof Error ? error.message : \"Failed to save article\");\n    } finally {\n      setSaving(false);\n    }\n  }\n\n  function generateSlug() {\n    const newSlug = title\n      .toLowerCase()\n      .replace(/[^\\w\\s-]/g, \"\")\n      .replace(/\\s+/g, \"-\")\n      .replace(/-+/g, \"-\")\n      .trim();\n    setSlug(newSlug);\n  }\n\n  function handleTagToggle(tagId: string) {\n    setSelectedTagIds(prev => \n      prev.includes(tagId) \n        ? prev.filter(id => id !== tagId)\n        : [...prev, tagId]\n    );\n  }\n\n  if (isLoadingRole || loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-orange-600\" />\n      </div>\n    );\n  }\n\n  if (!article) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-red-600\">Article not found</p>\n        <button\n          onClick={() => router.push(\"/admin/articles\")}\n          className=\"mt-4 text-blue-600 hover:text-blue-800\"\n        >\n          Back to articles\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      <div className=\"mb-6 flex items-center justify-between\">\n        <button\n          onClick={() => router.push(\"/admin/articles\")}\n          className=\"flex items-center gap-2 text-gray-600 hover:text-gray-900\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n          Back to articles\n        </button>\n        \n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => setShowPreview(!showPreview)}\n            className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50\"\n          >\n            {showPreview ? \"Edit\" : \"Preview\"}\n          </button>\n          <button\n            onClick={handleSave}\n            disabled={saving}\n            className=\"flex items-center gap-2 px-4 py-2 bg-orange-600 text-white rounded-md hover:bg-orange-700 disabled:opacity-50\"\n          >\n            {saving ? (\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n            ) : (\n              <Save className=\"h-4 w-4\" />\n            )}\n            Save\n          </button>\n        </div>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow-sm p-6\">\n        <h1 className=\"text-2xl font-bold mb-6\">Edit Article</h1>\n        \n        {error && (\n          <div className=\"mb-4 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\n            {error}\n          </div>\n        )}\n\n        {showPreview ? (\n          <div className=\"prose prose-sm max-w-none\">\n            <h2 className=\"text-xl font-semibold mb-4\">{title}</h2>\n            <MarkdownViewer content={content} />\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Title\n              </label>\n              <input\n                type=\"text\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                className=\"w-full rounded-md border border-gray-300 px-3 py-2 focus:border-orange-500 focus:outline-none focus:ring-1 focus:ring-orange-500\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Slug\n              </label>\n              <div className=\"flex gap-2\">\n                <input\n                  type=\"text\"\n                  value={slug}\n                  onChange={(e) => setSlug(e.target.value)}\n                  className=\"flex-1 rounded-md border border-gray-300 px-3 py-2 focus:border-orange-500 focus:outline-none focus:ring-1 focus:ring-orange-500\"\n                />\n                <button\n                  onClick={generateSlug}\n                  className=\"px-3 py-2 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200\"\n                >\n                  Generate\n                </button>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Category\n              </label>\n              <select\n                value={categoryId}\n                onChange={(e) => setCategoryId(e.target.value)}\n                className=\"w-full rounded-md border border-gray-300 px-3 py-2 focus:border-orange-500 focus:outline-none focus:ring-1 focus:ring-orange-500\"\n              >\n                <option value=\"\">Uncategorized</option>\n                {categories.map((category) => (\n                  <option key={category.categoryId} value={category.categoryId}>\n                    {category.categoryName}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Tags\n              </label>\n              <div className=\"border border-gray-300 rounded-md p-3 max-h-48 overflow-y-auto\">\n                {allTags.length === 0 ? (\n                  <p className=\"text-gray-500 text-sm\">No tags available</p>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {allTags.map((tag) => (\n                      <label key={tag.tagId} className=\"flex items-center space-x-2 cursor-pointer\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedTagIds.includes(tag.tagId)}\n                          onChange={() => handleTagToggle(tag.tagId)}\n                          className=\"rounded border-gray-300 text-orange-600 focus:ring-orange-500\"\n                        />\n                        <span className=\"flex items-center space-x-2\">\n                          {tag.color && (\n                            <div\n                              className=\"w-3 h-3 rounded-full\"\n                              style={{ backgroundColor: tag.color }}\n                            />\n                          )}\n                          <span className=\"text-sm\">{tag.tagName}</span>\n                          {tag.description && (\n                            <span className=\"text-xs text-gray-500\">({tag.description})</span>\n                          )}\n                        </span>\n                      </label>\n                    ))}\n                  </div>\n                )}\n              </div>\n              <p className=\"mt-1 text-xs text-gray-500\">\n                Select the tags that apply to this article\n              </p>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Content (Markdown)\n              </label>\n              <textarea\n                value={content}\n                onChange={(e) => setContent(e.target.value)}\n                rows={20}\n                className=\"w-full rounded-md border border-gray-300 px-3 py-2 font-mono text-sm focus:border-orange-500 focus:outline-none focus:ring-1 focus:ring-orange-500\"\n                placeholder=\"Enter article content in Markdown format...\"\n              />\n              <p className=\"mt-1 text-xs text-gray-500\">\n                Use Markdown syntax for formatting. Click Preview to see rendered content.\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/articles/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchArticles'. Either include it or remove the dependency array.","line":37,"column":6,"nodeType":"ArrayExpression","endLine":37,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [page, search, filter, fetchArticles]","fix":{"range":[974,996],"text":"[page, search, filter, fetchArticles]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { Search, Edit, Trash2, Eye, Flag } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface Article {\n  articleId: string;\n  articleTitle: string;\n  articleSlug: string;\n  categoryId: string | null;\n  category: {\n    categoryName: string;\n  } | null;\n  isContentGenerated: boolean;\n  isFlagged: boolean;\n  createdAt: string;\n  updatedAt: string;\n  _count: {\n    likes: number;\n    comments: number;\n  };\n}\n\nexport default function AdminArticlesPage() {\n  const router = useRouter();\n  const [articles, setArticles] = useState<Article[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [search, setSearch] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [filter, setFilter] = useState<\"all\" | \"flagged\" | \"generated\">(\"all\");\n\n  useEffect(() => {\n    fetchArticles();\n  }, [page, search, filter]);\n\n  async function fetchArticles() {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams({\n        page: page.toString(),\n        search,\n        filter,\n      });\n      \n      const response = await fetch(`/api/admin/articles?${params}`);\n      if (!response.ok) throw new Error(\"Failed to fetch articles\");\n      \n      const data = await response.json();\n      setArticles(data.articles);\n      setTotalPages(data.totalPages);\n    } catch (error) {\n      console.error(\"Error fetching articles:\", error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleDelete(articleId: string) {\n    if (!confirm(\"Are you sure you want to delete this article?\")) return;\n    \n    try {\n      const response = await fetch(`/api/admin/articles/${articleId}`, {\n        method: \"DELETE\",\n      });\n      \n      if (!response.ok) throw new Error(\"Failed to delete article\");\n      \n      await fetchArticles();\n    } catch (error) {\n      console.error(\"Error deleting article:\", error);\n      alert(\"Failed to delete article\");\n    }\n  }\n\n  async function handleToggleFlag(articleId: string, currentFlag: boolean) {\n    try {\n      const response = await fetch(`/api/admin/articles/${articleId}/flag`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ isFlagged: !currentFlag }),\n      });\n      \n      if (!response.ok) throw new Error(\"Failed to update flag\");\n      \n      await fetchArticles();\n    } catch (error) {\n      console.error(\"Error updating flag:\", error);\n      alert(\"Failed to update flag\");\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Article Management</h1>\n        <p className=\"mt-2 text-gray-600\">\n          Search, edit, and manage all articles in the system\n        </p>\n      </div>\n\n      <div className=\"mb-6 flex flex-col sm:flex-row gap-4\">\n        <div className=\"flex-1\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-gray-400\" />\n            <input\n              type=\"text\"\n              value={search}\n              onChange={(e) => {\n                setSearch(e.target.value);\n                setPage(1);\n              }}\n              placeholder=\"Search articles...\"\n              className=\"w-full rounded-lg border border-gray-300 py-2 pl-10 pr-4 focus:border-orange-500 focus:outline-none focus:ring-1 focus:ring-orange-500\"\n            />\n          </div>\n        </div>\n        \n        <select\n          value={filter}\n          onChange={(e) => {\n            setFilter(e.target.value as typeof filter);\n            setPage(1);\n          }}\n          className=\"rounded-lg border border-gray-300 px-4 py-2 focus:border-orange-500 focus:outline-none focus:ring-1 focus:ring-orange-500\"\n        >\n          <option value=\"all\">All Articles</option>\n          <option value=\"flagged\">Flagged Only</option>\n          <option value=\"generated\">AI Generated</option>\n        </select>\n      </div>\n\n      {loading ? (\n        <div className=\"text-center py-8\">Loading...</div>\n      ) : articles.length === 0 ? (\n        <div className=\"text-center py-8 text-gray-500\">No articles found</div>\n      ) : (\n        <>\n          <div className=\"bg-white shadow-sm rounded-lg overflow-hidden\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Title\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Category\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Stats\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Updated\n                  </th>\n                  <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {articles.map((article) => (\n                  <tr key={article.articleId} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4\">\n                      <div>\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {article.articleTitle}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          {article.articleSlug}\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className=\"text-sm text-gray-900\">\n                        {article.category?.categoryName || \"Uncategorized\"}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm text-gray-900\">\n                        {article._count.likes} likes, {article._count.comments} comments\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex gap-2\">\n                        {article.isContentGenerated && (\n                          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                            AI Generated\n                          </span>\n                        )}\n                        {article.isFlagged && (\n                          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800\">\n                            Flagged\n                          </span>\n                        )}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {format(new Date(article.updatedAt), \"MMM d, yyyy\")}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                      <div className=\"flex justify-end gap-2\">\n                        <button\n                          onClick={() => router.push(`/articles/${article.articleSlug}`)}\n                          className=\"text-gray-600 hover:text-gray-900\"\n                          title=\"View\"\n                        >\n                          <Eye className=\"h-5 w-5\" />\n                        </button>\n                        <button\n                          onClick={() => router.push(`/admin/articles/${article.articleId}/edit`)}\n                          className=\"text-blue-600 hover:text-blue-900\"\n                          title=\"Edit\"\n                        >\n                          <Edit className=\"h-5 w-5\" />\n                        </button>\n                        <button\n                          onClick={() => handleToggleFlag(article.articleId, article.isFlagged)}\n                          className={article.isFlagged ? \"text-green-600 hover:text-green-900\" : \"text-orange-600 hover:text-orange-900\"}\n                          title={article.isFlagged ? \"Unflag\" : \"Flag\"}\n                        >\n                          <Flag className=\"h-5 w-5\" />\n                        </button>\n                        <button\n                          onClick={() => handleDelete(article.articleId)}\n                          className=\"text-red-600 hover:text-red-900\"\n                          title=\"Delete\"\n                        >\n                          <Trash2 className=\"h-5 w-5\" />\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          {totalPages > 1 && (\n            <div className=\"mt-6 flex justify-center gap-2\">\n              <button\n                onClick={() => setPage(Math.max(1, page - 1))}\n                disabled={page === 1}\n                className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                Previous\n              </button>\n              <span className=\"px-4 py-2 text-sm text-gray-700\">\n                Page {page} of {totalPages}\n              </span>\n              <button\n                onClick={() => setPage(Math.min(totalPages, page + 1))}\n                disabled={page === totalPages}\n                className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                Next\n              </button>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/categories/[categoryId]/articles/client-page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchCategoryAndArticles'. Either include it or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [categoryId, fetchCategoryAndArticles]","fix":{"range":[1761,1773],"text":"[categoryId, fetchCategoryAndArticles]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'searchArticles'. Either include it or remove the dependency array.","line":180,"column":6,"nodeType":"ArrayExpression","endLine":180,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [searchArticles, searchQuery, showSearchModal]","fix":{"range":[5399,5429],"text":"[searchArticles, searchQuery, showSearchModal]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport { ArrowLeft, Search, FileText, Calendar, Eye, Heart, MessageSquare, MoveHorizontal, X } from 'lucide-react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Role } from '@prisma/client';\nimport { useRouter } from 'next/navigation';\n\ninterface Article {\n  id: string;\n  title: string;\n  slug: string;\n  createdAt: string;\n  viewCount: number;\n  _count: {\n    likes: number;\n    comments: number;\n  };\n}\n\ninterface Category {\n  id: string;\n  categoryName: string;\n  description: string | null;\n  _count: {\n    articles: number;\n  };\n}\n\ninterface SearchArticle extends Article {\n  categories: Array<{\n    category: {\n      id: string;\n      categoryName: string;\n    };\n  }>;\n}\n\nexport default function CategoryArticlesClientPage({ categoryId }: { categoryId: string }) {\n  const router = useRouter();\n  const { hasMinRole, userRole } = useAuth();\n  const [category, setCategory] = useState<Category | null>(null);\n  const [articles, setArticles] = useState<Article[]>([]);\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedArticles, setSelectedArticles] = useState<{ [key: string]: string }>({});\n  const [moving, setMoving] = useState<string | null>(null);\n  const [showSearchModal, setShowSearchModal] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState<SearchArticle[]>([]);\n  const [searching, setSearching] = useState(false);\n\n  // Start fetching data immediately\n  useEffect(() => {\n    fetchCategoryAndArticles();\n    fetchCategories();\n  }, [categoryId]);\n\n  // Handle authorization separately\n  useEffect(() => {\n    if (userRole && !hasMinRole(Role.ADMIN)) {\n      router.push('/dashboard');\n    }\n  }, [userRole, hasMinRole, router]);\n\n  async function fetchCategoryAndArticles() {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Fetch both in parallel\n      const [categoryResponse, articlesResponse] = await Promise.all([\n        fetch(`/api/admin/categories/${categoryId}`),\n        fetch(`/api/admin/categories/${categoryId}/articles`)\n      ]);\n\n      if (!categoryResponse.ok) throw new Error('Failed to fetch category');\n      if (!articlesResponse.ok) throw new Error('Failed to fetch articles');\n\n      const [categoryData, articlesData] = await Promise.all([\n        categoryResponse.json(),\n        articlesResponse.json()\n      ]);\n\n      setCategory(categoryData);\n      setArticles(articlesData);\n    } catch (err) {\n      console.error('Error fetching data:', err);\n      setError(err instanceof Error ? err.message : 'An error occurred');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function fetchCategories() {\n    try {\n      const response = await fetch('/api/admin/categories');\n      if (!response.ok) throw new Error('Failed to fetch categories');\n      const data = await response.json();\n      setCategories(data);\n    } catch (err) {\n      console.error('Failed to fetch categories:', err);\n    }\n  }\n\n  async function moveArticle(articleId: string, newCategoryId: string) {\n    if (!newCategoryId || newCategoryId === categoryId) return;\n\n    setMoving(articleId);\n    setError(null);\n\n    try {\n      const response = await fetch(`/api/admin/articles/${articleId}/move`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ categoryId: newCategoryId }),\n      });\n\n      if (!response.ok) throw new Error('Failed to move article');\n\n      // Refresh the articles list\n      await fetchCategoryAndArticles();\n      setSelectedArticles({ ...selectedArticles, [articleId]: '' });\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to move article');\n    } finally {\n      setMoving(null);\n    }\n  }\n\n  async function searchArticles() {\n    if (!searchQuery.trim()) return;\n\n    setSearching(true);\n    try {\n      const response = await fetch(`/api/admin/articles/search?q=${encodeURIComponent(searchQuery)}&excludeCategory=${categoryId}`);\n      if (!response.ok) throw new Error('Failed to search articles');\n      const data = await response.json();\n      setSearchResults(data);\n    } catch (err) {\n      console.error('Search error:', err);\n    } finally {\n      setSearching(false);\n    }\n  }\n\n  async function moveArticleFromSearch(articleId: string) {\n    setMoving(articleId);\n    setError(null);\n\n    try {\n      const response = await fetch(`/api/admin/articles/${articleId}/move`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ categoryId }),\n      });\n\n      if (!response.ok) throw new Error('Failed to move article');\n\n      // Remove from search results and refresh articles\n      setSearchResults(searchResults.filter(a => a.id !== articleId));\n      await fetchCategoryAndArticles();\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to move article');\n    } finally {\n      setMoving(null);\n    }\n  }\n\n  useEffect(() => {\n    const debounceTimer = setTimeout(() => {\n      if (showSearchModal && searchQuery) {\n        searchArticles();\n      }\n    }, 300);\n\n    return () => clearTimeout(debounceTimer);\n  }, [searchQuery, showSearchModal]);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[60vh]\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading category and articles...</p>\n        </div>\n      </div>\n    );\n  }\n  \n  if (error) {\n    return (\n      <div className=\"max-w-4xl mx-auto p-8\">\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n          <h2 className=\"text-red-800 font-semibold mb-2\">Error loading data</h2>\n          <p className=\"text-red-600\">{error}</p>\n          <button \n            onClick={() => {\n              setError(null);\n              fetchCategoryAndArticles();\n            }}\n            className=\"mt-4 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\n          >\n            Try Again\n          </button>\n        </div>\n      </div>\n    );\n  }\n  \n  if (!category) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-gray-600\">Category not found</p>\n        <Link href=\"/admin/categories\" className=\"text-blue-600 hover:text-blue-800 mt-2 inline-block\">\n          ← Back to Categories\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <Link href=\"/admin/categories\" className=\"inline-flex items-center text-blue-600 hover:text-blue-800 mb-4\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Back to Categories\n        </Link>\n        \n        <div className=\"flex justify-between items-start\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">Articles in {category.categoryName}</h1>\n            {category.description && (\n              <p className=\"text-gray-600 mb-4\">{category.description}</p>\n            )}\n            <p className=\"text-sm text-gray-500\">\n              Total articles: {articles.length}\n            </p>\n          </div>\n          \n          <button\n            onClick={() => setShowSearchModal(true)}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n          >\n            <Search className=\"h-4 w-4\" />\n            Search Other Articles\n          </button>\n        </div>\n      </div>\n\n      {articles.length === 0 ? (\n        <div className=\"text-center py-12 bg-gray-50 rounded-lg\">\n          <FileText className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n          <p className=\"text-gray-500\">No articles in this category yet.</p>\n        </div>\n      ) : (\n        <div className=\"bg-white shadow-sm rounded-lg overflow-hidden\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Article\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Stats\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Created\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Move to Category\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {articles.map((article) => (\n                <tr key={article.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4\">\n                    <Link \n                      href={`/admin/articles/${article.id}/edit`}\n                      className=\"text-blue-600 hover:text-blue-800 font-medium\"\n                    >\n                      {article.title}\n                    </Link>\n                    <p className=\"text-sm text-gray-500 mt-1\">{article.slug}</p>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n                      <span className=\"flex items-center gap-1\">\n                        <Eye className=\"h-4 w-4\" />\n                        {article.viewCount}\n                      </span>\n                      <span className=\"flex items-center gap-1\">\n                        <Heart className=\"h-4 w-4\" />\n                        {article._count.likes}\n                      </span>\n                      <span className=\"flex items-center gap-1\">\n                        <MessageSquare className=\"h-4 w-4\" />\n                        {article._count.comments}\n                      </span>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 text-sm text-gray-500\">\n                    <div className=\"flex items-center gap-1\">\n                      <Calendar className=\"h-4 w-4\" />\n                      {new Date(article.createdAt).toLocaleDateString()}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <select\n                        value={selectedArticles[article.id] || ''}\n                        onChange={(e) => setSelectedArticles({ ...selectedArticles, [article.id]: e.target.value })}\n                        className=\"block w-full px-3 py-2 border border-gray-300 rounded-md text-sm\"\n                        disabled={moving === article.id}\n                      >\n                        <option value=\"\">Select category...</option>\n                        {categories\n                          .filter(cat => cat.id !== categoryId)\n                          .map(cat => (\n                            <option key={cat.id} value={cat.id}>\n                              {cat.categoryName} ({cat._count.articles})\n                            </option>\n                          ))}\n                      </select>\n                      <button\n                        onClick={() => moveArticle(article.id, selectedArticles[article.id])}\n                        disabled={!selectedArticles[article.id] || moving === article.id}\n                        className=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center gap-1\"\n                      >\n                        {moving === article.id ? (\n                          'Moving...'\n                        ) : (\n                          <>\n                            <MoveHorizontal className=\"h-4 w-4\" />\n                            Move\n                          </>\n                        )}\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n\n      {/* Search Modal */}\n      {showSearchModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[80vh] overflow-hidden\">\n            <div className=\"p-6 border-b\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h2 className=\"text-2xl font-bold\">Search Articles from Other Categories</h2>\n                <button\n                  onClick={() => {\n                    setShowSearchModal(false);\n                    setSearchQuery('');\n                    setSearchResults([]);\n                  }}\n                  className=\"text-gray-500 hover:text-gray-700\"\n                >\n                  <X className=\"h-6 w-6\" />\n                </button>\n              </div>\n              \n              <div className=\"relative\">\n                <input\n                  type=\"text\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search articles by title...\"\n                  className=\"w-full px-4 py-2 pl-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  autoFocus\n                />\n                <Search className=\"absolute left-3 top-2.5 h-5 w-5 text-gray-400\" />\n              </div>\n            </div>\n\n            <div className=\"p-6 overflow-y-auto max-h-[60vh]\">\n              {searching ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n                  <p className=\"mt-4 text-gray-500\">Searching...</p>\n                </div>\n              ) : searchResults.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-500\">\n                    {searchQuery ? 'No articles found.' : 'Enter a search term to find articles.'}\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {searchResults.map((article) => (\n                    <div key={article.id} className=\"border rounded-lg p-4 hover:bg-gray-50\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold text-lg\">{article.title}</h3>\n                          <p className=\"text-sm text-gray-500 mt-1\">\n                            Current categories: <span className=\"font-medium\">{article.categories?.map(c => c.category.categoryName).join(', ') || 'None'}</span>\n                          </p>\n                          <div className=\"flex items-center gap-4 mt-2 text-sm text-gray-500\">\n                            <span className=\"flex items-center gap-1\">\n                              <Eye className=\"h-4 w-4\" />\n                              {article.viewCount} views\n                            </span>\n                            <span className=\"flex items-center gap-1\">\n                              <Heart className=\"h-4 w-4\" />\n                              {article._count.likes} likes\n                            </span>\n                            <span className=\"flex items-center gap-1\">\n                              <MessageSquare className=\"h-4 w-4\" />\n                              {article._count.comments} comments\n                            </span>\n                          </div>\n                        </div>\n                        <button\n                          onClick={() => moveArticleFromSearch(article.id)}\n                          disabled={moving === article.id}\n                          className=\"ml-4 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center gap-2\"\n                        >\n                          {moving === article.id ? (\n                            'Moving...'\n                          ) : (\n                            <>\n                              <MoveHorizontal className=\"h-4 w-4\" />\n                              Move to {category.categoryName}\n                            </>\n                          )}\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/categories/[categoryId]/articles/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/categories/[categoryId]/edit/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchCategory', 'hasMinRole', and 'router'. Either include them or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [isLoadingRole, categoryId, hasMinRole, fetchCategory, router]","fix":{"range":[1131,1158],"text":"[isLoadingRole, categoryId, hasMinRole, fetchCategory, router]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { use, useState, useEffect } from 'react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Role } from '@prisma/client';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\n\ninterface PageProps {\n  params: Promise<{ categoryId: string }>;\n}\n\ninterface Category {\n  categoryId: string;\n  categoryName: string;\n  description: string | null;\n  _count: {\n    articles: number;\n  };\n}\n\nexport default function EditCategoryPage({ params }: PageProps) {\n  const { categoryId } = use(params);\n  const router = useRouter();\n  const { hasMinRole, isLoadingRole } = useAuth();\n  const [category, setCategory] = useState<Category | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [formData, setFormData] = useState({\n    categoryName: '',\n    description: '',\n  });\n\n  useEffect(() => {\n    if (!isLoadingRole && hasMinRole(Role.ADMIN)) {\n      fetchCategory();\n    } else if (!isLoadingRole && !hasMinRole(Role.ADMIN)) {\n      router.push('/dashboard');\n    }\n  }, [isLoadingRole, categoryId]);\n\n  async function fetchCategory() {\n    try {\n      const response = await fetch(`/api/admin/categories/${categoryId}`);\n      if (!response.ok) throw new Error('Failed to fetch category');\n      const data = await response.json();\n      setCategory(data);\n      setFormData({\n        categoryName: data.categoryName,\n        description: data.description || '',\n      });\n    } catch (error) {\n      console.error('Error fetching category:', error);\n      setError('Failed to load category');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    setSaving(true);\n    setError(null);\n\n    try {\n      const response = await fetch(`/api/admin/categories/${categoryId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(formData),\n      });\n\n      if (!response.ok) throw new Error('Failed to update category');\n\n      router.push('/admin/categories');\n    } catch (error) {\n      console.error('Error updating category:', error);\n      setError('Failed to update category');\n      setSaving(false);\n    }\n  }\n\n  if (isLoadingRole || loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[60vh]\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600\"></div>\n      </div>\n    );\n  }\n\n  if (!category) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-gray-500 mb-4\">Category not found</p>\n        <Link href=\"/admin/categories\" className=\"text-orange-600 hover:text-orange-700\">\n          Back to categories\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-2xl mx-auto\">\n      <div className=\"mb-6\">\n        <Link href=\"/admin/categories\" className=\"text-orange-600 hover:text-orange-700\">\n          ← Back to categories\n        </Link>\n      </div>\n\n      <h1 className=\"text-2xl font-bold text-gray-900 mb-6\">Edit Category</h1>\n\n      {error && (\n        <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-md text-red-600\">\n          {error}\n        </div>\n      )}\n\n      <form onSubmit={handleSubmit} className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"mb-4\">\n          <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Name *\n          </label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            value={formData.categoryName}\n            onChange={(e) => setFormData({ ...formData, categoryName: e.target.value })}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500\"\n            required\n          />\n        </div>\n\n        <div className=\"mb-6\">\n          <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Description\n          </label>\n          <textarea\n            id=\"description\"\n            value={formData.description}\n            onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500\"\n            rows={4}\n          />\n        </div>\n\n        {category._count.articles > 0 && (\n          <div className=\"mb-6 p-4 bg-blue-50 border border-blue-200 rounded-md\">\n            <p className=\"text-sm text-blue-800\">\n              This category contains {category._count.articles} article{category._count.articles === 1 ? '' : 's'}.\n            </p>\n          </div>\n        )}\n\n        <div className=\"flex gap-2\">\n          <button\n            type=\"submit\"\n            disabled={saving}\n            className=\"px-4 py-2 bg-orange-600 text-white rounded-md hover:bg-orange-700 disabled:opacity-50 transition-colors\"\n          >\n            {saving ? 'Saving...' : 'Save Changes'}\n          </button>\n          <Link\n            href=\"/admin/categories\"\n            className=\"px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 transition-colors\"\n          >\n            Cancel\n          </Link>\n        </div>\n      </form>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/categories/client-page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/categories/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/changes/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Undo2' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":8},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadChanges'. Either include it or remove the dependency array.","line":71,"column":6,"nodeType":"ArrayExpression","endLine":71,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [includeInactive, loadChanges]","fix":{"range":[1744,1761],"text":"[includeInactive, loadChanges]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { \n  History, \n  Undo2, \n  User, \n  Calendar, \n  FileText,\n  CheckCircle,\n  XCircle,\n  RotateCcw\n} from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface ChangeHistory {\n  id: string;\n  articleId: string;\n  changeType: string;\n  description: string;\n  isActive: boolean;\n  createdAt: string;\n  rolledBackAt: string | null;\n  article: {\n    articleId: string;\n    articleTitle: string;\n    articleSlug: string;\n  };\n  user: {\n    clerkUserId: string;\n    email: string;\n    firstName: string | null;\n    lastName: string | null;\n    imageUrl: string | null;\n  };\n  suggestion: {\n    suggestionId: string;\n    suggestionType: string;\n    suggestionDetails: string;\n    isApproved: boolean;\n  } | null;\n  rollbackUser: {\n    clerkUserId: string;\n    email: string;\n    firstName: string | null;\n    lastName: string | null;\n  } | null;\n}\n\nexport default function AdminChangesPage() {\n  const router = useRouter();\n  const [changes, setChanges] = useState<ChangeHistory[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [includeInactive, setIncludeInactive] = useState(false);\n  const [stats, setStats] = useState<Record<string, number>>({});\n  const [pagination, setPagination] = useState({\n    total: 0,\n    limit: 50,\n    offset: 0,\n    hasMore: false,\n  });\n\n  useEffect(() => {\n    loadChanges();\n  }, [includeInactive]);\n\n  const loadChanges = async () => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams({\n        includeInactive: includeInactive.toString(),\n        limit: pagination.limit.toString(),\n        offset: pagination.offset.toString(),\n      });\n\n      const response = await fetch(`/api/admin/changes?${params}`);\n      \n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error('API Error Response:', {\n          status: response.status,\n          statusText: response.statusText,\n          body: errorData,\n        });\n        throw new Error(`Failed to load changes: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      setChanges(data.changes);\n      setStats(data.stats);\n      setPagination(data.pagination);\n    } catch (error) {\n      console.error('Error loading changes:', error);\n      // Show the error in the UI\n      alert(`Error loading changes: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRollback = async (change: ChangeHistory) => {\n    if (!confirm('Are you sure you want to rollback this change? This will restore the article to its previous state.')) {\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        `/api/admin/articles/${change.articleId}/changes/${change.id}/rollback`,\n        {\n          method: 'POST',\n        }\n      );\n\n      if (!response.ok) throw new Error('Failed to rollback change');\n\n      const result = await response.json();\n      alert(result.message);\n      loadChanges(); // Reload the list\n    } catch (error) {\n      console.error('Error rolling back change:', error);\n      alert('Failed to rollback change');\n    }\n  };\n\n  const getChangeTypeColor = (type: string) => {\n    switch (type) {\n      case 'suggestion':\n        return 'bg-blue-500';\n      case 'rollback':\n        return 'bg-orange-500';\n      case 'admin_edit':\n        return 'bg-purple-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const getUserName = (user: ChangeHistory['user'] | null) => {\n    if (!user) return 'Unknown';\n    if (user.firstName || user.lastName) {\n      return `${user.firstName || ''} ${user.lastName || ''}`.trim();\n    }\n    return user.email;\n  };\n\n  return (\n    <div className=\"container mx-auto py-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n            <History className=\"h-8 w-8\" />\n            Article Change History\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            View and manage all article changes across the platform\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <Switch\n              id=\"include-inactive\"\n              checked={includeInactive}\n              onCheckedChange={setIncludeInactive}\n            />\n            <Label htmlFor=\"include-inactive\">Show rolled back changes</Label>\n          </div>\n        </div>\n      </div>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Total Changes</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{pagination.total}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Suggestions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.suggestion || 0}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Rollbacks</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.rollback || 0}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium\">Admin Edits</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.admin_edit || 0}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Changes List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Changes</CardTitle>\n          <CardDescription>\n            All changes made to articles through suggestions or direct edits\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"text-center py-8\">Loading changes...</div>\n          ) : changes.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No changes found\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {changes.map((change) => (\n                <div\n                  key={change.id}\n                  className={`border rounded-lg p-4 ${\n                    !change.isActive ? 'opacity-60 bg-muted/50' : ''\n                  }`}\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"space-y-2 flex-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge \n                          className={getChangeTypeColor(change.changeType)}\n                          variant=\"secondary\"\n                        >\n                          {change.changeType}\n                        </Badge>\n                        {change.isActive ? (\n                          <Badge variant=\"outline\" className=\"text-green-600\">\n                            <CheckCircle className=\"h-3 w-3 mr-1\" />\n                            Active\n                          </Badge>\n                        ) : (\n                          <Badge variant=\"outline\" className=\"text-orange-600\">\n                            <XCircle className=\"h-3 w-3 mr-1\" />\n                            Rolled Back\n                          </Badge>\n                        )}\n                      </div>\n\n                      <h3 className=\"font-semibold\">\n                        <a\n                          href={`/articles/${change.article.articleSlug}`}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"hover:underline\"\n                        >\n                          {change.article.articleTitle}\n                        </a>\n                      </h3>\n\n                      <p className=\"text-sm text-muted-foreground\">\n                        {change.description}\n                      </p>\n\n                      {change.suggestion && (\n                        <div className=\"text-sm bg-muted p-2 rounded\">\n                          <span className=\"font-medium\">Suggestion:</span>{' '}\n                          {change.suggestion.suggestionType} -{' '}\n                          {change.suggestion.suggestionDetails.substring(0, 100)}...\n                        </div>\n                      )}\n\n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                        <div className=\"flex items-center gap-1\">\n                          <User className=\"h-3 w-3\" />\n                          {getUserName(change.user)}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Calendar className=\"h-3 w-3\" />\n                          {formatDistanceToNow(new Date(change.createdAt), {\n                            addSuffix: true,\n                          })}\n                        </div>\n                      </div>\n\n                      {change.rolledBackAt && change.rollbackUser && (\n                        <div className=\"text-sm text-orange-600 mt-1\">\n                          Rolled back by {getUserName(change.rollbackUser)}{' '}\n                          {formatDistanceToNow(new Date(change.rolledBackAt), {\n                            addSuffix: true,\n                          })}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"flex items-center gap-2 ml-4\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() =>\n                          router.push(\n                            `/admin/articles/${change.articleId}/changes/${change.id}`\n                          )\n                        }\n                      >\n                        <FileText className=\"h-4 w-4 mr-1\" />\n                        View Diff\n                      </Button>\n                      {change.isActive && change.changeType !== 'rollback' && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => handleRollback(change)}\n                        >\n                          <RotateCcw className=\"h-4 w-4 mr-1\" />\n                          Rollback\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {pagination.hasMore && (\n            <div className=\"mt-4 text-center\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setPagination((prev) => ({\n                    ...prev,\n                    offset: prev.offset + prev.limit,\n                  }));\n                  loadChanges();\n                }}\n              >\n                Load More\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/email-logs/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used.","line":5,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":44},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchLogs'. Either include it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [pagination.page, filters, fetchLogs]","fix":{"range":[1377,1403],"text":"[pagination.page, filters, fetchLogs]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport Link from \"next/link\";\nimport { format } from \"date-fns\";\n\ninterface EmailLog {\n  logId: string;\n  templateId: string | null;\n  to: string;\n  from: string;\n  subject: string;\n  status: string;\n  messageId: string | null;\n  error: string | null;\n  sentAt: string;\n  deliveredAt: string | null;\n  openedAt: string | null;\n  clickedAt: string | null;\n  bouncedAt: string | null;\n  complainedAt: string | null;\n  template: {\n    templateName: string;\n    templateKey: string;\n  } | null;\n}\n\ninterface Pagination {\n  page: number;\n  limit: number;\n  total: number;\n  pages: number;\n}\n\nexport default function EmailLogsPage() {\n  const [logs, setLogs] = useState<EmailLog[]>([]);\n  const [pagination, setPagination] = useState<Pagination>({\n    page: 1,\n    limit: 20,\n    total: 0,\n    pages: 0,\n  });\n  const [loading, setLoading] = useState(true);\n  const [filters, setFilters] = useState({\n    status: \"\",\n    to: \"\",\n  });\n\n  useEffect(() => {\n    fetchLogs();\n  }, [pagination.page, filters]);\n\n  const fetchLogs = async () => {\n    try {\n      const params = new URLSearchParams({\n        page: pagination.page.toString(),\n        limit: pagination.limit.toString(),\n      });\n\n      if (filters.status) params.append(\"status\", filters.status);\n      if (filters.to) params.append(\"to\", filters.to);\n\n      const response = await fetch(`/api/admin/email-logs?${params}`);\n      if (!response.ok) throw new Error(\"Failed to fetch logs\");\n      \n      const data = await response.json();\n      setLogs(data.logs);\n      setPagination(data.pagination);\n    } catch (error) {\n      console.error(\"Error:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      PENDING: \"secondary\",\n      SENT: \"default\",\n      DELIVERED: \"default\",\n      OPENED: \"default\",\n      CLICKED: \"default\",\n      BOUNCED: \"destructive\",\n      FAILED: \"destructive\",\n      COMPLAINED: \"destructive\",\n    };\n\n    return (\n      <Badge variant={variants[status] || \"outline\"}>\n        {status}\n      </Badge>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <p>Loading email logs...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8\">\n      <div className=\"flex justify-between items-center mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Email Logs</h1>\n          <p className=\"text-gray-600 mt-2\">Track sent emails and their delivery status</p>\n        </div>\n        <Link href=\"/admin/email-templates\">\n          <Button variant=\"outline\">Back to Templates</Button>\n        </Link>\n      </div>\n\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle>Filters</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Select\n                value={filters.status || \"all\"}\n                onValueChange={(value) => {\n                  setFilters({ ...filters, status: value === \"all\" ? \"\" : value });\n                  setPagination({ ...pagination, page: 1 });\n                }}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All Statuses\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"PENDING\">Pending</SelectItem>\n                  <SelectItem value=\"SENT\">Sent</SelectItem>\n                  <SelectItem value=\"DELIVERED\">Delivered</SelectItem>\n                  <SelectItem value=\"OPENED\">Opened</SelectItem>\n                  <SelectItem value=\"CLICKED\">Clicked</SelectItem>\n                  <SelectItem value=\"BOUNCED\">Bounced</SelectItem>\n                  <SelectItem value=\"FAILED\">Failed</SelectItem>\n                  <SelectItem value=\"COMPLAINED\">Complained</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Input\n                placeholder=\"Filter by recipient email\"\n                value={filters.to}\n                onChange={(e) => {\n                  setFilters({ ...filters, to: e.target.value });\n                  setPagination({ ...pagination, page: 1 });\n                }}\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"space-y-4\">\n        {logs.map((log) => (\n          <Card key={log.logId}>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex justify-between items-start mb-4\">\n                <div>\n                  <h3 className=\"font-medium\">{log.subject}</h3>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    To: {log.to} • From: {log.from}\n                  </p>\n                  {log.template && (\n                    <p className=\"text-sm text-gray-500 mt-1\">\n                      Template: {log.template.templateName}\n                    </p>\n                  )}\n                </div>\n                {getStatusBadge(log.status)}\n              </div>\n\n              <div className=\"text-sm text-gray-600\">\n                <p>Sent: {format(new Date(log.sentAt), \"PPp\")}</p>\n                {log.deliveredAt && (\n                  <p>Delivered: {format(new Date(log.deliveredAt), \"PPp\")}</p>\n                )}\n                {log.openedAt && (\n                  <p>Opened: {format(new Date(log.openedAt), \"PPp\")}</p>\n                )}\n                {log.error && (\n                  <p className=\"text-red-600 mt-2\">Error: {log.error}</p>\n                )}\n              </div>\n\n              {log.messageId && (\n                <p className=\"text-xs text-gray-500 mt-4\">\n                  Message ID: {log.messageId}\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {logs.length === 0 && (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <p className=\"text-gray-600\">No email logs found</p>\n          </CardContent>\n        </Card>\n      )}\n\n      {pagination.pages > 1 && (\n        <div className=\"flex justify-center gap-2 mt-8\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setPagination({ ...pagination, page: pagination.page - 1 })}\n            disabled={pagination.page === 1}\n          >\n            Previous\n          </Button>\n          <span className=\"px-4 py-2\">\n            Page {pagination.page} of {pagination.pages}\n          </span>\n          <Button\n            variant=\"outline\"\n            onClick={() => setPagination({ ...pagination, page: pagination.page + 1 })}\n            disabled={pagination.page === pagination.pages}\n          >\n            Next\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/email-templates/[templateId]/edit/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchTemplate'. Either include it or remove the dependency array.","line":39,"column":6,"nodeType":"ArrayExpression","endLine":39,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [fetchTemplate, templateId]","fix":{"range":[1191,1203],"text":"[fetchTemplate, templateId]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":228,"column":102,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7856,7916],"text":"Plain text version for email clients that don&apos;t support HTML"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7856,7916],"text":"Plain text version for email clients that don&lsquo;t support HTML"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7856,7916],"text":"Plain text version for email clients that don&#39;t support HTML"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7856,7916],"text":"Plain text version for email clients that don&rsquo;t support HTML"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, use } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useRouter } from \"next/navigation\";\nimport { toast } from \"sonner\";\nimport Link from \"next/link\";\n\ninterface Variable {\n  name: string;\n  description: string;\n  defaultValue?: string;\n}\n\nexport default function EditEmailTemplatePage({ params }: { params: Promise<{ templateId: string }> }) {\n  const router = useRouter();\n  const { templateId } = use(params);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [formData, setFormData] = useState({\n    templateName: \"\",\n    description: \"\",\n    subject: \"\",\n    htmlContent: \"\",\n    textContent: \"\",\n    fromEmail: \"\",\n    fromName: \"\",\n    isActive: true,\n  });\n  const [variables, setVariables] = useState<Variable[]>([]);\n\n  useEffect(() => {\n    fetchTemplate();\n  }, [templateId]);\n\n  const fetchTemplate = async () => {\n    try {\n      const response = await fetch(`/api/admin/email-templates/${templateId}`);\n      if (!response.ok) throw new Error(\"Failed to fetch template\");\n      \n      const template = await response.json();\n      setFormData({\n        templateName: template.templateName,\n        description: template.description || \"\",\n        subject: template.subject,\n        htmlContent: template.htmlContent,\n        textContent: template.textContent || \"\",\n        fromEmail: template.fromEmail || \"\",\n        fromName: template.fromName || \"\",\n        isActive: template.isActive,\n      });\n      \n      if (template.variables && Array.isArray(template.variables)) {\n        setVariables(template.variables);\n      }\n    } catch (error) {\n      toast.error(\"Failed to load template\");\n      console.error(\"Error:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSaving(true);\n\n    try {\n      const response = await fetch(`/api/admin/email-templates/${templateId}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          ...formData,\n          variables: variables.length > 0 ? variables : undefined,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to update template\");\n      }\n\n      toast.success(\"Email template updated successfully\");\n      router.push(\"/admin/email-templates\");\n    } catch (error) {\n      toast.error(error instanceof Error ? error.message : \"Failed to update template\");\n      console.error(\"Error:\", error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const addVariable = () => {\n    setVariables([...variables, { name: \"\", description: \"\", defaultValue: \"\" }]);\n  };\n\n  const updateVariable = (index: number, field: keyof Variable, value: string) => {\n    const updated = [...variables];\n    updated[index] = { ...updated[index], [field]: value };\n    setVariables(updated);\n  };\n\n  const removeVariable = (index: number) => {\n    setVariables(variables.filter((_, i) => i !== index));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <p>Loading template...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 max-w-4xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold\">Edit Email Template</h1>\n        <p className=\"text-gray-600 mt-2\">Update the email template configuration</p>\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <Card>\n          <CardHeader>\n            <CardTitle>Template Details</CardTitle>\n            <CardDescription>Basic information about the email template</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"templateName\">Template Name</Label>\n              <Input\n                id=\"templateName\"\n                value={formData.templateName}\n                onChange={(e) => setFormData({ ...formData, templateName: e.target.value })}\n                placeholder=\"Welcome Email\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                placeholder=\"Email sent to new users when they sign up\"\n                rows={2}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"fromEmail\">From Email (Optional)</Label>\n                <Input\n                  id=\"fromEmail\"\n                  type=\"email\"\n                  value={formData.fromEmail}\n                  onChange={(e) => setFormData({ ...formData, fromEmail: e.target.value })}\n                  placeholder=\"noreply@example.com\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"fromName\">From Name (Optional)</Label>\n                <Input\n                  id=\"fromName\"\n                  value={formData.fromName}\n                  onChange={(e) => setFormData({ ...formData, fromName: e.target.value })}\n                  placeholder=\"IT Learning Platform\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"isActive\"\n                checked={formData.isActive}\n                onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n              />\n              <Label htmlFor=\"isActive\">Template is active</Label>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle>Email Content</CardTitle>\n            <CardDescription>The subject and body of the email</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"subject\">Subject</Label>\n              <Input\n                id=\"subject\"\n                value={formData.subject}\n                onChange={(e) => setFormData({ ...formData, subject: e.target.value })}\n                placeholder=\"Welcome to IT Learning Platform, {{firstName}}!\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"htmlContent\">HTML Content</Label>\n              <Textarea\n                id=\"htmlContent\"\n                value={formData.htmlContent}\n                onChange={(e) => setFormData({ ...formData, htmlContent: e.target.value })}\n                placeholder=\"<h1>Welcome {{firstName}}!</h1><p>Thanks for joining...</p>\"\n                rows={10}\n                required\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">Use {\"{{variable}}\"} syntax for dynamic content</p>\n            </div>\n\n            <div>\n              <Label htmlFor=\"textContent\">Text Content (Optional)</Label>\n              <Textarea\n                id=\"textContent\"\n                value={formData.textContent}\n                onChange={(e) => setFormData({ ...formData, textContent: e.target.value })}\n                placeholder=\"Welcome {{firstName}}! Thanks for joining...\"\n                rows={6}\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">Plain text version for email clients that don't support HTML</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <CardTitle>Template Variables</CardTitle>\n                <CardDescription>Define variables that can be used in the template</CardDescription>\n              </div>\n              <Button type=\"button\" onClick={addVariable} size=\"sm\">\n                Add Variable\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {variables.map((variable, index) => (\n              <div key={index} className=\"flex gap-2 mb-2\">\n                <Input\n                  placeholder=\"Variable name\"\n                  value={variable.name}\n                  onChange={(e) => updateVariable(index, \"name\", e.target.value)}\n                />\n                <Input\n                  placeholder=\"Description\"\n                  value={variable.description}\n                  onChange={(e) => updateVariable(index, \"description\", e.target.value)}\n                />\n                <Input\n                  placeholder=\"Default value\"\n                  value={variable.defaultValue}\n                  onChange={(e) => updateVariable(index, \"defaultValue\", e.target.value)}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={() => removeVariable(index)}\n                >\n                  Remove\n                </Button>\n              </div>\n            ))}\n            {variables.length === 0 && (\n              <p className=\"text-sm text-gray-500\">No variables defined</p>\n            )}\n          </CardContent>\n        </Card>\n\n        <div className=\"flex justify-between mt-6\">\n          <Link href=\"/admin/email-templates\">\n            <Button type=\"button\" variant=\"outline\">Cancel</Button>\n          </Link>\n          <Button type=\"submit\" disabled={saving}>\n            {saving ? \"Saving...\" : \"Save Changes\"}\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/email-templates/[templateId]/test/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":27,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":15},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchTemplate'. Either include it or remove the dependency array.","line":36,"column":6,"nodeType":"ArrayExpression","endLine":36,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [fetchTemplate, params.templateId]","fix":{"range":[1106,1125],"text":"[fetchTemplate, params.templateId]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'result' is assigned a value but never used.","line":81,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useRouter } from \"next/navigation\";\nimport { toast } from \"sonner\";\nimport Link from \"next/link\";\n\ninterface Variable {\n  name: string;\n  description: string;\n  defaultValue?: string;\n}\n\ninterface Template {\n  templateId: string;\n  templateName: string;\n  templateKey: string;\n  subject: string;\n  variables?: Variable[];\n}\n\nexport default function TestEmailTemplatePage({ params }: { params: { templateId: string } }) {\n  const router = useRouter();\n  const [loading, setLoading] = useState(true);\n  const [sending, setSending] = useState(false);\n  const [template, setTemplate] = useState<Template | null>(null);\n  const [recipientEmail, setRecipientEmail] = useState(\"\");\n  const [variables, setVariables] = useState<Record<string, string>>({});\n\n  useEffect(() => {\n    fetchTemplate();\n  }, [params.templateId]);\n\n  const fetchTemplate = async () => {\n    try {\n      const response = await fetch(`/api/admin/email-templates/${params.templateId}`);\n      if (!response.ok) throw new Error(\"Failed to fetch template\");\n      \n      const data = await response.json();\n      setTemplate(data);\n      \n      // Initialize variables with default values\n      if (data.variables && Array.isArray(data.variables)) {\n        const defaultVars: Record<string, string> = {};\n        data.variables.forEach((v: Variable) => {\n          defaultVars[v.name] = v.defaultValue || \"\";\n        });\n        setVariables(defaultVars);\n      }\n    } catch (error) {\n      toast.error(\"Failed to load template\");\n      console.error(\"Error:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSending(true);\n\n    try {\n      const response = await fetch(`/api/admin/email-templates/${params.templateId}/test`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          to: recipientEmail,\n          variables: Object.keys(variables).length > 0 ? variables : undefined,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to send test email\");\n      }\n\n      const result = await response.json();\n      toast.success(\"Test email sent successfully!\");\n      \n      // Clear form\n      setRecipientEmail(\"\");\n    } catch (error) {\n      toast.error(error instanceof Error ? error.message : \"Failed to send test email\");\n      console.error(\"Error:\", error);\n    } finally {\n      setSending(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <p>Loading template...</p>\n      </div>\n    );\n  }\n\n  if (!template) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <p>Template not found</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 max-w-2xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold\">Test Email Template</h1>\n        <p className=\"text-gray-600 mt-2\">Send a test email using: {template.templateName}</p>\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <Card>\n          <CardHeader>\n            <CardTitle>Test Configuration</CardTitle>\n            <CardDescription>Configure the test email parameters</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"recipientEmail\">Recipient Email</Label>\n              <Input\n                id=\"recipientEmail\"\n                type=\"email\"\n                value={recipientEmail}\n                onChange={(e) => setRecipientEmail(e.target.value)}\n                placeholder=\"test@example.com\"\n                required\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">Email address to send the test to</p>\n            </div>\n\n            {template.variables && template.variables.length > 0 && (\n              <div className=\"space-y-4 pt-4 border-t\">\n                <h3 className=\"font-medium\">Template Variables</h3>\n                {template.variables.map((variable) => (\n                  <div key={variable.name}>\n                    <Label htmlFor={variable.name}>\n                      {variable.name}\n                      {variable.description && (\n                        <span className=\"text-xs text-gray-500 ml-2\">({variable.description})</span>\n                      )}\n                    </Label>\n                    <Input\n                      id={variable.name}\n                      value={variables[variable.name] || \"\"}\n                      onChange={(e) => setVariables({ ...variables, [variable.name]: e.target.value })}\n                      placeholder={variable.defaultValue || `Enter ${variable.name}`}\n                    />\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle>Preview</CardTitle>\n            <CardDescription>What will be sent</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Subject:</p>\n                <p className=\"text-sm\">{processVariables(template.subject, variables)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"flex justify-between mt-6\">\n          <Link href=\"/admin/email-templates\">\n            <Button type=\"button\" variant=\"outline\">Back to Templates</Button>\n          </Link>\n          <Button type=\"submit\" disabled={sending}>\n            {sending ? \"Sending...\" : \"Send Test Email\"}\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nfunction processVariables(template: string, variables: Record<string, string>): string {\n  let processed = template;\n  Object.entries(variables).forEach(([key, value]) => {\n    const regex = new RegExp(`{{\\\\s*${key}\\\\s*}}`, 'g');\n    processed = processed.replace(regex, value);\n  });\n  return processed;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/email-templates/new/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":201,"column":102,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7372,7432],"text":"Plain text version for email clients that don&apos;t support HTML"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7372,7432],"text":"Plain text version for email clients that don&lsquo;t support HTML"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7372,7432],"text":"Plain text version for email clients that don&#39;t support HTML"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7372,7432],"text":"Plain text version for email clients that don&rsquo;t support HTML"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useRouter } from \"next/navigation\";\nimport { toast } from \"sonner\";\nimport Link from \"next/link\";\n\ninterface Variable {\n  name: string;\n  description: string;\n  defaultValue?: string;\n}\n\nexport default function NewEmailTemplatePage() {\n  const router = useRouter();\n  const [saving, setSaving] = useState(false);\n  const [formData, setFormData] = useState({\n    templateKey: \"\",\n    templateName: \"\",\n    description: \"\",\n    subject: \"\",\n    htmlContent: \"\",\n    textContent: \"\",\n    fromEmail: \"\",\n    fromName: \"\",\n  });\n  const [variables, setVariables] = useState<Variable[]>([]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSaving(true);\n\n    try {\n      // Clean up form data - convert empty strings to undefined for optional fields\n      const cleanedData = {\n        templateKey: formData.templateKey,\n        templateName: formData.templateName,\n        description: formData.description || undefined,\n        subject: formData.subject,\n        htmlContent: formData.htmlContent,\n        textContent: formData.textContent || undefined,\n        fromEmail: formData.fromEmail || undefined,\n        fromName: formData.fromName || undefined,\n        variables: variables.length > 0 ? variables.filter(v => v.name && v.description) : undefined,\n      };\n\n      const response = await fetch(\"/api/admin/email-templates\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(cleanedData),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to create template\");\n      }\n\n      toast.success(\"Email template created successfully\");\n      router.push(\"/admin/email-templates\");\n    } catch (error) {\n      toast.error(error instanceof Error ? error.message : \"Failed to create template\");\n      console.error(\"Error:\", error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const addVariable = () => {\n    setVariables([...variables, { name: \"\", description: \"\", defaultValue: \"\" }]);\n  };\n\n  const updateVariable = (index: number, field: keyof Variable, value: string) => {\n    const updated = [...variables];\n    updated[index] = { ...updated[index], [field]: value };\n    setVariables(updated);\n  };\n\n  const removeVariable = (index: number) => {\n    setVariables(variables.filter((_, i) => i !== index));\n  };\n\n  return (\n    <div className=\"container mx-auto py-8 max-w-4xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold\">Create Email Template</h1>\n        <p className=\"text-gray-600 mt-2\">Create a new email template for the platform</p>\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <Card>\n          <CardHeader>\n            <CardTitle>Template Details</CardTitle>\n            <CardDescription>Basic information about the email template</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"templateKey\">Template Key</Label>\n                <Input\n                  id=\"templateKey\"\n                  value={formData.templateKey}\n                  onChange={(e) => setFormData({ ...formData, templateKey: e.target.value })}\n                  placeholder=\"welcome_email\"\n                  required\n                  pattern=\"[a-z0-9_]+\"\n                  title=\"Lowercase letters, numbers, and underscores only\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">Unique identifier for the template</p>\n              </div>\n              <div>\n                <Label htmlFor=\"templateName\">Template Name</Label>\n                <Input\n                  id=\"templateName\"\n                  value={formData.templateName}\n                  onChange={(e) => setFormData({ ...formData, templateName: e.target.value })}\n                  placeholder=\"Welcome Email\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                placeholder=\"Email sent to new users when they sign up\"\n                rows={2}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"fromEmail\">From Email (Optional)</Label>\n                <Input\n                  id=\"fromEmail\"\n                  type=\"email\"\n                  value={formData.fromEmail}\n                  onChange={(e) => setFormData({ ...formData, fromEmail: e.target.value })}\n                  placeholder=\"noreply@example.com\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"fromName\">From Name (Optional)</Label>\n                <Input\n                  id=\"fromName\"\n                  value={formData.fromName}\n                  onChange={(e) => setFormData({ ...formData, fromName: e.target.value })}\n                  placeholder=\"IT Learning Platform\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle>Email Content</CardTitle>\n            <CardDescription>The subject and body of the email</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"subject\">Subject</Label>\n              <Input\n                id=\"subject\"\n                value={formData.subject}\n                onChange={(e) => setFormData({ ...formData, subject: e.target.value })}\n                placeholder=\"Welcome to IT Learning Platform, {{firstName}}!\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"htmlContent\">HTML Content</Label>\n              <Textarea\n                id=\"htmlContent\"\n                value={formData.htmlContent}\n                onChange={(e) => setFormData({ ...formData, htmlContent: e.target.value })}\n                placeholder=\"<h1>Welcome {{firstName}}!</h1><p>Thanks for joining...</p>\"\n                rows={10}\n                required\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">Use {\"{{variable}}\"} syntax for dynamic content</p>\n            </div>\n\n            <div>\n              <Label htmlFor=\"textContent\">Text Content (Optional)</Label>\n              <Textarea\n                id=\"textContent\"\n                value={formData.textContent}\n                onChange={(e) => setFormData({ ...formData, textContent: e.target.value })}\n                placeholder=\"Welcome {{firstName}}! Thanks for joining...\"\n                rows={6}\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">Plain text version for email clients that don't support HTML</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <CardTitle>Template Variables</CardTitle>\n                <CardDescription>Define variables that can be used in the template</CardDescription>\n              </div>\n              <Button type=\"button\" onClick={addVariable} size=\"sm\">\n                Add Variable\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {variables.map((variable, index) => (\n              <div key={index} className=\"flex gap-2 mb-2\">\n                <Input\n                  placeholder=\"Variable name\"\n                  value={variable.name}\n                  onChange={(e) => updateVariable(index, \"name\", e.target.value)}\n                />\n                <Input\n                  placeholder=\"Description\"\n                  value={variable.description}\n                  onChange={(e) => updateVariable(index, \"description\", e.target.value)}\n                />\n                <Input\n                  placeholder=\"Default value\"\n                  value={variable.defaultValue}\n                  onChange={(e) => updateVariable(index, \"defaultValue\", e.target.value)}\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={() => removeVariable(index)}\n                >\n                  Remove\n                </Button>\n              </div>\n            ))}\n            {variables.length === 0 && (\n              <p className=\"text-sm text-gray-500\">No variables defined</p>\n            )}\n          </CardContent>\n        </Card>\n\n        <div className=\"flex justify-between mt-6\">\n          <Link href=\"/admin/email-templates\">\n            <Button type=\"button\" variant=\"outline\">Cancel</Button>\n          </Link>\n          <Button type=\"submit\" disabled={saving}>\n            {saving ? \"Creating...\" : \"Create Template\"}\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/email-templates/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":28,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useRouter } from \"next/navigation\";\nimport { toast } from \"sonner\";\nimport Link from \"next/link\";\n\ninterface EmailTemplate {\n  templateId: string;\n  templateKey: string;\n  templateName: string;\n  description: string | null;\n  subject: string;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n  _count: {\n    emailLogs: number;\n  };\n}\n\nexport default function EmailTemplatesPage() {\n  const [templates, setTemplates] = useState<EmailTemplate[]>([]);\n  const [loading, setLoading] = useState(true);\n  const router = useRouter();\n\n  useEffect(() => {\n    fetchTemplates();\n  }, []);\n\n  const fetchTemplates = async () => {\n    try {\n      const response = await fetch(\"/api/admin/email-templates\");\n      if (!response.ok) throw new Error(\"Failed to fetch templates\");\n      const data = await response.json();\n      setTemplates(data);\n    } catch (error) {\n      toast.error(\"Failed to load email templates\");\n      console.error(\"Error:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDelete = async (templateId: string) => {\n    if (!confirm(\"Are you sure you want to delete this template?\")) return;\n\n    try {\n      const response = await fetch(`/api/admin/email-templates/${templateId}`, {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) throw new Error(\"Failed to delete template\");\n\n      toast.success(\"Template deleted successfully\");\n      fetchTemplates();\n    } catch (error) {\n      toast.error(\"Failed to delete template\");\n      console.error(\"Error:\", error);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <p>Loading templates...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8\">\n      <div className=\"flex justify-between items-center mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Email Templates</h1>\n          <p className=\"text-gray-600 mt-2\">Manage email templates for the platform</p>\n        </div>\n        <div className=\"space-x-4\">\n          <Link href=\"/admin/email-logs\">\n            <Button variant=\"outline\">View Email Logs</Button>\n          </Link>\n          <Link href=\"/admin/email-templates/new\">\n            <Button>Create Template</Button>\n          </Link>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {templates.map((template) => (\n          <Card key={template.templateId}>\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <CardTitle className=\"text-xl\">{template.templateName}</CardTitle>\n                  <CardDescription className=\"mt-1\">\n                    Key: <code className=\"text-sm bg-gray-100 px-2 py-1 rounded\">{template.templateKey}</code>\n                  </CardDescription>\n                  {template.description && (\n                    <p className=\"text-sm text-gray-600 mt-2\">{template.description}</p>\n                  )}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant={template.isActive ? \"default\" : \"secondary\"}>\n                    {template.isActive ? \"Active\" : \"Inactive\"}\n                  </Badge>\n                  <Badge variant=\"outline\">\n                    {template._count.emailLogs} sent\n                  </Badge>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"mb-4\">\n                <p className=\"text-sm text-gray-600\">Subject:</p>\n                <p className=\"font-medium\">{template.subject}</p>\n              </div>\n              <div className=\"flex gap-2\">\n                <Link href={`/admin/email-templates/${template.templateId}/edit`}>\n                  <Button size=\"sm\">Edit</Button>\n                </Link>\n                <Link href={`/admin/email-templates/${template.templateId}/test`}>\n                  <Button size=\"sm\" variant=\"outline\">Send Test</Button>\n                </Link>\n                <Button\n                  size=\"sm\"\n                  variant=\"destructive\"\n                  onClick={() => handleDelete(template.templateId)}\n                >\n                  Delete\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {templates.length === 0 && (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <p className=\"text-gray-600 mb-4\">No email templates found</p>\n            <Link href=\"/admin/email-templates/new\">\n              <Button>Create Your First Template</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/flagged/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchFlaggedContent'. Either include it or remove the dependency array.","line":36,"column":6,"nodeType":"ArrayExpression","endLine":36,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [fetchFlaggedContent, filter]","fix":{"range":[854,862],"text":"[fetchFlaggedContent, filter]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { format } from \"date-fns\";\nimport { Flag, Check, X, MessageSquare, FileText } from \"lucide-react\";\n\ninterface FlaggedItem {\n  id: string;\n  type: \"article\" | \"comment\";\n  content: string;\n  title?: string;\n  flaggedAt: string;\n  flagReason: string | null;\n  flaggedBy: {\n    username: string | null;\n    email: string;\n  };\n  author: {\n    username: string | null;\n    email: string;\n  };\n  articleInfo?: {\n    articleId: string;\n    articleTitle: string;\n    articleSlug: string;\n  };\n}\n\nexport default function AdminFlaggedPage() {\n  const [flaggedItems, setFlaggedItems] = useState<FlaggedItem[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState<\"all\" | \"articles\" | \"comments\">(\"all\");\n\n  useEffect(() => {\n    fetchFlaggedContent();\n  }, [filter]);\n\n  async function fetchFlaggedContent() {\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/admin/flagged?type=${filter}`);\n      if (!response.ok) throw new Error(\"Failed to fetch flagged content\");\n      \n      const data = await response.json();\n      setFlaggedItems(data.items);\n    } catch (error) {\n      console.error(\"Error fetching flagged content:\", error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleResolve(id: string, type: \"article\" | \"comment\", action: \"approve\" | \"remove\") {\n    try {\n      const response = await fetch(`/api/admin/flagged/${type}/${id}`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ action }),\n      });\n      \n      if (!response.ok) throw new Error(\"Failed to resolve flagged item\");\n      \n      await fetchFlaggedContent();\n    } catch (error) {\n      console.error(\"Error resolving flagged item:\", error);\n      alert(\"Failed to resolve flagged item\");\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Flagged Content</h1>\n        <p className=\"mt-2 text-gray-600\">\n          Review and moderate flagged articles and comments\n        </p>\n      </div>\n\n      <div className=\"mb-6\">\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => setFilter(\"all\")}\n            className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n              filter === \"all\"\n                ? \"bg-orange-600 text-white\"\n                : \"bg-gray-200 text-gray-700 hover:bg-gray-300\"\n            }`}\n          >\n            All Content\n          </button>\n          <button\n            onClick={() => setFilter(\"articles\")}\n            className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n              filter === \"articles\"\n                ? \"bg-orange-600 text-white\"\n                : \"bg-gray-200 text-gray-700 hover:bg-gray-300\"\n            }`}\n          >\n            Articles Only\n          </button>\n          <button\n            onClick={() => setFilter(\"comments\")}\n            className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n              filter === \"comments\"\n                ? \"bg-orange-600 text-white\"\n                : \"bg-gray-200 text-gray-700 hover:bg-gray-300\"\n            }`}\n          >\n            Comments Only\n          </button>\n        </div>\n      </div>\n\n      {loading ? (\n        <div className=\"text-center py-8\">Loading...</div>\n      ) : flaggedItems.length === 0 ? (\n        <div className=\"text-center py-8 text-gray-500\">\n          <Flag className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n          <p>No flagged content to review</p>\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {flaggedItems.map((item) => (\n            <div\n              key={item.id}\n              className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\"\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-3 mb-3\">\n                    {item.type === \"article\" ? (\n                      <FileText className=\"h-5 w-5 text-blue-600\" />\n                    ) : (\n                      <MessageSquare className=\"h-5 w-5 text-green-600\" />\n                    )}\n                    <span className=\"text-sm font-medium text-gray-500 uppercase\">\n                      {item.type}\n                    </span>\n                    <span className=\"text-sm text-gray-500\">\n                      Flagged {format(new Date(item.flaggedAt), \"MMM d, yyyy 'at' h:mm a\")}\n                    </span>\n                  </div>\n                  \n                  {item.type === \"article\" && item.title && (\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                      {item.title}\n                    </h3>\n                  )}\n                  \n                  {item.type === \"comment\" && item.articleInfo && (\n                    <div className=\"mb-2\">\n                      <span className=\"text-sm text-gray-500\">On article: </span>\n                      <a\n                        href={`/articles/${item.articleInfo.articleSlug}`}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-sm text-blue-600 hover:text-blue-800\"\n                      >\n                        {item.articleInfo.articleTitle}\n                      </a>\n                    </div>\n                  )}\n                  \n                  <div className=\"prose prose-sm max-w-none mb-4\">\n                    <p className=\"text-gray-700 line-clamp-3\">{item.content}</p>\n                  </div>\n                  \n                  {item.flagReason && (\n                    <div className=\"mb-4 p-3 bg-red-50 rounded-md\">\n                      <p className=\"text-sm text-red-800\">\n                        <span className=\"font-medium\">Flag reason:</span> {item.flagReason}\n                      </p>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex flex-wrap gap-4 text-sm text-gray-500\">\n                    <div>\n                      <span className=\"font-medium\">Author:</span>{\" \"}\n                      {item.author.username || item.author.email}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Flagged by:</span>{\" \"}\n                      {item.flaggedBy.username || item.flaggedBy.email}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex gap-2 ml-4\">\n                  <button\n                    onClick={() => handleResolve(item.id, item.type, \"approve\")}\n                    className=\"flex items-center gap-1 px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors\"\n                    title=\"Approve (Remove flag)\"\n                  >\n                    <Check className=\"h-4 w-4\" />\n                    <span>Approve</span>\n                  </button>\n                  <button\n                    onClick={() => handleResolve(item.id, item.type, \"remove\")}\n                    className=\"flex items-center gap-1 px-3 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors\"\n                    title=\"Remove content\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                    <span>Remove</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/pricing/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { DollarSign, Edit2, Save, X, Plus, Trash2 } from \"lucide-react\";\nimport { SubscriptionTier } from \"@prisma/client\";\n\ninterface PricingData {\n  pricingId: string;\n  tier: SubscriptionTier;\n  stripePriceId: string;\n  monthlyPriceCents: number;\n  yearlyPriceCents: number;\n  features: string[];\n  isActive: boolean;\n}\n\nexport default function AdminPricingPage() {\n  const [pricingData, setPricingData] = useState<PricingData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editForm, setEditForm] = useState<Partial<PricingData>>({});\n  const [isCreating, setIsCreating] = useState(false);\n  const [newForm, setNewForm] = useState<Partial<PricingData>>({\n    tier: SubscriptionTier.STANDARD,\n    stripePriceId: \"\",\n    monthlyPriceCents: 0,\n    yearlyPriceCents: 0,\n    features: [],\n    isActive: true,\n  });\n\n  useEffect(() => {\n    fetchPricing();\n  }, []);\n\n  async function fetchPricing() {\n    try {\n      setLoading(true);\n      const response = await fetch(\"/api/admin/pricing\");\n      if (!response.ok) throw new Error(\"Failed to fetch pricing\");\n      \n      const data = await response.json();\n      setPricingData(data.pricing);\n    } catch (error) {\n      console.error(\"Error fetching pricing:\", error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleSave(pricingId: string) {\n    try {\n      const response = await fetch(`/api/admin/pricing/${pricingId}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(editForm),\n      });\n      \n      if (!response.ok) throw new Error(\"Failed to update pricing\");\n      \n      setEditingId(null);\n      await fetchPricing();\n    } catch (error) {\n      console.error(\"Error updating pricing:\", error);\n      alert(\"Failed to update pricing\");\n    }\n  }\n\n  async function handleCreate() {\n    try {\n      const response = await fetch(\"/api/admin/pricing\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(newForm),\n      });\n      \n      if (!response.ok) throw new Error(\"Failed to create pricing\");\n      \n      setIsCreating(false);\n      setNewForm({\n        tier: SubscriptionTier.STANDARD,\n        stripePriceId: \"\",\n        monthlyPriceCents: 0,\n        yearlyPriceCents: 0,\n        features: [],\n        isActive: true,\n      });\n      await fetchPricing();\n    } catch (error) {\n      console.error(\"Error creating pricing:\", error);\n      alert(\"Failed to create pricing\");\n    }\n  }\n\n  async function handleDelete(pricingId: string) {\n    if (!confirm(\"Are you sure you want to delete this pricing tier?\")) return;\n    \n    try {\n      const response = await fetch(`/api/admin/pricing/${pricingId}`, {\n        method: \"DELETE\",\n      });\n      \n      if (!response.ok) throw new Error(\"Failed to delete pricing\");\n      \n      await fetchPricing();\n    } catch (error) {\n      console.error(\"Error deleting pricing:\", error);\n      alert(\"Failed to delete pricing\");\n    }\n  }\n\n  function formatPrice(cents: number): string {\n    return `$${(cents / 100).toFixed(2)}`;\n  }\n\n  return (\n    <div>\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Subscription Pricing</h1>\n          <p className=\"mt-2 text-gray-600\">\n            Manage subscription tiers and pricing\n          </p>\n        </div>\n        {!isCreating && (\n          <button\n            onClick={() => setIsCreating(true)}\n            className=\"flex items-center gap-2 px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors\"\n          >\n            <Plus className=\"h-5 w-5\" />\n            Add Tier\n          </button>\n        )}\n      </div>\n\n      {loading ? (\n        <div className=\"text-center py-8\">Loading...</div>\n      ) : (\n        <div className=\"space-y-6\">\n          {isCreating && (\n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">New Pricing Tier</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Tier\n                  </label>\n                  <select\n                    value={newForm.tier}\n                    onChange={(e) => setNewForm({ ...newForm, tier: e.target.value as SubscriptionTier })}\n                    className=\"w-full rounded-md border border-gray-300 px-3 py-2\"\n                  >\n                    <option value={SubscriptionTier.FREE}>FREE</option>\n                    <option value={SubscriptionTier.STANDARD}>STANDARD</option>\n                    <option value={SubscriptionTier.MAX}>MAX</option>\n                  </select>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Stripe Price ID\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={newForm.stripePriceId}\n                    onChange={(e) => setNewForm({ ...newForm, stripePriceId: e.target.value })}\n                    className=\"w-full rounded-md border border-gray-300 px-3 py-2\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Monthly Price (cents)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={newForm.monthlyPriceCents}\n                    onChange={(e) => setNewForm({ ...newForm, monthlyPriceCents: parseInt(e.target.value) })}\n                    className=\"w-full rounded-md border border-gray-300 px-3 py-2\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Yearly Price (cents)\n                  </label>\n                  <input\n                    type=\"number\"\n                    value={newForm.yearlyPriceCents}\n                    onChange={(e) => setNewForm({ ...newForm, yearlyPriceCents: parseInt(e.target.value) })}\n                    className=\"w-full rounded-md border border-gray-300 px-3 py-2\"\n                  />\n                </div>\n              </div>\n              <div className=\"mt-4\">\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Features (one per line)\n                </label>\n                <textarea\n                  value={newForm.features?.join(\"\\n\")}\n                  onChange={(e) => setNewForm({ ...newForm, features: e.target.value.split(\"\\n\").filter(f => f.trim()) })}\n                  className=\"w-full rounded-md border border-gray-300 px-3 py-2\"\n                  rows={4}\n                />\n              </div>\n              <div className=\"mt-4 flex justify-end gap-2\">\n                <button\n                  onClick={() => setIsCreating(false)}\n                  className=\"px-4 py-2 text-gray-700 hover:text-gray-900\"\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={handleCreate}\n                  className=\"px-4 py-2 bg-orange-600 text-white rounded-md hover:bg-orange-700\"\n                >\n                  Create\n                </button>\n              </div>\n            </div>\n          )}\n\n          {pricingData.map((pricing) => (\n            <div\n              key={pricing.pricingId}\n              className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\"\n            >\n              {editingId === pricing.pricingId ? (\n                <div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Stripe Price ID\n                      </label>\n                      <input\n                        type=\"text\"\n                        value={editForm.stripePriceId}\n                        onChange={(e) => setEditForm({ ...editForm, stripePriceId: e.target.value })}\n                        className=\"w-full rounded-md border border-gray-300 px-3 py-2\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Active\n                      </label>\n                      <select\n                        value={editForm.isActive ? \"true\" : \"false\"}\n                        onChange={(e) => setEditForm({ ...editForm, isActive: e.target.value === \"true\" })}\n                        className=\"w-full rounded-md border border-gray-300 px-3 py-2\"\n                      >\n                        <option value=\"true\">Active</option>\n                        <option value=\"false\">Inactive</option>\n                      </select>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Monthly Price (cents)\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={editForm.monthlyPriceCents}\n                        onChange={(e) => setEditForm({ ...editForm, monthlyPriceCents: parseInt(e.target.value) })}\n                        className=\"w-full rounded-md border border-gray-300 px-3 py-2\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Yearly Price (cents)\n                      </label>\n                      <input\n                        type=\"number\"\n                        value={editForm.yearlyPriceCents}\n                        onChange={(e) => setEditForm({ ...editForm, yearlyPriceCents: parseInt(e.target.value) })}\n                        className=\"w-full rounded-md border border-gray-300 px-3 py-2\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"mt-4\">\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Features (one per line)\n                    </label>\n                    <textarea\n                      value={editForm.features?.join(\"\\n\")}\n                      onChange={(e) => setEditForm({ ...editForm, features: e.target.value.split(\"\\n\").filter(f => f.trim()) })}\n                      className=\"w-full rounded-md border border-gray-300 px-3 py-2\"\n                      rows={4}\n                    />\n                  </div>\n                  <div className=\"mt-4 flex justify-end gap-2\">\n                    <button\n                      onClick={() => setEditingId(null)}\n                      className=\"px-4 py-2 text-gray-700 hover:text-gray-900\"\n                    >\n                      <X className=\"h-5 w-5\" />\n                    </button>\n                    <button\n                      onClick={() => handleSave(pricing.pricingId)}\n                      className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700\"\n                    >\n                      <Save className=\"h-5 w-5\" />\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <div>\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        <h3 className=\"text-xl font-semibold text-gray-900\">{pricing.tier}</h3>\n                        {!pricing.isActive && (\n                          <span className=\"px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full\">\n                            Inactive\n                          </span>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-gray-500 mb-4\">\n                        Stripe Price ID: {pricing.stripePriceId}\n                      </p>\n                      <div className=\"flex gap-6 mb-4\">\n                        <div>\n                          <p className=\"text-2xl font-bold text-gray-900\">\n                            {formatPrice(pricing.monthlyPriceCents)}\n                          </p>\n                          <p className=\"text-sm text-gray-500\">per month</p>\n                        </div>\n                        <div>\n                          <p className=\"text-2xl font-bold text-gray-900\">\n                            {formatPrice(pricing.yearlyPriceCents)}\n                          </p>\n                          <p className=\"text-sm text-gray-500\">per year</p>\n                        </div>\n                      </div>\n                      <ul className=\"space-y-2\">\n                        {pricing.features.map((feature, index) => (\n                          <li key={index} className=\"flex items-start gap-2\">\n                            <span className=\"text-green-600 mt-0.5\">✓</span>\n                            <span className=\"text-gray-700\">{feature}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <button\n                        onClick={() => {\n                          setEditingId(pricing.pricingId);\n                          setEditForm(pricing);\n                        }}\n                        className=\"p-2 text-blue-600 hover:text-blue-800\"\n                      >\n                        <Edit2 className=\"h-5 w-5\" />\n                      </button>\n                      <button\n                        onClick={() => handleDelete(pricing.pricingId)}\n                        className=\"p-2 text-red-600 hover:text-red-800\"\n                      >\n                        <Trash2 className=\"h-5 w-5\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/suggestions/settings/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/suggestions/settings/settings-form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/tags/[tagId]/articles/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchTagArticles'. Either include it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [fetchTagArticles, tagId]","fix":{"range":[1398,1405],"text":"[fetchTagArticles, tagId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { use } from 'react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Role } from '@prisma/client';\nimport { ArrowLeft, Search, Plus, X } from 'lucide-react';\nimport Link from 'next/link';\n\ninterface Tag {\n  tagId: string;\n  tagName: string;\n  description: string | null;\n  color: string | null;\n}\n\ninterface Article {\n  id: string;\n  title: string;\n  slug: string;\n  createdAt: string;\n  isContentGenerated: boolean;\n  category: {\n    categoryName: string;\n  } | null;\n  _count: {\n    likes: number;\n    comments: number;\n  };\n}\n\ninterface TagArticlesData {\n  tag: Tag;\n  articles: Article[];\n}\n\nexport default function TagArticlesPage({\n  params,\n}: {\n  params: Promise<{ tagId: string }>;\n}) {\n  const { tagId } = use(params);\n  const router = useRouter();\n  const { hasMinRole, isLoadingRole } = useAuth();\n  const [data, setData] = useState<TagArticlesData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showSearchModal, setShowSearchModal] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState<Article[]>([]);\n  const [searchLoading, setSearchLoading] = useState(false);\n\n  useEffect(() => {\n    fetchTagArticles();\n  }, [tagId]);\n\n  useEffect(() => {\n    if (!isLoadingRole && !hasMinRole(Role.ADMIN)) {\n      router.push('/dashboard');\n    }\n  }, [isLoadingRole, hasMinRole, router]);\n\n  const fetchTagArticles = async () => {\n    try {\n      const response = await fetch(`/api/admin/tags/${tagId}/articles`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch tag articles');\n      }\n      \n      const result = await response.json();\n      setData(result);\n    } catch (error) {\n      console.error('Error fetching tag articles:', error);\n      setError('Failed to fetch tag articles');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const searchArticles = async (term: string) => {\n    setSearchLoading(true);\n    try {\n      const searchParam = term ? `?search=${encodeURIComponent(term)}` : '';\n      const response = await fetch(`/api/admin/tags/${tagId}/search-articles${searchParam}`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to search articles');\n      }\n      \n      const results = await response.json();\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Error searching articles:', error);\n      setError('Failed to search articles');\n    } finally {\n      setSearchLoading(false);\n    }\n  };\n\n  const addTagToArticle = async (articleId: string) => {\n    try {\n      const response = await fetch(`/api/admin/tags/${tagId}/add-to-article`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ articleId }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to add tag to article');\n      }\n\n      // Refresh the tag articles and search results\n      await fetchTagArticles();\n      if (searchTerm) {\n        await searchArticles(searchTerm);\n      } else {\n        await searchArticles('');\n      }\n    } catch (error) {\n      console.error('Error adding tag to article:', error);\n      setError('Failed to add tag to article');\n    }\n  };\n\n  const handleSearchSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    searchArticles(searchTerm);\n  };\n\n  const openSearchModal = () => {\n    setShowSearchModal(true);\n    setSearchTerm('');\n    setSearchResults([]);\n    searchArticles(''); // Load all available articles\n  };\n\n  if (isLoadingRole) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!hasMinRole(Role.ADMIN)) {\n    return null;\n  }\n\n  if (loading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"text-lg\">Loading tag articles...</div>\n      </div>\n    );\n  }\n\n  if (!data) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-red-600\">Tag not found</p>\n        <Link href=\"/admin/tags\" className=\"mt-4 text-blue-600 hover:text-blue-800\">\n          Back to tags\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-4\">\n          <Link\n            href=\"/admin/tags\"\n            className=\"flex items-center text-gray-600 hover:text-gray-900\"\n          >\n            <ArrowLeft className=\"h-5 w-5 mr-2\" />\n            Back to Tags\n          </Link>\n          <div className=\"flex items-center space-x-2\">\n            {data.tag.color && (\n              <div\n                className=\"w-4 h-4 rounded-full\"\n                style={{ backgroundColor: data.tag.color }}\n              />\n            )}\n            <h1 className=\"text-3xl font-bold\">#{data.tag.tagName}</h1>\n          </div>\n        </div>\n        <button\n          onClick={openSearchModal}\n          className=\"flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors\"\n        >\n          <Plus className=\"h-4 w-4\" />\n          <span>Add Articles</span>\n        </button>\n      </div>\n\n      {data.tag.description && (\n        <p className=\"text-gray-600 mb-6\">{data.tag.description}</p>\n      )}\n\n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n          {error}\n        </div>\n      )}\n\n      {/* Articles List */}\n      <div className=\"bg-white shadow-md rounded-lg overflow-hidden\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-medium\">\n            Articles with this tag ({data.articles.length})\n          </h2>\n        </div>\n        \n        {data.articles.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            No articles found with this tag.\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {data.articles.map((article) => (\n              <div key={article.id} className=\"px-6 py-4 hover:bg-gray-50\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-1\">\n                      <Link\n                        href={`/articles/${article.slug}`}\n                        className=\"hover:text-blue-600\"\n                        target=\"_blank\"\n                      >\n                        {article.title}\n                      </Link>\n                    </h3>\n                    <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                      <span>{article.category?.categoryName || 'Uncategorized'}</span>\n                      <span>{new Date(article.createdAt).toLocaleDateString()}</span>\n                      <span>{article._count.likes} likes</span>\n                      <span>{article._count.comments} comments</span>\n                      <span className={`px-2 py-1 rounded-full text-xs ${\n                        article.isContentGenerated \n                          ? 'bg-green-100 text-green-800' \n                          : 'bg-yellow-100 text-yellow-800'\n                      }`}>\n                        {article.isContentGenerated ? 'Published' : 'Draft'}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Link\n                      href={`/admin/articles/${article.id}/edit`}\n                      className=\"text-indigo-600 hover:text-indigo-900 text-sm\"\n                    >\n                      Edit\n                    </Link>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Search Modal */}\n      {showSearchModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-4xl max-h-[80vh] overflow-hidden\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-xl font-semibold\">\n                Add Articles to #{data.tag.tagName}\n              </h2>\n              <button\n                onClick={() => setShowSearchModal(false)}\n                className=\"text-gray-400 hover:text-gray-600\"\n              >\n                <X className=\"h-6 w-6\" />\n              </button>\n            </div>\n\n            <form onSubmit={handleSearchSubmit} className=\"mb-4\">\n              <div className=\"flex space-x-2\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search articles...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  />\n                </div>\n                <button\n                  type=\"submit\"\n                  disabled={searchLoading}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors disabled:opacity-50\"\n                >\n                  {searchLoading ? 'Searching...' : 'Search'}\n                </button>\n              </div>\n            </form>\n\n            <div className=\"overflow-y-auto max-h-96 border border-gray-200 rounded-md\">\n              {searchResults.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  {searchLoading ? 'Searching...' : 'No articles found without this tag.'}\n                </div>\n              ) : (\n                <div className=\"divide-y divide-gray-200\">\n                  {searchResults.map((article) => (\n                    <div key={article.id} className=\"px-4 py-3 hover:bg-gray-50\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-gray-900\">{article.title}</h4>\n                          <div className=\"flex items-center space-x-3 text-sm text-gray-500 mt-1\">\n                            <span>{article.category?.categoryName || 'Uncategorized'}</span>\n                            <span>{new Date(article.createdAt).toLocaleDateString()}</span>\n                          </div>\n                        </div>\n                        <button\n                          onClick={() => addTagToArticle(article.id)}\n                          className=\"bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm transition-colors\"\n                        >\n                          Add Tag\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/tags/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchTags'. Either include it or remove the dependency array.","line":57,"column":6,"nodeType":"ArrayExpression","endLine":57,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [fetchTags, searchTerm]","fix":{"range":[1542,1554],"text":"[fetchTags, searchTerm]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Role } from '@prisma/client';\n\ninterface Tag {\n  tagId: string;\n  tagName: string;\n  description: string | null;\n  color: string | null;\n  createdAt: string;\n  updatedAt: string;\n  _count: {\n    articles: number;\n  };\n}\n\nexport default function AdminTagsPage() {\n  const router = useRouter();\n  const { hasMinRole, isLoadingRole } = useAuth();\n  const [tags, setTags] = useState<Tag[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [editingTag, setEditingTag] = useState<Tag | null>(null);\n  const [formData, setFormData] = useState({\n    tagName: '',\n    description: '',\n    color: ''\n  });\n\n  const fetchTags = async () => {\n    try {\n      const searchParam = searchTerm ? `?search=${encodeURIComponent(searchTerm)}` : '';\n      const response = await fetch(`/api/admin/tags${searchParam}`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch tags');\n      }\n      \n      const data = await response.json();\n      setTags(data);\n    } catch (error) {\n      console.error('Error fetching tags:', error);\n      setError('Failed to fetch tags');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchTags();\n  }, [searchTerm]);\n\n  useEffect(() => {\n    if (!isLoadingRole && !hasMinRole(Role.ADMIN)) {\n      router.push('/dashboard');\n    }\n  }, [isLoadingRole, hasMinRole, router]);\n\n  const handleCreateTag = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n\n    try {\n      const response = await fetch('/api/admin/tags', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to create tag');\n      }\n\n      await fetchTags();\n      setShowCreateForm(false);\n      setFormData({ tagName: '', description: '', color: '' });\n    } catch (error) {\n      console.error('Error creating tag:', error);\n      setError(error instanceof Error ? error.message : 'Failed to create tag');\n    }\n  };\n\n  const handleUpdateTag = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingTag) return;\n    \n    setError(null);\n\n    try {\n      const response = await fetch(`/api/admin/tags/${editingTag.tagId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to update tag');\n      }\n\n      await fetchTags();\n      setEditingTag(null);\n      setFormData({ tagName: '', description: '', color: '' });\n    } catch (error) {\n      console.error('Error updating tag:', error);\n      setError(error instanceof Error ? error.message : 'Failed to update tag');\n    }\n  };\n\n  const handleDeleteTag = async (tagId: string, tagName: string) => {\n    if (!confirm(`Are you sure you want to delete the tag \"${tagName}\"? This will remove it from all articles.`)) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/admin/tags/${tagId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to delete tag');\n      }\n\n      await fetchTags();\n    } catch (error) {\n      console.error('Error deleting tag:', error);\n      setError(error instanceof Error ? error.message : 'Failed to delete tag');\n    }\n  };\n\n  const startEdit = (tag: Tag) => {\n    setEditingTag(tag);\n    setFormData({\n      tagName: tag.tagName,\n      description: tag.description || '',\n      color: tag.color || ''\n    });\n    setShowCreateForm(false);\n  };\n\n  const cancelEdit = () => {\n    setEditingTag(null);\n    setShowCreateForm(false);\n    setFormData({ tagName: '', description: '', color: '' });\n  };\n\n  if (isLoadingRole) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!hasMinRole(Role.ADMIN)) {\n    return null;\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-3xl font-bold\">Tag Management</h1>\n        <button\n          onClick={() => {\n            setShowCreateForm(true);\n            setEditingTag(null);\n            setFormData({ tagName: '', description: '', color: '' });\n          }}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors\"\n        >\n          Create New Tag\n        </button>\n      </div>\n\n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n          {error}\n        </div>\n      )}\n\n      {/* Search */}\n      <div className=\"mb-6\">\n        <input\n          type=\"text\"\n          placeholder=\"Search tags...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n        />\n      </div>\n\n      {/* Create/Edit Form */}\n      {(showCreateForm || editingTag) && (\n        <div className=\"bg-gray-50 p-6 rounded-lg mb-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">\n            {editingTag ? 'Edit Tag' : 'Create New Tag'}\n          </h2>\n          <form onSubmit={editingTag ? handleUpdateTag : handleCreateTag} className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"tagName\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Tag Name *\n              </label>\n              <input\n                type=\"text\"\n                id=\"tagName\"\n                value={formData.tagName}\n                onChange={(e) => setFormData({ ...formData, tagName: e.target.value })}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              />\n            </div>\n            <div>\n              <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Description\n              </label>\n              <textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                rows={3}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"color\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Color (Hex)\n              </label>\n              <input\n                type=\"color\"\n                id=\"color\"\n                value={formData.color || '#3B82F6'}\n                onChange={(e) => setFormData({ ...formData, color: e.target.value })}\n                className=\"w-20 h-10 border border-gray-300 rounded-md\"\n              />\n            </div>\n            <div className=\"flex space-x-3\">\n              <button\n                type=\"submit\"\n                className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors\"\n              >\n                {editingTag ? 'Update Tag' : 'Create Tag'}\n              </button>\n              <button\n                type=\"button\"\n                onClick={cancelEdit}\n                className=\"bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-md transition-colors\"\n              >\n                Cancel\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n\n      {/* Tags List */}\n      {loading ? (\n        <div className=\"text-center py-8\">\n          <div className=\"text-lg\">Loading tags...</div>\n        </div>\n      ) : (\n        <div className=\"bg-white shadow-md rounded-lg overflow-hidden\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Tag\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Description\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Articles\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Created\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {tags.map((tag) => (\n                <tr key={tag.tagId}>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      {tag.color && (\n                        <div\n                          className=\"w-4 h-4 rounded-full mr-3\"\n                          style={{ backgroundColor: tag.color }}\n                        />\n                      )}\n                      <div className=\"text-sm font-medium text-gray-900\">{tag.tagName}</div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <div className=\"text-sm text-gray-900 max-w-xs truncate\">\n                      {tag.description || '-'}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-900\">{tag._count.articles}</div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-900\">\n                      {new Date(tag.createdAt).toLocaleDateString()}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                    <Link\n                      href={`/admin/tags/${tag.tagId}/articles`}\n                      className=\"text-blue-600 hover:text-blue-900 mr-4\"\n                    >\n                      View Articles\n                    </Link>\n                    <button\n                      onClick={() => startEdit(tag)}\n                      className=\"text-indigo-600 hover:text-indigo-900 mr-4\"\n                    >\n                      Edit\n                    </button>\n                    <button\n                      onClick={() => handleDeleteTag(tag.tagId, tag.tagName)}\n                      className=\"text-red-600 hover:text-red-900\"\n                    >\n                      Delete\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          \n          {tags.length === 0 && !loading && (\n            <div className=\"text-center py-8 text-gray-500\">\n              {searchTerm ? 'No tags found matching your search.' : 'No tags created yet.'}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/admin/users/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchUsers' and 'hasMinRole'. Either include them or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [page, search, isLoadingRole, hasMinRole, fetchUsers]","fix":{"range":[1533,1562],"text":"[page, search, isLoadingRole, hasMinRole, fetchUsers]"}}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":198,"column":25,"nodeType":"JSXOpeningElement","endLine":202,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Role } from \"@prisma/client\";\nimport { Search, Shield, Edit2, Users } from \"lucide-react\";\nimport { useRouter } from \"next/navigation\";\n\ntype User = {\n  clerkUserId: string;\n  email: string;\n  username: string | null;\n  firstName: string | null;\n  lastName: string | null;\n  imageUrl: string | null;\n  role: Role;\n  subscriptionTier: string;\n  subscriptionStatus: string;\n  appSpecificCreatedAt: string;\n  lastLoginToApp: string | null;\n};\n\nexport default function AdminUsersPage() {\n  const { userRole, isLoadingRole, hasMinRole } = useAuth();\n  const router = useRouter();\n  const [users, setUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [search, setSearch] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [editingUserId, setEditingUserId] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    console.log(\"AdminUsersPage - isLoadingRole:\", isLoadingRole);\n    console.log(\"AdminUsersPage - userRole:\", userRole);\n    console.log(\"AdminUsersPage - hasMinRole(ADMIN):\", hasMinRole(Role.ADMIN));\n    \n    if (!isLoadingRole && !hasMinRole(Role.ADMIN)) {\n      router.push(\"/dashboard\");\n    }\n  }, [userRole, isLoadingRole, hasMinRole, router]);\n\n  useEffect(() => {\n    if (!isLoadingRole && hasMinRole(Role.ADMIN)) {\n      fetchUsers();\n    }\n  }, [page, search, isLoadingRole]);\n\n  const fetchUsers = async () => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: \"20\",\n        ...(search && { search }),\n      });\n\n      const response = await fetch(`/api/admin/users?${params}`);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `Failed to fetch users: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setUsers(data.users);\n      setTotalPages(data.pagination.totalPages);\n      setError(null);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      setError(error instanceof Error ? error.message : \"Failed to fetch users\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateUserRole = async (userId: string, newRole: Role) => {\n    try {\n      const response = await fetch(`/api/admin/users/${userId}/role`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ role: newRole }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        alert(error.error || \"Failed to update role\");\n        return;\n      }\n\n      // Update local state\n      setUsers(users.map(user =>\n        user.clerkUserId === userId ? { ...user, role: newRole } : user\n      ));\n      setEditingUserId(null);\n    } catch (error) {\n      console.error(\"Error updating role:\", error);\n      alert(\"Failed to update role\");\n    }\n  };\n\n  const getRoleBadgeColor = (role: Role) => {\n    switch (role) {\n      case Role.ADMIN:\n        return \"bg-red-100 text-red-800\";\n      case Role.MODERATOR:\n        return \"bg-purple-100 text-purple-800\";\n      case Role.EDITOR:\n        return \"bg-blue-100 text-blue-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  if (isLoadingRole || !hasMinRole(Role.ADMIN)) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 flex items-center gap-2\">\n          <Shield className=\"h-8 w-8 text-blue-600\" />\n          User Management\n        </h1>\n        <p className=\"mt-2 text-gray-600\">\n          Manage user roles and permissions\n        </p>\n      </div>\n\n      <div className=\"mb-6\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search by email, username, or name...\"\n            value={search}\n            onChange={(e) => {\n              setSearch(e.target.value);\n              setPage(1);\n            }}\n            className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"mb-4 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\n          Error: {error}\n        </div>\n      )}\n\n      {loading ? (\n        <div className=\"flex justify-center py-12\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        </div>\n      ) : error ? (\n        <div className=\"text-center py-8\">\n          <button\n            onClick={() => fetchUsers()}\n            className=\"text-blue-600 hover:text-blue-800\"\n          >\n            Try again\n          </button>\n        </div>\n      ) : (\n        <div className=\"bg-white shadow-sm rounded-lg overflow-hidden\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  User\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Role\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Subscription\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Joined\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Last Login\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {users.map((user) => (\n                <tr key={user.clerkUserId} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      {user.imageUrl ? (\n                        <img\n                          className=\"h-10 w-10 rounded-full\"\n                          src={user.imageUrl}\n                          alt=\"\"\n                        />\n                      ) : (\n                        <div className=\"h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center\">\n                          <Users className=\"h-5 w-5 text-gray-500\" />\n                        </div>\n                      )}\n                      <div className=\"ml-4\">\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {user.firstName || user.lastName\n                            ? `${user.firstName || \"\"} ${user.lastName || \"\"}`\n                            : user.username || \"No name\"}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">{user.email}</div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {editingUserId === user.clerkUserId ? (\n                      <select\n                        value={user.role}\n                        onChange={(e) => updateUserRole(user.clerkUserId, e.target.value as Role)}\n                        onBlur={() => setEditingUserId(null)}\n                        className=\"text-sm border border-gray-300 rounded px-2 py-1 focus:ring-2 focus:ring-blue-500\"\n                        autoFocus\n                      >\n                        {Object.values(Role).map((role) => (\n                          <option key={role} value={role}>\n                            {role}\n                          </option>\n                        ))}\n                      </select>\n                    ) : (\n                      <div className=\"flex items-center gap-2\">\n                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getRoleBadgeColor(user.role)}`}>\n                          {user.role}\n                        </span>\n                        <button\n                          onClick={() => setEditingUserId(user.clerkUserId)}\n                          className=\"text-gray-400 hover:text-gray-600\"\n                        >\n                          <Edit2 className=\"h-4 w-4\" />\n                        </button>\n                      </div>\n                    )}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    <div>\n                      <div className=\"font-medium\">{user.subscriptionTier}</div>\n                      <div className=\"text-gray-500 text-xs\">{user.subscriptionStatus}</div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {new Date(user.appSpecificCreatedAt).toLocaleDateString()}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {user.lastLoginToApp\n                      ? new Date(user.lastLoginToApp).toLocaleDateString()\n                      : \"Never\"}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n\n          {totalPages > 1 && (\n            <div className=\"bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6\">\n              <div className=\"flex-1 flex justify-between sm:hidden\">\n                <button\n                  onClick={() => setPage(Math.max(1, page - 1))}\n                  disabled={page === 1}\n                  className=\"relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50\"\n                >\n                  Previous\n                </button>\n                <button\n                  onClick={() => setPage(Math.min(totalPages, page + 1))}\n                  disabled={page === totalPages}\n                  className=\"ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50\"\n                >\n                  Next\n                </button>\n              </div>\n              <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-700\">\n                    Page <span className=\"font-medium\">{page}</span> of{\" \"}\n                    <span className=\"font-medium\">{totalPages}</span>\n                  </p>\n                </div>\n                <div>\n                  <nav className=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\">\n                    <button\n                      onClick={() => setPage(Math.max(1, page - 1))}\n                      disabled={page === 1}\n                      className=\"relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50\"\n                    >\n                      Previous\n                    </button>\n                    <button\n                      onClick={() => setPage(Math.min(totalPages, page + 1))}\n                      disabled={page === totalPages}\n                      className=\"relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50\"\n                    >\n                      Next\n                    </button>\n                  </nav>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/ai-interaction-types/[typeId]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[787,790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[787,790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from \"next/server\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { prisma } from \"@/lib/prisma\";\nimport { Role } from \"@prisma/client\";\n\nexport async function PUT(\n  request: Request,\n  { params }: { params: Promise<{ typeId: string }> }\n) {\n  const { typeId } = await params;\n  \n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json(\n        { error: \"Unauthorized\" },\n        { status: 401 }\n      );\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { clerkUserId: userId },\n    });\n\n    if (!user || user.role !== Role.ADMIN) {\n      return NextResponse.json(\n        { error: \"Forbidden\" },\n        { status: 403 }\n      );\n    }\n\n    const body = await request.json();\n    const updateData: any = {};\n\n    // Only update provided fields\n    if (body.displayName !== undefined) updateData.displayName = body.displayName;\n    if (body.description !== undefined) updateData.description = body.description;\n    if (body.defaultModelId !== undefined) updateData.defaultModelId = body.defaultModelId;\n\n    const interactionType = await prisma.aIInteractionType.update({\n      where: { typeId },\n      data: updateData,\n      include: {\n        defaultModel: {\n          select: {\n            modelId: true,\n            displayName: true,\n            provider: true,\n            isActive: true\n          }\n        }\n      }\n    });\n\n    return NextResponse.json(interactionType);\n  } catch (error) {\n    console.error(\"Error updating AI interaction type:\", error);\n    return NextResponse.json(\n      { error: \"Failed to update AI interaction type\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: Request,\n  { params }: { params: Promise<{ typeId: string }> }\n) {\n  const { typeId } = await params;\n  \n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json(\n        { error: \"Unauthorized\" },\n        { status: 401 }\n      );\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { clerkUserId: userId },\n    });\n\n    if (!user || user.role !== Role.ADMIN) {\n      return NextResponse.json(\n        { error: \"Forbidden\" },\n        { status: 403 }\n      );\n    }\n\n    // Check if this interaction type has any interactions\n    const usageCount = await prisma.aIInteraction.count({\n      where: { interactionTypeId: typeId }\n    });\n\n    if (usageCount > 0) {\n      return NextResponse.json(\n        { error: \"Cannot delete interaction type with existing interactions\" },\n        { status: 400 }\n      );\n    }\n\n    await prisma.aIInteractionType.delete({\n      where: { typeId }\n    });\n\n    return NextResponse.json({ message: \"Interaction type deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting AI interaction type:\", error);\n    return NextResponse.json(\n      { error: \"Failed to delete AI interaction type\" },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/ai-interaction-types/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/ai-models/[modelId]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[835,838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[835,838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from \"next/server\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { prisma } from \"@/lib/prisma\";\nimport { Role } from \"@prisma/client\";\nimport { aiService } from \"@/lib/ai-service\";\n\nexport async function PUT(\n  request: Request,\n  { params }: { params: Promise<{ modelId: string }> }\n) {\n  const { modelId } = await params;\n  \n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json(\n        { error: \"Unauthorized\" },\n        { status: 401 }\n      );\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { clerkUserId: userId },\n    });\n\n    if (!user || user.role !== Role.ADMIN) {\n      return NextResponse.json(\n        { error: \"Forbidden\" },\n        { status: 403 }\n      );\n    }\n\n    const body = await request.json();\n    const updateData: any = {};\n\n    // Only update provided fields\n    if (body.displayName !== undefined) updateData.displayName = body.displayName;\n    if (body.description !== undefined) updateData.description = body.description;\n    if (body.inputTokenCostPer1M !== undefined) updateData.inputTokenCostPer1M = parseFloat(body.inputTokenCostPer1M);\n    if (body.outputTokenCostPer1M !== undefined) updateData.outputTokenCostPer1M = parseFloat(body.outputTokenCostPer1M);\n    if (body.maxTokens !== undefined) updateData.maxTokens = body.maxTokens ? parseInt(body.maxTokens) : null;\n    if (body.isActive !== undefined) updateData.isActive = body.isActive;\n    if (body.isDefault !== undefined) updateData.isDefault = body.isDefault;\n    if (body.apiKey !== undefined) updateData.apiKey = body.apiKey; // Will be encrypted in aiService\n\n    // If setting as default, unset other defaults\n    if (body.isDefault) {\n      await prisma.aIModel.updateMany({\n        where: { \n          modelId: { not: modelId },\n          isDefault: true \n        },\n        data: { isDefault: false }\n      });\n    }\n\n    const model = await aiService.updateModel(modelId, updateData);\n\n    return NextResponse.json(model);\n  } catch (error) {\n    console.error(\"Error updating AI model:\", error);\n    return NextResponse.json(\n      { error: \"Failed to update AI model\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: Request,\n  { params }: { params: Promise<{ modelId: string }> }\n) {\n  const { modelId } = await params;\n  \n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json(\n        { error: \"Unauthorized\" },\n        { status: 401 }\n      );\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { clerkUserId: userId },\n    });\n\n    if (!user || user.role !== Role.ADMIN) {\n      return NextResponse.json(\n        { error: \"Forbidden\" },\n        { status: 403 }\n      );\n    }\n\n    // Check if this model is being used by any interaction types\n    const usageCount = await prisma.aIInteractionType.count({\n      where: { defaultModelId: modelId }\n    });\n\n    if (usageCount > 0) {\n      return NextResponse.json(\n        { error: \"Cannot delete model that is assigned to interaction types\" },\n        { status: 400 }\n      );\n    }\n\n    await aiService.deleteModel(modelId);\n\n    return NextResponse.json({ message: \"Model deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting AI model:\", error);\n    return NextResponse.json(\n      { error: \"Failed to delete AI model\" },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/ai-models/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/ai-reports/by-interaction/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/ai-reports/by-model/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/ai-reports/by-user/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/ai-reports/totals/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/articles/[articleId]/changes/[changeId]/rollback/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/articles/[articleId]/changes/[changeId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/articles/[articleId]/changes/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1276,1279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1276,1279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\nimport { prisma } from '@/lib/prisma';\nimport { hasRole } from '@/lib/auth';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ articleId: string }> }\n) {\n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Get user and check admin role\n    const user = await prisma.user.findUnique({\n      where: { clerkUserId: userId },\n      select: { role: true }\n    });\n    \n    if (!user) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n    \n    const isAdmin = hasRole(user.role, ['ADMIN', 'MODERATOR']);\n    if (!isAdmin) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    // Await params in Next.js 15\n    const { articleId } = await params;\n\n    // Get search params\n    const searchParams = request.nextUrl.searchParams;\n    const includeInactive = searchParams.get('includeInactive') === 'true';\n    const limit = parseInt(searchParams.get('limit') || '20');\n    const offset = parseInt(searchParams.get('offset') || '0');\n\n    // Build where clause\n    const where: any = { articleId };\n    if (!includeInactive) {\n      where.isActive = true;\n    }\n\n    // Get changes with pagination\n    const [changes, total] = await Promise.all([\n      prisma.articleChangeHistory.findMany({\n        where,\n        orderBy: { createdAt: 'desc' },\n        take: limit,\n        skip: offset,\n        include: {\n          user: {\n            select: {\n              clerkUserId: true,\n              email: true,\n              firstName: true,\n              lastName: true,\n              imageUrl: true,\n            },\n          },\n          suggestion: {\n            select: {\n              suggestionId: true,\n              suggestionType: true,\n              suggestionDetails: true,\n              isApproved: true,\n              processedAt: true,\n            },\n          },\n          rollbackUser: {\n            select: {\n              clerkUserId: true,\n              email: true,\n              firstName: true,\n              lastName: true,\n            },\n          },\n        },\n      }),\n      prisma.articleChangeHistory.count({ where }),\n    ]);\n\n    return NextResponse.json({\n      changes,\n      pagination: {\n        total,\n        limit,\n        offset,\n        hasMore: offset + limit < total,\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching article changes:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch article changes' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/articles/[articleId]/flag/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/articles/[articleId]/move/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/articles/[articleId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/articles/[articleId]/tags/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/articles/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[547,550],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[547,550],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\nimport { requireMinRole } from \"@/lib/auth\";\nimport { Role } from \"@prisma/client\";\nimport prisma from \"@/lib/prisma\";\n\nexport async function GET(request: NextRequest) {\n  try {\n    await requireMinRole(Role.EDITOR);\n    \n    const searchParams = request.nextUrl.searchParams;\n    const page = parseInt(searchParams.get(\"page\") || \"1\");\n    const limit = 20;\n    const search = searchParams.get(\"search\") || \"\";\n    const filter = searchParams.get(\"filter\") || \"all\";\n    \n    const where: any = {};\n    \n    if (search) {\n      where.OR = [\n        { articleTitle: { contains: search, mode: \"insensitive\" } },\n        { articleSlug: { contains: search, mode: \"insensitive\" } },\n      ];\n    }\n    \n    if (filter === \"flagged\") {\n      where.isFlagged = true;\n    } else if (filter === \"generated\") {\n      where.isContentGenerated = true;\n    }\n    \n    const [articles, totalCount] = await Promise.all([\n      prisma.article.findMany({\n        where,\n        skip: (page - 1) * limit,\n        take: limit,\n        include: {\n          categories: {\n            include: {\n              category: {\n                select: { categoryName: true },\n              },\n            },\n          },\n          _count: {\n            select: {\n              likes: true,\n              comments: true,\n            },\n          },\n        },\n        orderBy: { updatedAt: \"desc\" },\n      }),\n      prisma.article.count({ where }),\n    ]);\n    \n    return NextResponse.json({\n      articles,\n      totalPages: Math.ceil(totalCount / limit),\n      currentPage: page,\n      totalCount,\n    });\n  } catch (error) {\n    console.error(\"Error fetching articles:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch articles\" },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/articles/search/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/categories/[categoryId]/articles/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/categories/[categoryId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/categories/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":6,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\nimport prisma from '@/lib/prisma';\nimport { Role } from '@prisma/client';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { clerkUserId: userId },\n    });\n\n    if (!user || user.role !== Role.ADMIN) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const categories = await prisma.category.findMany({\n      include: {\n        _count: {\n          select: { articles: true },\n        },\n      },\n      orderBy: { categoryName: 'asc' },\n    });\n\n    return NextResponse.json(categories);\n  } catch (error) {\n    console.error('Error fetching categories:', error);\n    return NextResponse.json(\n      { error: 'Internal Server Error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { clerkUserId: userId },\n    });\n\n    if (!user || user.role !== Role.ADMIN) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { categoryName, description } = await request.json();\n\n    if (!categoryName || !categoryName.trim()) {\n      return NextResponse.json(\n        { error: 'Category name is required' },\n        { status: 400 }\n      );\n    }\n\n    const existingCategory = await prisma.category.findFirst({\n      where: { categoryName: categoryName.trim() },\n    });\n\n    if (existingCategory) {\n      return NextResponse.json(\n        { error: 'Category with this name already exists' },\n        { status: 400 }\n      );\n    }\n\n    const category = await prisma.category.create({\n      data: {\n        categoryName: categoryName.trim(),\n        description: description?.trim() || null,\n      },\n      include: {\n        _count: {\n          select: { articles: true },\n        },\n      },\n    });\n\n    return NextResponse.json(category);\n  } catch (error) {\n    console.error('Error creating category:', error);\n    return NextResponse.json(\n      { error: 'Internal Server Error' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/changes/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1396,1399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1396,1399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\nimport { prisma } from '@/lib/prisma';\nimport { hasRole } from '@/lib/auth';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { userId } = await auth();\n    console.log('Admin changes API - userId:', userId);\n    \n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Get user and check admin role\n    const user = await prisma.user.findUnique({\n      where: { clerkUserId: userId },\n      select: { role: true }\n    });\n    \n    if (!user) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n    \n    const isAdmin = hasRole(user.role, ['ADMIN', 'MODERATOR']);\n    console.log('Admin changes API - user role:', user.role, 'isAdmin:', isAdmin);\n    \n    if (!isAdmin) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    // Get search params\n    const searchParams = request.nextUrl.searchParams;\n    const includeInactive = searchParams.get('includeInactive') === 'true';\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const offset = parseInt(searchParams.get('offset') || '0');\n    const changeType = searchParams.get('changeType');\n    const userIdFilter = searchParams.get('userId');\n\n    // Build where clause\n    const where: any = {};\n    if (!includeInactive) {\n      where.isActive = true;\n    }\n    if (changeType) {\n      where.changeType = changeType;\n    }\n    if (userIdFilter) {\n      where.clerkUserId = userIdFilter;\n    }\n\n    console.log('Admin changes API - where clause:', where);\n    console.log('Admin changes API - limit/offset:', limit, offset);\n\n    // Get changes with pagination\n    const [changes, total] = await Promise.all([\n      prisma.articleChangeHistory.findMany({\n        where,\n        orderBy: { createdAt: 'desc' },\n        take: limit,\n        skip: offset,\n        include: {\n          article: {\n            select: {\n              articleId: true,\n              articleTitle: true,\n              articleSlug: true,\n            },\n          },\n          user: {\n            select: {\n              clerkUserId: true,\n              email: true,\n              firstName: true,\n              lastName: true,\n              imageUrl: true,\n            },\n          },\n          suggestion: {\n            select: {\n              suggestionId: true,\n              suggestionType: true,\n              suggestionDetails: true,\n              isApproved: true,\n            },\n          },\n          rollbackUser: {\n            select: {\n              clerkUserId: true,\n              email: true,\n              firstName: true,\n              lastName: true,\n            },\n          },\n        },\n      }),\n      prisma.articleChangeHistory.count({ where }),\n    ]);\n\n    console.log('Admin changes API - found changes:', changes.length, 'total:', total);\n\n    // Get summary statistics\n    const stats = await prisma.articleChangeHistory.groupBy({\n      by: ['changeType'],\n      _count: {\n        id: true,\n      },\n      where: where.isActive !== undefined ? { isActive: where.isActive } : {},\n    });\n\n    return NextResponse.json({\n      changes,\n      stats: stats.reduce((acc, stat) => {\n        acc[stat.changeType] = stat._count.id;\n        return acc;\n      }, {} as Record<string, number>),\n      pagination: {\n        total,\n        limit,\n        offset,\n        hasMore: offset + limit < total,\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching changes:', error);\n    \n    // Provide more detailed error information\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    const errorDetails = {\n      error: 'Failed to fetch changes',\n      message: errorMessage,\n      stack: error instanceof Error ? error.stack : undefined,\n    };\n    \n    return NextResponse.json(errorDetails, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/email-logs/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1031,1034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1031,1034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { prisma } from \"@/lib/prisma\";\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { clerkUserId: userId },\n      select: { role: true },\n    });\n\n    if (!user || (user.role !== \"ADMIN\" && user.role !== \"MODERATOR\")) {\n      return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n    }\n\n    const searchParams = request.nextUrl.searchParams;\n    const page = parseInt(searchParams.get(\"page\") || \"1\");\n    const limit = parseInt(searchParams.get(\"limit\") || \"20\");\n    const status = searchParams.get(\"status\") || undefined;\n    const templateId = searchParams.get(\"templateId\") || undefined;\n    const to = searchParams.get(\"to\") || undefined;\n\n    const skip = (page - 1) * limit;\n\n    const where: any = {};\n    if (status) where.status = status;\n    if (templateId) where.templateId = templateId;\n    if (to) where.to = { contains: to, mode: \"insensitive\" };\n\n    const [logs, total] = await Promise.all([\n      prisma.emailLog.findMany({\n        where,\n        orderBy: { sentAt: \"desc\" },\n        skip,\n        take: limit,\n        include: {\n          template: {\n            select: {\n              templateName: true,\n              templateKey: true,\n            },\n          },\n        },\n      }),\n      prisma.emailLog.count({ where }),\n    ]);\n\n    return NextResponse.json({\n      logs,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit),\n      },\n    });\n  } catch (error) {\n    console.error(\"Error fetching email logs:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch email logs\" },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/email-templates/[templateId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/email-templates/[templateId]/test/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/email-templates/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/flagged/article/[articleId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/flagged/comment/[commentId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/flagged/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[411,414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[411,414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\nimport { requireMinRole } from \"@/lib/auth\";\nimport { Role } from \"@prisma/client\";\nimport prisma from \"@/lib/prisma\";\n\nexport async function GET(request: NextRequest) {\n  try {\n    await requireMinRole(Role.MODERATOR);\n    \n    const searchParams = request.nextUrl.searchParams;\n    const type = searchParams.get(\"type\") || \"all\";\n    \n    const items: any[] = [];\n    \n    if (type === \"all\" || type === \"articles\") {\n      const flaggedArticles = await prisma.article.findMany({\n        where: { isFlagged: true },\n        include: {\n          createdBy: {\n            select: { username: true, email: true },\n          },\n          flaggedBy: {\n            select: { username: true, email: true },\n          },\n        },\n        orderBy: { flaggedAt: \"desc\" },\n      });\n      \n      items.push(...flaggedArticles.map(article => ({\n        id: article.articleId,\n        type: \"article\" as const,\n        content: article.contentHtml?.substring(0, 300) || \"\",\n        title: article.articleTitle,\n        flaggedAt: article.flaggedAt,\n        flagReason: article.flagReason,\n        flaggedBy: article.flaggedBy || { username: null, email: \"Unknown\" },\n        author: article.createdBy || { username: null, email: \"Unknown\" },\n      })));\n    }\n    \n    if (type === \"all\" || type === \"comments\") {\n      const flaggedComments = await prisma.comment.findMany({\n        where: { isFlagged: true },\n        include: {\n          user: {\n            select: { username: true, email: true },\n          },\n          flaggedBy: {\n            select: { username: true, email: true },\n          },\n          article: {\n            select: {\n              articleId: true,\n              articleTitle: true,\n              articleSlug: true,\n            },\n          },\n        },\n        orderBy: { flaggedAt: \"desc\" },\n      });\n      \n      items.push(...flaggedComments.map(comment => ({\n        id: comment.commentId,\n        type: \"comment\" as const,\n        content: comment.content,\n        flaggedAt: comment.flaggedAt,\n        flagReason: comment.flagReason,\n        flaggedBy: comment.flaggedBy || { username: null, email: \"Unknown\" },\n        author: comment.user,\n        articleInfo: comment.article,\n      })));\n    }\n    \n    // Sort by flaggedAt date\n    items.sort((a, b) => {\n      const dateA = a.flaggedAt ? new Date(a.flaggedAt).getTime() : 0;\n      const dateB = b.flaggedAt ? new Date(b.flaggedAt).getTime() : 0;\n      return dateB - dateA;\n    });\n    \n    return NextResponse.json({ items });\n  } catch (error) {\n    console.error(\"Error fetching flagged content:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch flagged content\" },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/pricing/[pricingId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/pricing/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/suggestions/settings/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/tags/[tagId]/add-to-article/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/tags/[tagId]/articles/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/tags/[tagId]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'use' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\nimport { prisma } from '@/lib/prisma';\nimport { Role } from '@prisma/client';\nimport { use } from 'react';\n\n// GET /api/admin/tags/[tagId]\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ tagId: string }> }\n) {\n  try {\n    const { tagId } = await params;\n    const { userId } = await auth();\n    \n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { clerkUserId: userId },\n    });\n\n    if (!user || user.role !== Role.ADMIN) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const tag = await prisma.tag.findUnique({\n      where: { tagId },\n      include: {\n        _count: {\n          select: {\n            articles: true\n          }\n        }\n      }\n    });\n\n    if (!tag) {\n      return NextResponse.json({ error: 'Tag not found' }, { status: 404 });\n    }\n\n    return NextResponse.json(tag);\n  } catch (error) {\n    console.error('Error fetching tag:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n\n// PUT /api/admin/tags/[tagId]\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ tagId: string }> }\n) {\n  try {\n    const { tagId } = await params;\n    const { userId } = await auth();\n    \n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { clerkUserId: userId },\n    });\n\n    if (!user || user.role !== Role.ADMIN) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    const { tagName, description, color } = await request.json();\n\n    if (!tagName || !tagName.trim()) {\n      return NextResponse.json({ error: 'Tag name is required' }, { status: 400 });\n    }\n\n    const tag = await prisma.tag.update({\n      where: { tagId },\n      data: {\n        tagName: tagName.trim(),\n        description: description?.trim() || null,\n        color: color?.trim() || null,\n      },\n      include: {\n        _count: {\n          select: {\n            articles: true\n          }\n        }\n      }\n    });\n\n    return NextResponse.json(tag);\n  } catch (error) {\n    if (error instanceof Error && error.message.includes('Unique constraint failed')) {\n      return NextResponse.json({ error: 'Tag name already exists' }, { status: 400 });\n    }\n    if (error instanceof Error && error.message.includes('Record to update not found')) {\n      return NextResponse.json({ error: 'Tag not found' }, { status: 404 });\n    }\n    console.error('Error updating tag:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n\n// DELETE /api/admin/tags/[tagId]\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ tagId: string }> }\n) {\n  try {\n    const { tagId } = await params;\n    const { userId } = await auth();\n    \n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { clerkUserId: userId },\n    });\n\n    if (!user || user.role !== Role.ADMIN) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n\n    // Check if tag exists and get article count\n    const tag = await prisma.tag.findUnique({\n      where: { tagId },\n      include: {\n        _count: {\n          select: {\n            articles: true\n          }\n        }\n      }\n    });\n\n    if (!tag) {\n      return NextResponse.json({ error: 'Tag not found' }, { status: 404 });\n    }\n\n    // Delete the tag (this will cascade and delete ArticleTag entries)\n    await prisma.tag.delete({\n      where: { tagId }\n    });\n\n    return NextResponse.json({ \n      message: 'Tag deleted successfully',\n      articlesAffected: tag._count.articles\n    });\n  } catch (error) {\n    if (error instanceof Error && error.message.includes('Record to delete does not exist')) {\n      return NextResponse.json({ error: 'Tag not found' }, { status: 404 });\n    }\n    console.error('Error deleting tag:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/tags/[tagId]/search-articles/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/tags/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/users/[userId]/role/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAuthUser' is defined but never used.","line":2,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\nimport { requireMinRole, getAuthUser } from \"@/lib/auth\";\nimport { prisma } from \"@/lib/prisma\";\nimport { Role } from \"@prisma/client\";\n\nexport async function PATCH(\n  req: NextRequest,\n  { params }: { params: Promise<{ userId: string }> }\n) {\n  try {\n    const authUser = await requireMinRole(Role.ADMIN);\n    const { userId } = await params;\n    const { role } = await req.json();\n\n    // Validate role\n    if (!Object.values(Role).includes(role)) {\n      return NextResponse.json(\n        { error: \"Invalid role\" },\n        { status: 400 }\n      );\n    }\n\n    // Prevent self-demotion\n    if (authUser.clerkUserId === userId && role !== Role.ADMIN) {\n      return NextResponse.json(\n        { error: \"Cannot change your own role from admin\" },\n        { status: 400 }\n      );\n    }\n\n    // Update user role\n    const updatedUser = await prisma.user.update({\n      where: { clerkUserId: userId },\n      data: { role },\n      select: {\n        clerkUserId: true,\n        email: true,\n        role: true,\n      },\n    });\n\n    return NextResponse.json({\n      message: \"Role updated successfully\",\n      user: updatedUser,\n    });\n  } catch (error) {\n    console.error(\"Error updating user role:\", error);\n    if (error instanceof Error) {\n      if (error.message.includes(\"Forbidden\")) {\n        return NextResponse.json(\n          { error: \"Forbidden: Admin access required\" },\n          { status: 403 }\n        );\n      }\n      if (error.message.includes(\"Record to update not found\")) {\n        return NextResponse.json(\n          { error: \"User not found\" },\n          { status: 404 }\n        );\n      }\n    }\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/admin/users/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/article-groups/[groupId]/articles/[articleId]/scroll/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/article-groups/[groupId]/articles/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1332,1335],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1332,1335],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\nimport { getAuth } from \"@clerk/nextjs/server\";\nimport { prisma } from \"@/lib/prisma\";\n\nexport async function POST(\n  req: NextRequest,\n  { params }: { params: Promise<{ groupId: string }> }\n) {\n  const { userId } = await getAuth(req);\n  const { groupId } = await params;\n  \n  if (!userId) {\n    return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n  }\n\n  try {\n    const { articleId } = await req.json();\n\n    if (!articleId || typeof articleId !== \"string\") {\n      return NextResponse.json(\n        { error: \"Invalid article ID\" },\n        { status: 400 }\n      );\n    }\n\n    const group = await prisma.articleGroup.findFirst({\n      where: {\n        groupId,\n        clerkUserId: userId,\n      },\n    });\n\n    if (!group) {\n      return NextResponse.json(\n        { error: \"Group not found\" },\n        { status: 404 }\n      );\n    }\n\n    const article = await prisma.article.findUnique({\n      where: { articleId },\n    });\n\n    if (!article) {\n      return NextResponse.json(\n        { error: \"Article not found\" },\n        { status: 404 }\n      );\n    }\n\n    const groupArticle = await prisma.articleGroupArticle.create({\n      data: {\n        groupId,\n        articleId,\n      },\n    });\n\n    return NextResponse.json(groupArticle);\n  } catch (error: any) {\n    if (error?.code === \"P2002\") {\n      return NextResponse.json(\n        { error: \"Article already in group\" },\n        { status: 409 }\n      );\n    }\n    \n    console.error(\"Error adding article to group:\", error);\n    return NextResponse.json(\n      { error: \"Failed to add article to group\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  req: NextRequest,\n  { params }: { params: Promise<{ groupId: string }> }\n) {\n  const { userId } = await getAuth(req);\n  const { groupId } = await params;\n  const { searchParams } = new URL(req.url);\n  const articleId = searchParams.get(\"articleId\");\n  \n  if (!userId) {\n    return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n  }\n\n  if (!articleId) {\n    return NextResponse.json(\n      { error: \"Article ID required\" },\n      { status: 400 }\n    );\n  }\n\n  try {\n    const group = await prisma.articleGroup.findFirst({\n      where: {\n        groupId,\n        clerkUserId: userId,\n      },\n    });\n\n    if (!group) {\n      return NextResponse.json(\n        { error: \"Group not found\" },\n        { status: 404 }\n      );\n    }\n\n    await prisma.articleGroupArticle.deleteMany({\n      where: {\n        groupId,\n        articleId,\n      },\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(\"Error removing article from group:\", error);\n    return NextResponse.json(\n      { error: \"Failed to remove article from group\" },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/article-groups/[groupId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/article-groups/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/articles/[articleId]/changes/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/articles/[articleId]/chat/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":156,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4194,4197],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4194,4197],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":158,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4268,4271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4268,4271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":171,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4641,4644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4641,4644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\nimport { prisma } from '@/lib/prisma';\nimport { checkSubscription } from '@/lib/subscription-check';\nimport { generateText } from 'ai';\nimport { createProviderForModel, getModelForInteraction, trackAIInteraction } from '@/lib/ai-service';\n\nexport async function GET(\n  req: NextRequest,\n  { params }: { params: Promise<{ articleId: string }> }\n) {\n  const { userId } = await auth();\n  const { articleId } = await params;\n\n  if (!userId) {\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n\n  try {\n    const messages = await prisma.chatMessage.findMany({\n      where: {\n        articleId,\n        clerkUserId: userId,\n      },\n      orderBy: {\n        createdAt: 'asc',\n      },\n    });\n\n    return NextResponse.json(messages);\n  } catch (error) {\n    console.error('Error fetching chat messages:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch chat messages' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(\n  req: NextRequest,\n  { params }: { params: Promise<{ articleId: string }> }\n) {\n  const { userId } = await auth();\n  const { articleId } = await params;\n\n  if (!userId) {\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n\n  // Check subscription\n  const subscription = await checkSubscription(userId);\n  \n  if (!subscription.permissions.canUseAIChat) {\n    return NextResponse.json(\n      { error: 'AI chat requires a Standard or Max subscription' },\n      { status: 403 }\n    );\n  }\n\n  // Check daily limit for Standard tier\n  if (subscription.permissions.dailyAIChatsLimit > 0) {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const todayChatsCount = await prisma.chatMessage.count({\n      where: {\n        clerkUserId: userId,\n        role: 'USER',\n        createdAt: {\n          gte: today,\n        },\n      },\n    });\n\n    if (todayChatsCount >= subscription.permissions.dailyAIChatsLimit) {\n      return NextResponse.json(\n        { error: `Daily chat limit reached (${subscription.permissions.dailyAIChatsLimit} per day). Upgrade to Max for unlimited chats.` },\n        { status: 429 }\n      );\n    }\n  }\n\n  try {\n    const { content, exampleId } = await req.json();\n\n    if (!content || typeof content !== 'string') {\n      return NextResponse.json(\n        { error: 'Content is required' },\n        { status: 400 }\n      );\n    }\n\n    // Fetch the article with related data\n    const article = await prisma.article.findUnique({\n      where: { articleId },\n      include: {\n        categories: {\n          include: {\n            category: true\n          }\n        },\n        stream: {\n          include: {\n            channel: true\n          }\n        },\n        interactiveExamples: true,\n      },\n    });\n\n    if (!article) {\n      return NextResponse.json({ error: 'Article not found' }, { status: 404 });\n    }\n\n    // Create the user message\n    const userMessage = await prisma.chatMessage.create({\n      data: {\n        articleId,\n        clerkUserId: userId,\n        role: 'USER',\n        content,\n        exampleId,\n      },\n    });\n\n    // Get previous chat history for context (last 10 messages)\n    const previousMessages = await prisma.chatMessage.findMany({\n      where: {\n        articleId,\n        clerkUserId: userId,\n      },\n      orderBy: {\n        createdAt: 'asc',\n      },\n      take: 10,\n    });\n\n    // Build context for AI\n    let context = `Article Title: ${article.articleTitle}\\n\\n`;\n    \n    if (article.contentHtml) {\n      // Strip HTML tags for AI context\n      const textContent = article.contentHtml.replace(/<[^>]*>/g, '');\n      context += `Article Content:\\n${textContent.substring(0, 3000)}...\\n\\n`;\n    }\n\n    // If asking about a specific quiz question\n    if (exampleId) {\n      const example = article.interactiveExamples.find(e => e.exampleId === exampleId);\n      if (example) {\n        context += `\\nUser is asking about this quiz question:\\n`;\n        context += `Question: ${example.scenarioOrQuestionText}\\n`;\n        \n        if (example.optionsJson) {\n          const options = example.optionsJson as any[];\n          context += `Options:\\n`;\n          options.forEach((opt: any) => {\n            context += `- ${opt.text}\\n`;\n          });\n        }\n        \n        context += `\\nCorrect Answer Explanation: ${example.correctAnswerDescription}\\n`;\n        if (example.aiMarkingPromptHint) {\n          context += `Additional Context: ${example.aiMarkingPromptHint}\\n`;\n        }\n      }\n    }\n\n    // Build messages for OpenAI\n    const messages: any[] = [\n      {\n        role: 'system',\n        content: `You are an AI tutor helping a student understand an IT/Linux learning article. \nYour role is to:\n1. Answer questions about the article content clearly and concisely\n2. Help explain quiz questions and guide students to understand the correct answers\n3. Provide additional context and examples when helpful\n4. Never directly give away quiz answers - instead guide the student to understand the concept\n5. Be encouraging and supportive\n\nContext about the article:\n${context}`,\n      },\n    ];\n\n    // Add previous conversation history (excluding the just-created user message)\n    previousMessages.slice(0, -1).forEach(msg => {\n      messages.push({\n        role: msg.role.toLowerCase(),\n        content: msg.content,\n      });\n    });\n\n    // Add current user message\n    messages.push({\n      role: 'user',\n      content,\n    });\n\n    // Get AI response using new tracking system\n    const startTime = new Date();\n    let aiResponseContent;\n    \n    try {\n      const { model, interactionType } = await getModelForInteraction('chat');\n      const aiModel = await createProviderForModel(model.modelId);\n      \n      // Convert messages to the format needed by generateText\n      const systemMessage = messages.find(m => m.role === 'system');\n      const conversationMessages = messages.filter(m => m.role !== 'system');\n      \n      const result = await generateText({\n        model: aiModel,\n        system: systemMessage?.content,\n        messages: conversationMessages.map(m => ({\n          role: m.role as 'user' | 'assistant',\n          content: m.content\n        })),\n        temperature: 0.7,\n        maxTokens: 500,\n      });\n      \n      aiResponseContent = result.text;\n      const endTime = new Date();\n      \n      // Track the interaction\n      await trackAIInteraction(\n        model.modelId,\n        interactionType.typeId,\n        userId,\n        result.usage?.promptTokens || 0,\n        result.usage?.completionTokens || 0,\n        startTime,\n        endTime,\n        { articleId, exampleId, messageCount: messages.length },\n        content, // User's question\n        aiResponseContent\n      );\n      \n    } catch (error) {\n      console.error('AI chat error:', error);\n      aiResponseContent = 'I apologize, but I was unable to generate a response.';\n      \n      const endTime = new Date();\n      try {\n        const { model, interactionType } = await getModelForInteraction('chat');\n        await trackAIInteraction(\n          model.modelId,\n          interactionType.typeId,\n          userId,\n          0,\n          0,\n          startTime,\n          endTime,\n          { articleId, exampleId, error: true },\n          content,\n          undefined,\n          String(error)\n        );\n      } catch (trackingError) {\n        console.error('Failed to track error:', trackingError);\n      }\n    }\n\n    // Create the assistant message\n    const assistantMessage = await prisma.chatMessage.create({\n      data: {\n        articleId,\n        clerkUserId: userId,\n        role: 'ASSISTANT',\n        content: aiResponseContent,\n        exampleId,\n      },\n    });\n\n    return NextResponse.json({\n      userMessage,\n      assistantMessage,\n    });\n  } catch (error) {\n    console.error('Error creating chat message:', error);\n    return NextResponse.json(\n      { error: 'Failed to create chat message' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/articles/[articleId]/comments/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/articles/[articleId]/examples/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ExampleGenerationResponse' is defined but never used.","line":4,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":51}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from \"next/server\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { prisma } from \"@/lib/prisma\";\nimport { aiService, type ExampleGenerationResponse } from \"@/lib/ai-service\";\n\nexport async function GET(\n  request: Request,\n  { params }: { params: Promise<{ articleId: string }> }\n) {\n  const { articleId } = await params;\n  try {\n    const examples = await prisma.interactiveExample.findMany({\n      where: { articleId },\n      orderBy: { createdAt: 'asc' }\n    });\n\n    return NextResponse.json(examples);\n  } catch (error) {\n    console.error(\"Error fetching examples:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch examples\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(\n  request: Request,\n  { params }: { params: Promise<{ articleId: string }> }\n) {\n  const { articleId } = await params;\n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json(\n        { error: \"Unauthorized\" },\n        { status: 401 }\n      );\n    }\n\n    const article = await prisma.article.findUnique({\n      where: { articleId },\n      include: { \n        categories: {\n          include: {\n            category: true\n          }\n        }\n      }\n    });\n\n    if (!article) {\n      return NextResponse.json(\n        { error: \"Article not found\" },\n        { status: 404 }\n      );\n    }\n\n    // Get existing examples to ensure variety\n    const existingExamples = await prisma.interactiveExample.findMany({\n      where: { articleId },\n      select: { scenarioOrQuestionText: true }\n    });\n\n    const existingQuestions = existingExamples.map(e => e.scenarioOrQuestionText);\n\n    // Generate examples using AI service\n    console.log('Generating examples with AI...');\n    \n    // Get the first category name (articles can have multiple categories)\n    const categoryName = article.categories[0]?.category.categoryName || 'General';\n    \n    const response = await aiService.generateInteractiveExamples(\n      article.articleTitle,\n      categoryName,\n      existingQuestions,\n      userId\n    );\n\n    // Save generated examples\n    const createdExamples = [];\n    for (const example of response.examples || []) {\n      // Validate and format options for multiple choice questions\n      let formattedOptions = undefined;\n      if (example.question_type === 'multiple_choice' && example.options_json) {\n        // Ensure options have the correct format\n        formattedOptions = example.options_json.map((opt, index) => {\n          if (typeof opt === 'string') {\n            // If options are strings, convert to proper format\n            return { id: String.fromCharCode(97 + index), text: opt };\n          }\n          // Ensure id and text exist\n          return {\n            id: opt.id || String.fromCharCode(97 + index),\n            text: opt.text || 'Option ' + (index + 1)\n          };\n        });\n      }\n\n      const created = await prisma.interactiveExample.create({\n        data: {\n          articleId,\n          questionType: example.question_type.toUpperCase().replace(' ', '_') as \"MULTIPLE_CHOICE\" | \"TEXT_INPUT\" | \"COMMAND_LINE\",\n          scenarioOrQuestionText: example.scenario_or_question_text,\n          optionsJson: formattedOptions,\n          correctAnswerDescription: example.correct_answer_description,\n          aiMarkingPromptHint: example.ai_marking_prompt_hint\n        }\n      });\n      createdExamples.push(created);\n    }\n\n    return NextResponse.json({\n      message: \"Examples generated successfully\",\n      examples: createdExamples\n    });\n\n  } catch (error) {\n    console.error(\"Error generating examples:\", error);\n    return NextResponse.json(\n      { error: \"Failed to generate examples\" },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/articles/[articleId]/flag/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/articles/[articleId]/generate/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":109,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'updatedArticle' is assigned a value but never used.","line":127,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":25}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from \"next/server\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { prisma } from \"@/lib/prisma\";\nimport { aiService } from \"@/lib/ai-service\";\nimport { checkSubscription } from \"@/lib/subscription-check\";\n\nexport async function POST(\n  request: Request,\n  { params }: { params: Promise<{ articleId: string }> }\n) {\n  const { articleId } = await params;\n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json(\n        { error: \"Unauthorized\" },\n        { status: 401 }\n      );\n    }\n\n    // Check subscription status\n    const subscription = await checkSubscription(userId);\n    \n    if (!subscription.permissions.canGenerateContent) {\n      return NextResponse.json(\n        { error: \"Subscription required\", message: \"Please subscribe to generate article content\" },\n        { status: 403 }\n      );\n    }\n\n    const article = await prisma.article.findUnique({\n      where: { articleId },\n      include: { \n        categories: {\n          include: {\n            category: true\n          }\n        }\n      }\n    });\n\n    if (!article) {\n      return NextResponse.json(\n        { error: \"Article not found\" },\n        { status: 404 }\n      );\n    }\n\n    if (article.isContentGenerated && article.contentHtml) {\n      return NextResponse.json({\n        message: \"Content already generated\",\n        article\n      });\n    }\n\n    // Find primary category or use first category\n    const primaryCategory = article.categories.find(ac => ac.isPrimary)?.category \n      || article.categories[0]?.category;\n    \n    if (!primaryCategory) {\n      return NextResponse.json(\n        { error: \"Article has no categories\" },\n        { status: 400 }\n      );\n    }\n    \n    // Generate content using AI service\n    console.log('Generating content with AI...');\n    \n    const result = await aiService.generateArticleContent(\n      article.articleTitle,\n      primaryCategory.categoryName,\n      userId\n    );\n\n    const generatedContent = result.content;\n\n    // Get existing tags for AI selection\n    const existingTags = await prisma.tag.findMany({\n      select: {\n        tagId: true,\n        tagName: true,\n        description: true\n      },\n      orderBy: { tagName: 'asc' }\n    });\n\n    // Generate tag suggestions using AI\n    console.log('Generating tag suggestions...');\n    const tagSelection = await aiService.selectAndCreateTags(\n      article.articleTitle,\n      primaryCategory.categoryName,\n      existingTags,\n      userId\n    );\n\n    // Create new tags first\n    const createdTags = [];\n    for (const newTag of tagSelection.new_tags) {\n      try {\n        const tag = await prisma.tag.create({\n          data: {\n            tagName: newTag.tagName,\n            description: newTag.description || null,\n            color: newTag.color || null,\n          }\n        });\n        createdTags.push(tag);\n      } catch (error) {\n        // If tag already exists, find it\n        const existingTag = await prisma.tag.findUnique({\n          where: { tagName: newTag.tagName }\n        });\n        if (existingTag) {\n          createdTags.push(existingTag);\n        }\n      }\n    }\n\n    // Collect all tag IDs to assign to the article\n    const allTagIds = [\n      ...tagSelection.existing_tags, // Selected existing tag IDs\n      ...createdTags.map(tag => tag.tagId) // New tag IDs\n    ];\n\n    // Update the article with generated content and tags\n    const updatedArticle = await prisma.article.update({\n      where: { articleId },\n      data: {\n        contentHtml: generatedContent,\n        isContentGenerated: true,\n        updatedAt: new Date()\n      },\n      include: { \n        categories: {\n          include: {\n            category: true\n          }\n        },\n        tags: {\n          include: {\n            tag: true\n          }\n        }\n      }\n    });\n\n    // Create article-tag relationships\n    for (const tagId of allTagIds) {\n      await prisma.articleTag.create({\n        data: {\n          articleId: article.articleId,\n          tagId: tagId\n        }\n      }).catch(() => {}); // Ignore duplicates\n    }\n\n    // Fetch the final article with tags to return\n    const finalArticle = await prisma.article.findUnique({\n      where: { articleId },\n      include: { \n        categories: {\n          include: {\n            category: true\n          }\n        },\n        tags: {\n          include: {\n            tag: true\n          }\n        }\n      }\n    });\n\n    return NextResponse.json({\n      message: \"Content generated successfully\",\n      article: finalArticle,\n      tagsCreated: createdTags.length,\n      tagsAssigned: allTagIds.length\n    });\n\n  } catch (error) {\n    console.error(\"Error generating content:\", error);\n    return NextResponse.json(\n      { error: \"Failed to generate content\" },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/articles/[articleId]/like/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/articles/[articleId]/lists/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/articles/[articleId]/suggest/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/articles/[articleId]/view/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'view' is assigned a value but never used.","line":37,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { auth } from \"@clerk/nextjs/server\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@/lib/prisma\";\n\nexport async function POST(\n  request: NextRequest,\n  context: { params: Promise<{ articleId: string }> }\n) {\n  try {\n    const { userId } = await auth();\n    const { articleId } = await context.params;\n\n    if (!userId) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    // Check if article exists\n    const article = await prisma.article.findUnique({\n      where: { articleId }\n    });\n\n    if (!article) {\n      return NextResponse.json({ error: \"Article not found\" }, { status: 404 });\n    }\n\n    // Ensure user exists in the database first\n    const user = await prisma.user.findUnique({\n      where: { clerkUserId: userId }\n    });\n\n    if (!user) {\n      console.error(`User not found in database: ${userId}`);\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n    }\n\n    // Upsert the article view - update viewedAt if user has already viewed this article\n    const view = await prisma.userArticleView.upsert({\n      where: {\n        clerkUserId_articleId: {\n          clerkUserId: userId,\n          articleId: articleId\n        }\n      },\n      update: {\n        viewedAt: new Date()\n      },\n      create: {\n        clerkUserId: userId,\n        articleId: articleId\n      }\n    });\n\n    console.log(`Article view tracked: User ${userId} viewed article ${articleId}`);\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(\"Article view tracking error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to track article view\" },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/articles/liked/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/articles/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[467,470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[467,470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from \"next/server\";\nimport { currentUser } from \"@clerk/nextjs/server\";\nimport { prisma } from \"@/lib/prisma\";\nimport { slugify } from \"@/lib/utils\";\n\nexport async function GET(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const categoryId = searchParams.get('categoryId');\n    const isContentGenerated = searchParams.get('isContentGenerated');\n    const slug = searchParams.get('slug');\n\n    const where: any = {};\n    \n    if (slug) {\n      where.articleSlug = slug;\n    }\n    \n    if (categoryId) {\n      where.categories = {\n        some: {\n          categoryId: categoryId\n        }\n      };\n    }\n    \n    if (isContentGenerated !== null) {\n      where.isContentGenerated = isContentGenerated === 'true';\n    }\n\n    const articles = await prisma.article.findMany({\n      where,\n      include: {\n        categories: {\n          include: {\n            category: true\n          }\n        },\n        createdBy: true,\n      },\n      orderBy: { createdAt: 'desc' }\n    });\n\n    return NextResponse.json(articles);\n  } catch (error) {\n    console.error(\"Error fetching articles:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch articles\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const user = await currentUser();\n    const userId = user?.id;\n    const body = await request.json();\n    const { categoryIds, primaryCategoryId, articleTitle, contentHtml } = body;\n\n    if (!categoryIds || categoryIds.length === 0 || !articleTitle) {\n      return NextResponse.json(\n        { error: \"At least one category ID and article title are required\" },\n        { status: 400 }\n      );\n    }\n\n    const articleSlug = slugify(articleTitle);\n\n    const existingArticle = await prisma.article.findUnique({\n      where: { articleSlug }\n    });\n\n    if (existingArticle) {\n      return NextResponse.json(\n        { error: \"Article with this title already exists\" },\n        { status: 409 }\n      );\n    }\n\n    const article = await prisma.article.create({\n      data: {\n        articleTitle,\n        articleSlug,\n        contentHtml,\n        isContentGenerated: !!contentHtml,\n        createdByClerkUserId: userId || null,\n      }\n    });\n    \n    // Create article-category relationships\n    for (const categoryId of categoryIds) {\n      await prisma.articleCategory.create({\n        data: {\n          articleId: article.articleId,\n          categoryId: categoryId,\n          isPrimary: categoryId === (primaryCategoryId || categoryIds[0])\n        }\n      });\n    }\n    \n    // Fetch complete article with categories\n    const completeArticle = await prisma.article.findUnique({\n      where: { articleId: article.articleId },\n      include: {\n        categories: {\n          include: {\n            category: true\n          }\n        },\n        createdBy: true,\n      }\n    });\n\n    return NextResponse.json(completeArticle, { status: 201 });\n  } catch (error) {\n    console.error(\"Error creating article:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create article\" },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/categories/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/comments/[commentId]/flag/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/comments/[commentId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/dashboard/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/examples/[exampleId]/submit/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MarkingResponse' is defined but never used.","line":4,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":41}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from \"next/server\";\nimport { auth } from \"@clerk/nextjs/server\";\nimport { prisma } from \"@/lib/prisma\";\nimport { aiService, type MarkingResponse } from \"@/lib/ai-service\";\n\nexport async function POST(\n  request: Request,\n  { params }: { params: Promise<{ exampleId: string }> }\n) {\n  const { exampleId } = await params;\n  try {\n    const { userId } = await auth();\n    if (!userId) {\n      return NextResponse.json(\n        { error: \"Unauthorized\" },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json();\n    const { userAnswer } = body;\n\n    if (!userAnswer || userAnswer.trim().length === 0) {\n      return NextResponse.json(\n        { error: \"Answer is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Get the example with its correct answer\n    const example = await prisma.interactiveExample.findUnique({\n      where: { exampleId }\n    });\n\n    if (!example) {\n      return NextResponse.json(\n        { error: \"Example not found\" },\n        { status: 404 }\n      );\n    }\n\n    // For multiple choice, we'll use AI to determine correctness\n    // The correct answer handling will be done by the AI marking system\n\n    // Use AI service to mark the answer\n    console.log('Marking answer with AI...');\n    \n    const markingResult = await aiService.markUserAnswer(\n      example.scenarioOrQuestionText,\n      userAnswer,\n      example.questionType,\n      example.aiMarkingPromptHint || undefined,\n      userId\n    );\n\n    // Save the user's response\n    const userResponse = await prisma.userResponse.create({\n      data: {\n        clerkUserId: userId,\n        exampleId,\n        userAnswerText: userAnswer,\n        isCorrect: markingResult.is_correct,\n        aiFeedback: markingResult.feedback\n      }\n    });\n\n    return NextResponse.json({\n      isCorrect: markingResult.is_correct,\n      feedback: markingResult.feedback,\n      correctAnswerDescription: example.correctAnswerDescription,\n      userResponse\n    });\n\n  } catch (error) {\n    console.error(\"Error submitting answer:\", error);\n    return NextResponse.json(\n      { error: \"Failed to submit answer\" },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/lists/[listId]/items/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/lists/[listId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/lists/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/search/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":172,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5998,6001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5998,6001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from \"next/server\";\nimport { currentUser } from \"@clerk/nextjs/server\";\nimport { prisma } from \"@/lib/prisma\";\nimport { aiService, type AISearchResponse } from \"@/lib/ai-service\";\nimport { slugify } from \"@/lib/utils\";\n\n// Configuration for content generation thresholds\nconst CONTENT_THRESHOLDS = {\n  MIN_CATEGORIES: 2,        // Minimum categories before skipping AI\n  MIN_ARTICLES: 5,          // Minimum articles before skipping AI  \n  MAX_ARTICLES_PER_SEARCH: 30, // Maximum articles to show per search\n  MAX_NEW_ARTICLES_PER_CALL: 5, // Maximum new articles to create per AI call\n  DEFAULT_PAGE_SIZE: 20,    // Default number of results per page\n};\n\n\n// Environment variables for AI article generation\nconst AI_ARTICLES_LOW_RESULTS = parseInt(process.env.AI_ARTICLES_LOW_RESULTS || '5'); // When 2 or fewer results\nconst AI_ARTICLES_HIGH_RESULTS = parseInt(process.env.AI_ARTICLES_HIGH_RESULTS || '2'); // When more than 2 results\nconst LOW_RESULTS_THRESHOLD = 2; // Threshold for switching between low/high generation counts\n\nexport async function POST(request: Request) {\n  console.log(\"Search endpoint hit\");\n  \n  try {\n    const user = await currentUser();\n    let userId: string | null = null;\n    \n    // Check if user exists in database and create if not\n    if (user?.id && user?.emailAddresses?.[0]?.emailAddress) {\n      try {\n        const dbUser = await prisma.user.upsert({\n          where: { clerkUserId: user.id },\n          update: {\n            lastLoginToApp: new Date()\n          },\n          create: {\n            clerkUserId: user.id,\n            email: user.emailAddresses[0].emailAddress,\n            username: user.username || null\n          }\n        });\n        userId = dbUser.clerkUserId;\n      } catch (err) {\n        console.error(\"Error syncing user:\", err);\n        // Continue without user ID\n      }\n    }\n    \n    const body = await request.json();\n    const { query, page = 1, limit = CONTENT_THRESHOLDS.DEFAULT_PAGE_SIZE } = body;\n    \n    console.log(\"Search query:\", query);\n    console.log(\"User ID:\", userId);\n    console.log(\"Pagination:\", { page, limit });\n\n    if (!query || query.trim().length === 0) {\n      return NextResponse.json(\n        { error: \"Search query is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Validate pagination parameters\n    const pageNumber = Math.max(1, parseInt(page) || 1);\n    const pageSize = Math.min(100, Math.max(1, parseInt(limit) || CONTENT_THRESHOLDS.DEFAULT_PAGE_SIZE));\n\n    // STEP 1: Extract keywords using AI\n    console.log(\"Extracting keywords from query using AI...\");\n    let searchKeywords: string[] = [];\n    let searchIntent = '';\n    \n    try {\n      const keywordResponse = await aiService.extractSearchKeywords(query, userId);\n      searchKeywords = keywordResponse.keywords;\n      searchIntent = keywordResponse.search_intent;\n      console.log(\"AI extracted keywords:\", searchKeywords);\n      console.log(\"Search intent:\", searchIntent);\n    } catch (err) {\n      console.error(\"Keyword extraction failed, falling back to basic parsing:\", err);\n      // Fallback to basic keyword extraction\n      searchKeywords = query.trim().toLowerCase().split(/\\s+/).filter(word => word.length > 2);\n    }\n    \n    // STEP 2: Search database using keywords\n    console.log(\"Searching database with extracted keywords...\");\n    \n    const [categories, articlesRaw] = await Promise.all([\n      // Search categories\n      prisma.category.findMany({\n        where: {\n          OR: [\n            // Exact query match\n            { categoryName: { contains: query, mode: 'insensitive' } },\n            { description: { contains: query, mode: 'insensitive' } },\n            // Keyword matches\n            ...searchKeywords.flatMap(keyword => [\n              { categoryName: { contains: keyword, mode: 'insensitive' } },\n              { description: { contains: keyword, mode: 'insensitive' } }\n            ])\n          ]\n        }\n      }),\n      // Search articles\n      prisma.article.findMany({\n        where: {\n          OR: [\n            // Exact query matches\n            { articleTitle: { contains: query, mode: 'insensitive' } },\n            { \n              AND: [\n                { contentHtml: { not: null } },\n                { contentHtml: { contains: query, mode: 'insensitive' } }\n              ]\n            },\n            // Tag-based search (when query starts with #)\n            ...(query.startsWith('#') ? [{\n              tags: {\n                some: {\n                  tag: {\n                    tagName: {\n                      contains: query.slice(1), // Remove the # prefix\n                      mode: 'insensitive' as const\n                    }\n                  }\n                }\n              }\n            }] : []),\n            // Keyword matches in title and content\n            ...searchKeywords.flatMap(keyword => [\n              { articleTitle: { contains: keyword, mode: 'insensitive' } },\n              {\n                AND: [\n                  { contentHtml: { not: null } },\n                  { contentHtml: { contains: keyword, mode: 'insensitive' } }\n                ]\n              },\n              // Search by tag names in keywords as well\n              {\n                tags: {\n                  some: {\n                    tag: {\n                      tagName: {\n                        contains: keyword,\n                        mode: 'insensitive' as const\n                      }\n                    }\n                  }\n                }\n              }\n            ])\n          ]\n        },\n        include: { \n          categories: {\n            include: {\n              category: true\n            }\n          },\n          tags: {\n            include: {\n              tag: true\n            }\n          }\n        }\n      })\n    ]);\n    \n    // STEP 3: Score articles based on keyword relevance\n    console.log(\"Scoring articles based on keyword matches...\");\n    \n    const articleScores = new Map<string, { article: any, score: number }>();\n    \n    articlesRaw.forEach(article => {\n      const titleLower = article.articleTitle.toLowerCase();\n      const categoryNames = article.categories?.map(c => c.category.categoryName.toLowerCase()) || [];\n      const contentLower = article.contentHtml?.toLowerCase() || '';\n      const tagNames = article.tags?.map(t => t.tag.tagName.toLowerCase()) || [];\n      let score = 0;\n      \n      // Skip articles from clearly different technology categories\n      const queryLower = query.toLowerCase();\n      const hasConflictingCategory = categoryNames.some(catName => {\n        if (queryLower === 'docker' && catName.includes('docker swarm')) return true;\n        if (queryLower === 'kubernetes' && catName.includes('openshift')) return true;\n        if (queryLower === 'git' && (catName.includes('github') || catName.includes('gitlab'))) return true;\n        return false;\n      });\n      \n      if (hasConflictingCategory) {\n        return;\n      }\n      \n      // Scoring based on matches\n      // Exact query match in title = highest score\n      if (titleLower.includes(query.toLowerCase())) {\n        score += 100;\n      }\n      \n      // Exact query match in content = very high score\n      if (contentLower && contentLower.includes(query.toLowerCase())) {\n        score += 80;\n      }\n      \n      // Keyword matches in title\n      const titleKeywordMatches = searchKeywords.filter(keyword => \n        titleLower.includes(keyword.toLowerCase())\n      ).length;\n      score += titleKeywordMatches * 10;\n      \n      // Keyword matches in content (with bonus for having content)\n      if (contentLower) {\n        const contentKeywordMatches = searchKeywords.filter(keyword => \n          contentLower.includes(keyword.toLowerCase())\n        ).length;\n        score += contentKeywordMatches * 15; // Higher value for content matches\n        score += 5; // Bonus for having content at all\n      }\n      \n      // Category relevance bonus\n      const categoryMatches = categoryNames.filter(catName => \n        catName.includes(query.toLowerCase())\n      ).length;\n      score += categoryMatches * 20;\n\n      // Tag-based scoring (very high value for tag matches)\n      if (query.startsWith('#')) {\n        const tagQuery = query.slice(1).toLowerCase();\n        if (tagNames.some(tag => tag.includes(tagQuery))) {\n          score += 150; // Very high score for exact tag matches\n        }\n      } else {\n        // Regular keyword matches in tags\n        const tagKeywordMatches = searchKeywords.filter(keyword => \n          tagNames.some(tag => tag.includes(keyword.toLowerCase()))\n        ).length;\n        score += tagKeywordMatches * 25; // High value for tag keyword matches\n      }\n      \n      // Ensure minimum score for any match\n      if (score > 0) {\n        score = Math.max(1, score);\n      }\n      \n      // Keep the highest scoring version of each article\n      const existing = articleScores.get(article.articleId);\n      if (!existing || existing.score < score) {\n        articleScores.set(article.articleId, { article, score });\n      }\n    });\n    \n    // Sort articles by score (highest first)\n    const articles = Array.from(articleScores.values())\n      .sort((a, b) => b.score - a.score)\n      .map(item => item.article);\n    \n    console.log(\"Database results:\", { \n      categoriesFound: categories.length, \n      articlesFound: articles.length \n    });\n\n    // STEP 4: Determine if we need AI-generated content\n    const hasSufficientContent = articles.length >= CONTENT_THRESHOLDS.MIN_ARTICLES;\n    \n    // Check if articles with content actually address the keywords\n    const hasRelevantContent = articles.some(article => {\n      const content = article.contentHtml?.toLowerCase() || '';\n      const title = article.articleTitle.toLowerCase();\n      \n      if (!content) return false; // No content to check\n      \n      // Check if the article addresses at least 60% of the extracted keywords\n      const keywordMatches = searchKeywords.filter(keyword => \n        content.includes(keyword.toLowerCase()) || title.includes(keyword.toLowerCase())\n      ).length;\n      \n      return keywordMatches >= Math.max(1, searchKeywords.length * 0.6);\n    });\n\n    let aiResponse: AISearchResponse = {\n      suggested_new_categories: [],\n      suggested_new_article_titles: []\n    };\n\n    const shouldCallAI = !hasSufficientContent || !hasRelevantContent;\n    \n    if (shouldCallAI) {\n      console.log(`Need AI content generation. Sufficient articles: ${hasSufficientContent}, Relevant content: ${hasRelevantContent}`);\n      \n      const articlesNeeded = articles.length <= LOW_RESULTS_THRESHOLD \n        ? AI_ARTICLES_LOW_RESULTS \n        : AI_ARTICLES_HIGH_RESULTS;\n      \n      console.log(`Will generate ${articlesNeeded} new articles targeting keywords: ${searchKeywords.join(', ')}`);\n\n      try {\n        console.log('Calling AI for search suggestions...');\n        \n        // Fetch ALL categories for AI context\n        const allCategories = await prisma.category.findMany({\n          select: {\n            categoryName: true,\n            description: true\n          }\n        });\n        \n        const existingContent = {\n          categories: categories.map(c => c.categoryName),\n          articles: articles.map(a => ({ \n            title: a.articleTitle, \n            category: a.categories?.[0]?.category?.categoryName || 'No category'\n          }))\n        };\n\n        // Enhanced query with keywords for better AI suggestions\n        const enhancedQuery = `${query} (related keywords: ${searchKeywords.join(', ')})`;\n\n        aiResponse = await aiService.generateSearchSuggestions(\n          enhancedQuery, \n          allCategories,\n          existingContent.articles,\n          articlesNeeded,\n          userId\n        );\n        \n        console.log(\"AI suggestions:\", {\n          categoriesCount: aiResponse.suggested_new_categories?.length || 0,\n          articlesCount: aiResponse.suggested_new_article_titles?.length || 0\n        });\n      } catch (aiError) {\n        console.error(\"AI call failed:\", aiError);\n      }\n    } else {\n      console.log(\"Sufficient relevant content found, skipping AI call\");\n    }\n\n    // Persist new categories and articles\n    const newCategories = [];\n    const newArticles = [];\n\n    // Add new categories\n    for (const suggestedCategory of aiResponse.suggested_new_categories || []) {\n      const existingCategory = await prisma.category.findUnique({\n        where: { categoryName: suggestedCategory.name }\n      });\n\n      if (!existingCategory) {\n        const newCategory = await prisma.category.create({\n          data: {\n            categoryName: suggestedCategory.name,\n            description: suggestedCategory.description\n          }\n        });\n        newCategories.push(newCategory);\n      }\n    }\n\n    // Add new articles\n    for (const suggestedArticle of aiResponse.suggested_new_article_titles || []) {\n      // Find or create all categories for this article\n      const categories = [];\n      const categoryIds = [];\n      \n      for (const categoryName of suggestedArticle.target_category_names || []) {\n        let category = await prisma.category.findUnique({\n          where: { categoryName }\n        });\n\n        if (!category) {\n          category = await prisma.category.create({\n            data: {\n              categoryName,\n              description: `Category for ${categoryName}`\n            }\n          });\n        }\n        \n        categories.push(category);\n        categoryIds.push(category.categoryId);\n      }\n\n      const articleSlug = slugify(suggestedArticle.title);\n      \n      // Check for existing article with same slug\n      const existingArticle = await prisma.article.findUnique({\n        where: { articleSlug }\n      });\n\n      // Also check for similar titles to avoid near-duplicates\n      const similarArticles = await prisma.article.findMany({\n        where: {\n          categories: {\n            some: {\n              categoryId: {\n                in: categoryIds\n              }\n            }\n          },\n          articleTitle: {\n            contains: suggestedArticle.title.split(' ').slice(0, 3).join(' '),\n            mode: 'insensitive'\n          }\n        }\n      });\n\n      const hasSimilarArticle = similarArticles.length > 0;\n\n      if (!existingArticle && !hasSimilarArticle) {\n        // Create the article\n        const newArticle = await prisma.article.create({\n          data: {\n            articleTitle: suggestedArticle.title,\n            articleSlug,\n            isContentGenerated: false,\n            createdByClerkUserId: userId || null\n          }\n        });\n        \n        // Create article-category relationships\n        for (let i = 0; i < categories.length; i++) {\n          await prisma.articleCategory.create({\n            data: {\n              articleId: newArticle.articleId,\n              categoryId: categories[i].categoryId,\n              isPrimary: categories[i].categoryName === suggestedArticle.primary_category_name\n            }\n          });\n        }\n        \n        // Fetch the complete article with categories\n        const completeArticle = await prisma.article.findUnique({\n          where: { articleId: newArticle.articleId },\n          include: { \n            categories: {\n              include: {\n                category: true\n              }\n            },\n            tags: {\n              include: {\n                tag: true\n              }\n            }\n          }\n        });\n        \n        newArticles.push(completeArticle);\n      }\n    }\n\n    // Combine all results\n    const allCategories = [...categories, ...newCategories];\n    const allArticles = [...articles, ...newArticles];\n\n    // AI reordering of results based on query relevance\n    let finalArticles = allArticles;\n    if (allArticles.length > 1) {\n      try {\n        console.log(\"Calling AI to reorder search results for better relevance...\");\n        const reorderResponse = await aiService.reorderSearchResults(query, allArticles, allCategories, userId);\n        \n        // Create a map for quick lookup\n        const articleMap = new Map(allArticles.map(article => [article.articleId, article]));\n        \n        // Reorder articles based on AI response\n        const reorderedArticles = reorderResponse.reordered_article_ids\n          .map(id => articleMap.get(id))\n          .filter(article => article !== undefined);\n        \n        // Add any articles not in the AI response (fallback)\n        const reorderedIds = new Set(reorderResponse.reordered_article_ids);\n        const remainingArticles = allArticles.filter(article => !reorderedIds.has(article.articleId));\n        \n        finalArticles = [...reorderedArticles, ...remainingArticles];\n        \n        console.log(\"AI reordering completed\", {\n          originalOrder: allArticles.map(a => a.articleTitle).slice(0, 3),\n          newOrder: finalArticles.map(a => a.articleTitle).slice(0, 3),\n          explanation: reorderResponse.explanation\n        });\n      } catch (reorderError) {\n        console.error(\"AI reordering failed, using original order:\", reorderError);\n        // Continue with original order if AI reordering fails\n      }\n    }\n    \n    // Calculate pagination using finalArticles (AI reordered)\n    const totalArticles = finalArticles.length;\n    const totalPages = Math.ceil(totalArticles / pageSize);\n    const startIndex = (pageNumber - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    \n    // Apply pagination to articles\n    const paginatedArticles = finalArticles.slice(startIndex, endIndex);\n    \n    // Prepare pagination metadata\n    const pagination = {\n      page: pageNumber,\n      limit: pageSize,\n      total: totalArticles,\n      totalPages,\n      hasNextPage: pageNumber < totalPages,\n      hasPreviousPage: pageNumber > 1\n    };\n\n    return NextResponse.json({\n      query,\n      categories: allCategories, // Categories are not paginated\n      articles: paginatedArticles,\n      pagination,\n      aiSuggestions: {\n        newCategoriesAdded: newCategories.length,\n        newArticlesAdded: newArticles.length\n      }\n    });\n\n  } catch (error) {\n    console.error(\"Error in search:\", error);\n    \n    // More detailed error response for debugging\n    if (error instanceof Error) {\n      console.error(\"Error details:\", {\n        message: error.message,\n        stack: error.stack,\n        name: error.name\n      });\n    }\n    \n    return NextResponse.json(\n      { \n        error: \"Failed to perform search\",\n        details: process.env.NODE_ENV === 'development' ? error instanceof Error ? error.message : 'Unknown error' : undefined\n      },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/subscription/checkout/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/subscription/portal/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used.","line":6,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\nimport { createPortalSession } from '@/lib/stripe';\nimport { prisma } from '@/lib/prisma';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { userId } = await auth();\n    \n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Get user from database\n    const user = await prisma.user.findUnique({\n      where: { clerkUserId: userId },\n    });\n\n    if (!user || !user.stripeCustomerId) {\n      return NextResponse.json(\n        { error: 'No subscription found' },\n        { status: 404 }\n      );\n    }\n\n    // Create portal session\n    const returnUrl = `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`;\n    const session = await createPortalSession(user.stripeCustomerId, returnUrl);\n\n    return NextResponse.json({ url: session.url });\n  } catch (error) {\n    console.error('Portal session error:', error);\n    return NextResponse.json(\n      { error: 'Failed to create portal session' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/subscription/status/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used.","line":6,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@clerk/nextjs/server';\nimport { prisma } from '@/lib/prisma';\nimport { checkSubscription } from '@/lib/subscription-check';\n\nexport async function GET(req: NextRequest) {\n  try {\n    const { userId } = await auth();\n    \n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Use the subscription check service to get full subscription info\n    const subscription = await checkSubscription(userId);\n\n    // Get user data for additional fields\n    const user = await prisma.user.findUnique({\n      where: { clerkUserId: userId },\n      select: {\n        subscriptionStatus: true,\n        subscriptionCurrentPeriodEnd: true,\n        stripeCustomerId: true,\n      },\n    });\n    \n    return NextResponse.json({\n      tier: subscription.tier,\n      status: user?.subscriptionStatus || 'INACTIVE',\n      isActive: subscription.isActive,\n      permissions: subscription.permissions,\n      currentPeriodEnd: user?.subscriptionCurrentPeriodEnd,\n      hasStripeCustomer: !!user?.stripeCustomerId,\n    });\n  } catch (error) {\n    console.error('Subscription status error:', error);\n    return NextResponse.json(\n      { error: 'Failed to get subscription status' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/test/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/user/role/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/user/sync/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used.","line":5,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { auth, currentUser } from '@clerk/nextjs/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { userId } = await auth();\n    \n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Get current user from Clerk\n    const clerkUser = await currentUser();\n    \n    if (!clerkUser) {\n      return NextResponse.json({ error: 'User not found in Clerk' }, { status: 404 });\n    }\n\n    const email = clerkUser.emailAddresses[0]?.emailAddress;\n    \n    if (!email) {\n      return NextResponse.json({ error: 'No email address found' }, { status: 400 });\n    }\n\n    // Upsert user in database\n    const user = await prisma.user.upsert({\n      where: { clerkUserId: userId },\n      update: {\n        email,\n        username: clerkUser.username || null,\n        firstName: clerkUser.firstName || null,\n        lastName: clerkUser.lastName || null,\n        imageUrl: clerkUser.imageUrl || null,\n        lastLoginToApp: new Date(),\n      },\n      create: {\n        clerkUserId: userId,\n        email,\n        username: clerkUser.username || null,\n        firstName: clerkUser.firstName || null,\n        lastName: clerkUser.lastName || null,\n        imageUrl: clerkUser.imageUrl || null,\n      },\n    });\n\n    console.log(`✅ User ${userId} manually synced with email: ${email}`);\n\n    return NextResponse.json({ \n      message: 'User synced successfully',\n      user: {\n        id: user.clerkUserId,\n        email: user.email,\n        subscriptionTier: user.subscriptionTier,\n      }\n    });\n  } catch (error) {\n    console.error('Manual sync error:', error);\n    return NextResponse.json(\n      { error: 'Failed to sync user' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/webhook/clerk/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/api/webhook/stripe/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'updatedUser' is assigned a value but never used.","line":121,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":121,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { headers } from 'next/headers';\nimport Stripe from 'stripe';\nimport { stripe } from '@/lib/stripe';\nimport { prisma } from '@/lib/prisma';\nimport { SubscriptionTier, SubscriptionStatus } from '@prisma/client';\nimport { emails } from '@/lib/email-service';\n\nconst webhookSecret = process.env.STRIPE_WEBHOOK_SECRET!;\n\nasync function getOrCreateUser(customerId: string) {\n  if (!stripe) {\n    throw new Error('Stripe is not initialized');\n  }\n  \n  const customer = await stripe.customers.retrieve(customerId) as Stripe.Customer;\n  \n  if (!customer.metadata.clerkUserId) {\n    throw new Error('Customer missing clerkUserId in metadata');\n  }\n\n  // Ensure user exists in database\n  const user = await prisma.user.findUnique({\n    where: { clerkUserId: customer.metadata.clerkUserId },\n  });\n\n  if (!user) {\n    throw new Error(`User not found for clerkUserId: ${customer.metadata.clerkUserId}`);\n  }\n\n  // Update user with Stripe customer ID if not already set\n  if (!user.stripeCustomerId) {\n    await prisma.user.update({\n      where: { clerkUserId: customer.metadata.clerkUserId },\n      data: { stripeCustomerId: customerId },\n    });\n  }\n\n  return user;\n}\n\nfunction mapPriceToTier(priceAmount: number): SubscriptionTier {\n  const standardPrice = Number(process.env.STRIPE_STANDARD_PRICE_MONTHLY) || 8;\n  const maxPrice = Number(process.env.STRIPE_MAX_PRICE_MONTHLY) || 14;\n\n  // Convert from cents to dollars\n  const amount = priceAmount / 100;\n\n  if (amount === standardPrice) return 'STANDARD';\n  if (amount === maxPrice) return 'MAX';\n  \n  // Default to standard if price doesn't match\n  console.warn(`Unknown price amount: ${amount}, defaulting to STANDARD tier`);\n  return 'STANDARD';\n}\n\nfunction mapStripeStatus(status: string): SubscriptionStatus {\n  switch (status) {\n    case 'active':\n      return 'ACTIVE';\n    case 'canceled':\n      return 'CANCELLED';\n    case 'past_due':\n      return 'PAST_DUE';\n    default:\n      return 'INACTIVE';\n  }\n}\n\nexport async function POST(req: NextRequest) {\n  const body = await req.text();\n  const headersList = await headers();\n  const signature = headersList.get('stripe-signature');\n\n  if (!signature) {\n    return NextResponse.json({ error: 'No signature' }, { status: 400 });\n  }\n\n  if (!stripe) {\n    return NextResponse.json({ error: 'Stripe is not initialized' }, { status: 500 });\n  }\n\n  let event: Stripe.Event;\n\n  try {\n    event = stripe.webhooks.constructEvent(body, signature, webhookSecret);\n  } catch (err) {\n    console.error('Webhook signature verification failed:', err);\n    return NextResponse.json(\n      { error: 'Invalid signature' },\n      { status: 400 }\n    );\n  }\n\n  try {\n    switch (event.type) {\n      case 'customer.subscription.created':\n      case 'customer.subscription.updated': {\n        const subscription = event.data.object as Stripe.Subscription;\n        console.log(`Processing ${event.type} for subscription ${subscription.id} with status ${subscription.status}`);\n        \n        const user = await getOrCreateUser(subscription.customer as string);\n        \n        const priceItem = subscription.items.data[0];\n        const tier = mapPriceToTier(priceItem.price.unit_amount || 0);\n        const status = mapStripeStatus(subscription.status);\n        \n        console.log(`Subscription details - Tier: ${tier}, Status: ${status}, Period End: ${subscription.current_period_end}`);\n\n        // Update user subscription\n        const periodEnd = subscription.current_period_end \n          ? new Date(subscription.current_period_end * 1000)\n          : null;\n\n        // Validate the date\n        if (periodEnd && isNaN(periodEnd.getTime())) {\n          console.error('Invalid subscription period end date:', subscription.current_period_end);\n          throw new Error('Invalid subscription period end date');\n        }\n\n        const updatedUser = await prisma.user.update({\n          where: { clerkUserId: user.clerkUserId },\n          data: {\n            subscriptionId: subscription.id,\n            subscriptionTier: tier,\n            subscriptionStatus: status,\n            subscriptionCurrentPeriodEnd: periodEnd,\n          },\n        });\n\n        // Create history record\n        await prisma.subscriptionHistory.create({\n          data: {\n            clerkUserId: user.clerkUserId,\n            subscriptionId: subscription.id,\n            eventType: event.type.replace('customer.subscription.', ''),\n            previousTier: user.subscriptionTier,\n            newTier: tier,\n            previousStatus: user.subscriptionStatus,\n            newStatus: status,\n            amount: priceItem.price.unit_amount,\n            currency: priceItem.price.currency,\n            stripeEventId: event.id,\n            metadata: event.data.object,\n          },\n        });\n\n        // Send subscription confirmation email for new active subscriptions\n        if (event.type === 'customer.subscription.created' && status === 'ACTIVE') {\n          try {\n            await emails.sendSubscriptionConfirmation(\n              user.email,\n              user.firstName || \"User\",\n              tier,\n              priceItem.price.unit_amount || 0\n            );\n            console.log(`Subscription confirmation email sent to ${user.email}`);\n          } catch (emailError) {\n            console.error(`Failed to send subscription confirmation to ${user.email}:`, emailError);\n          }\n        }\n\n        break;\n      }\n\n      case 'customer.subscription.deleted': {\n        const subscription = event.data.object as Stripe.Subscription;\n        const user = await getOrCreateUser(subscription.customer as string);\n\n        // Update user subscription to cancelled/free\n        const cancelPeriodEnd = subscription.current_period_end \n          ? new Date(subscription.current_period_end * 1000)\n          : null;\n\n        await prisma.user.update({\n          where: { clerkUserId: user.clerkUserId },\n          data: {\n            subscriptionTier: 'FREE',\n            subscriptionStatus: 'CANCELLED',\n            subscriptionCurrentPeriodEnd: cancelPeriodEnd,\n          },\n        });\n\n        // Create history record\n        await prisma.subscriptionHistory.create({\n          data: {\n            clerkUserId: user.clerkUserId,\n            subscriptionId: subscription.id,\n            eventType: 'deleted',\n            previousTier: user.subscriptionTier,\n            newTier: 'FREE',\n            previousStatus: user.subscriptionStatus,\n            newStatus: 'CANCELLED',\n            stripeEventId: event.id,\n            metadata: event.data.object,\n          },\n        });\n\n        break;\n      }\n\n      case 'invoice.payment_succeeded': {\n        const invoice = event.data.object as Stripe.Invoice;\n        \n        if (invoice.subscription && stripe) {\n          const subscription = await stripe.subscriptions.retrieve(\n            invoice.subscription as string\n          );\n          const user = await getOrCreateUser(subscription.customer as string);\n\n          // Update subscription end date\n          const renewalPeriodEnd = subscription.current_period_end \n            ? new Date(subscription.current_period_end * 1000)\n            : null;\n\n          await prisma.user.update({\n            where: { clerkUserId: user.clerkUserId },\n            data: {\n              subscriptionCurrentPeriodEnd: renewalPeriodEnd,\n            },\n          });\n        }\n\n        break;\n      }\n\n      case 'invoice.payment_failed': {\n        const invoice = event.data.object as Stripe.Invoice;\n        \n        if (invoice.subscription && stripe) {\n          const subscription = await stripe.subscriptions.retrieve(\n            invoice.subscription as string\n          );\n          const user = await getOrCreateUser(subscription.customer as string);\n\n          // Update subscription status to past due\n          await prisma.user.update({\n            where: { clerkUserId: user.clerkUserId },\n            data: {\n              subscriptionStatus: 'PAST_DUE',\n            },\n          });\n\n          // Create history record\n          await prisma.subscriptionHistory.create({\n            data: {\n              clerkUserId: user.clerkUserId,\n              subscriptionId: subscription.id,\n              eventType: 'payment_failed',\n              previousTier: user.subscriptionTier,\n              newTier: user.subscriptionTier,\n              previousStatus: user.subscriptionStatus,\n              newStatus: 'PAST_DUE',\n              stripeEventId: event.id,\n              metadata: event.data.object,\n            },\n          });\n        }\n\n        break;\n      }\n    }\n\n    return NextResponse.json({ received: true });\n  } catch (error) {\n    console.error('Webhook handler error:', error);\n    return NextResponse.json(\n      { error: 'Webhook handler failed' },\n      { status: 500 }\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/articles/[slug]/article-content.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useRouter' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ArticleSuggestionFormInline' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":505,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":505,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17245,17248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17245,17248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchLists'. Either include it or remove the dependency array.","line":516,"column":6,"nodeType":"ArrayExpression","endLine":516,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [fetchLists, isOpen, isSignedIn]","fix":{"range":[17625,17645],"text":"[fetchLists, isOpen, isSignedIn]"}}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'generateContent'. Either include it or remove the dependency array.","line":69,"column":6,"nodeType":"ArrayExpression","endLine":69,"endColumn":67,"suggestions":[{"desc":"Update the dependencies array to be: [article.isContentGenerated, article.contentHtml, isSignedIn, generateContent]","fix":{"range":[2226,2287],"text":"[article.isContentGenerated, article.contentHtml, isSignedIn, generateContent]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'trackArticleView'. Either include it or remove the dependency array.","line":77,"column":6,"nodeType":"ArrayExpression","endLine":77,"endColumn":37,"suggestions":[{"desc":"Update the dependencies array to be: [isSignedIn, article.articleId, trackArticleView]","fix":{"range":[2521,2552],"text":"[isSignedIn, article.articleId, trackArticleView]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useUser } from \"@clerk/nextjs\";\nimport { useRouter } from \"next/navigation\";\nimport { useSubscription } from \"@/hooks/use-subscription\";\nimport { Loader2, BookOpen, Sparkles, CreditCard, MoreVertical, BookmarkPlus, Check, Plus, X, Flag } from \"lucide-react\";\nimport Link from \"next/link\";\nimport InteractiveExamples from \"./interactive-examples\";\nimport MarkdownViewer from \"@/components/markdown-viewer\";\nimport CommentsList from \"@/components/comments/comments-list\";\nimport LikeButton from \"@/components/like-button\";\nimport { ArticleSuggestionFormInline } from \"@/components/article-suggestion-form-inline\";\nimport { ArticleChangeHistory } from \"@/components/article-change-history\";\nimport { FloatingActionMenu } from \"@/components/floating-action-menu\";\n\ninterface Article {\n  articleId: string;\n  articleTitle: string;\n  articleSlug: string;\n  contentHtml: string | null;\n  isContentGenerated: boolean;\n  isFlagged: boolean;\n  categories: Array<{\n    category: {\n      categoryId: string;\n      categoryName: string;\n    };\n  }>;\n  stream: {\n    streamId: string;\n    streamName: string;\n    channel: {\n      channelId: string;\n      channelName: string;\n    };\n  } | null;\n  createdBy: {\n    username: string | null;\n  } | null;\n  tags: Array<{\n    tag: {\n      tagId: string;\n      tagName: string;\n      description: string | null;\n      color: string | null;\n    };\n  }>;\n}\n\ninterface ArticleContentProps {\n  article: Article;\n}\n\nexport default function ArticleContent({ article: initialArticle }: ArticleContentProps) {\n  const [article, setArticle] = useState(initialArticle);\n  const [generating, setGenerating] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [subscriptionError, setSubscriptionError] = useState(false);\n  const [showSuggestionModal, setShowSuggestionModal] = useState(false);\n  const [focusedExampleId, setFocusedExampleId] = useState<string | null>(null);\n  const { isSignedIn } = useUser();\n\n  useEffect(() => {\n    if (!article.isContentGenerated && !article.contentHtml && isSignedIn) {\n      generateContent();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [article.isContentGenerated, article.contentHtml, isSignedIn]);\n\n  useEffect(() => {\n    // Track article view when component mounts and user is signed in\n    if (isSignedIn && article.articleId) {\n      trackArticleView();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isSignedIn, article.articleId]);\n\n  const trackArticleView = async () => {\n    try {\n      const response = await fetch(`/api/articles/${article.articleId}/view`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      \n      if (!response.ok) {\n        const data = await response.json();\n        console.error(\"Failed to track article view:\", response.status, data);\n      } else {\n        console.log(\"Article view tracked successfully\");\n      }\n    } catch (err) {\n      console.error(\"Failed to track article view:\", err);\n    }\n  };\n\n  const generateContent = async () => {\n    setGenerating(true);\n    setError(null);\n\n    try {\n      const response = await fetch(`/api/articles/${article.articleId}/generate`, {\n        method: \"POST\",\n      });\n\n      if (!response.ok) {\n        const data = await response.json();\n        if (response.status === 403 && data.error === \"Subscription required\") {\n          setSubscriptionError(true);\n          throw new Error(data.message || \"Subscription required\");\n        }\n        throw new Error(data.error || \"Failed to generate content\");\n      }\n\n      const data = await response.json();\n      setArticle(data.article);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"An error occurred\");\n    } finally {\n      setGenerating(false);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Breadcrumb */}\n      <nav className=\"mb-8\">\n        <ol className=\"flex items-center space-x-2 text-sm text-gray-600\">\n          <li>\n            <Link href=\"/\" className=\"hover:text-gray-900\">\n              Home\n            </Link>\n          </li>\n          <li>/</li>\n          {article.stream ? (\n            <>\n              <li>\n                <Link href=\"/channels\" className=\"hover:text-gray-900\">\n                  Channels\n                </Link>\n              </li>\n              <li>/</li>\n              <li>\n                <Link \n                  href={`/channels#${article.stream.channel.channelId}`} \n                  className=\"hover:text-gray-900\"\n                >\n                  {article.stream.channel.channelName}\n                </Link>\n              </li>\n              <li>/</li>\n              <li>\n                <Link \n                  href={`/search/v2?channel=${article.stream.channel.channelId}&stream=${article.stream.streamId}`} \n                  className=\"hover:text-gray-900\"\n                >\n                  {article.stream.streamName}\n                </Link>\n              </li>\n            </>\n          ) : article.categories && article.categories.length > 0 ? (\n            <>\n              <li>\n                <Link href=\"/categories\" className=\"hover:text-gray-900\">\n                  Categories\n                </Link>\n              </li>\n              <li>/</li>\n              <li>\n                <Link \n                  href={`/categories/${article.categories[0].category.categoryId}`} \n                  className=\"hover:text-gray-900\"\n                >\n                  {article.categories[0].category.categoryName}\n                </Link>\n              </li>\n            </>\n          ) : null}\n          <li>/</li>\n          <li className=\"text-gray-900 font-medium\">{article.articleTitle}</li>\n        </ol>\n      </nav>\n\n      {/* Article Header */}\n      <header className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n          {article.articleTitle}\n        </h1>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center text-gray-600\">\n            <BookOpen className=\"h-5 w-5 mr-2\" />\n            <span>\n              {article.stream \n                ? `${article.stream.channel.channelName} / ${article.stream.streamName}`\n                : article.categories && article.categories.length > 0 \n                  ? (\n                    <div className=\"flex flex-wrap gap-2\">\n                      {article.categories.map((c, index) => (\n                        <span key={c.category.categoryId}>\n                          <Link \n                            href={`/categories/${c.category.categoryId}`}\n                            className=\"text-blue-600 hover:text-blue-800 hover:underline\"\n                          >\n                            {c.category.categoryName}\n                          </Link>\n                          {index < article.categories.length - 1 && <span className=\"text-gray-600\">,</span>}\n                        </span>\n                      ))}\n                    </div>\n                  )\n                  : 'Uncategorized'\n              }\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <LikeButton articleId={article.articleId} iconOnly />\n            {article.contentHtml && (\n              <MoreOptionsDropdown\n                articleId={article.articleId}\n                articleTitle={article.articleTitle}\n                isFlagged={article.isFlagged}\n                onShowSuggestion={() => setShowSuggestionModal(true)}\n              />\n            )}\n          </div>\n        </div>\n        \n        {/* Tags */}\n        {article.tags && article.tags.length > 0 && (\n          <div className=\"mt-4\">\n            <div className=\"flex flex-wrap gap-2\">\n              {article.tags.map(({ tag }) => (\n                <Link\n                  key={tag.tagId}\n                  href={`/search?q=${encodeURIComponent(`#${tag.tagName}`)}`}\n                  className=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium text-white shadow-sm hover:opacity-80 transition-opacity\"\n                  style={{ \n                    backgroundColor: tag.color || '#3B82F6',\n                  }}\n                  title={tag.description ? `${tag.description} - Click to find more articles with this tag` : `Click to find more articles with #${tag.tagName}`}\n                >\n                  #{tag.tagName}\n                </Link>\n              ))}\n            </div>\n          </div>\n        )}\n      </header>\n\n      {/* Content */}\n      {error && !subscriptionError && (\n        <div className=\"mb-8 bg-red-50 border border-red-200 rounded-lg p-4\">\n          <p className=\"text-red-800\">Error: {error}</p>\n        </div>\n      )}\n\n      {generating ? (\n        <div className=\"flex flex-col items-center justify-center py-20\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-blue-600 mb-4\" />\n          <p className=\"text-gray-600\">Generating article content...</p>\n          <p className=\"text-sm text-gray-500 mt-2\">This may take a moment</p>\n        </div>\n      ) : article.contentHtml ? (\n        <>\n          <div className=\"mb-12\">\n            <MarkdownViewer content={article.contentHtml} removeFirstHeading={true} />\n          </div>\n          \n          {/* Interactive Examples Section */}\n          {isSignedIn && (\n            <InteractiveExamples \n              articleId={article.articleId} \n              onFocusedExampleChange={setFocusedExampleId}\n            />\n          )}\n          \n          {/* Change History Section */}\n          <ArticleChangeHistory articleId={article.articleId} />\n          \n          {/* Comments Section */}\n          <CommentsList articleId={article.articleId} />\n        </>\n      ) : (\n        <div className=\"text-center py-20\">\n          {subscriptionError ? (\n            <>\n              <CreditCard className=\"mx-auto h-12 w-12 text-blue-600 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                Subscription Required\n              </h3>\n              <p className=\"text-gray-600 mb-4 max-w-md mx-auto\">\n                To access AI-generated content and unlock all platform features, please subscribe to one of our plans.\n              </p>\n              <div className=\"space-y-3\">\n                <Link\n                  href=\"/pricing\"\n                  className=\"inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700\"\n                >\n                  View Subscription Plans\n                </Link>\n                <p className=\"text-sm text-gray-500\">\n                  Starting at just $9.99/month\n                </p>\n              </div>\n            </>\n          ) : (\n            <>\n              <Sparkles className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                Content Not Yet Generated\n              </h3>\n              {isSignedIn ? (\n                <>\n                  <p className=\"text-gray-600 mb-4\">\n                    This article&apos;s content will be generated automatically.\n                  </p>\n                  <button\n                    onClick={generateContent}\n                    className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700\"\n                  >\n                    Generate Content Now\n                  </button>\n                </>\n              ) : (\n                <>\n                  <p className=\"text-gray-600 mb-4\">\n                    Sign in to read this article and access interactive examples.\n                  </p>\n                  <Link\n                    href=\"/sign-in\"\n                    className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700\"\n                  >\n                    Sign In to Continue\n                  </Link>\n                </>\n              )}\n            </>\n          )}\n        </div>\n      )}\n    </div>\n    \n    {showSuggestionModal && (\n      <SuggestionModal\n        articleId={article.articleId}\n        isOpen={showSuggestionModal}\n        onClose={() => setShowSuggestionModal(false)}\n      />\n    )}\n    \n    {/* Floating Action Menu */}\n    {isSignedIn && <FloatingActionMenu articleId={article.articleId} currentExampleId={focusedExampleId || undefined} />}\n    </>\n  );\n}\n\ninterface MoreOptionsDropdownProps {\n  articleId: string;\n  articleTitle: string;\n  isFlagged: boolean;\n  onShowSuggestion: () => void;\n}\n\nfunction MoreOptionsDropdown({ articleId, articleTitle, isFlagged, onShowSuggestion }: MoreOptionsDropdownProps) {\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [showListModal, setShowListModal] = useState(false);\n  const [showFlagModal, setShowFlagModal] = useState(false);\n\n  return (\n    <>\n      <div className=\"relative\">\n        <button\n          onClick={() => setShowDropdown(!showDropdown)}\n          className=\"inline-flex items-center justify-center p-2 text-sm font-medium rounded-md transition-colors bg-gray-100 text-gray-700 hover:bg-gray-200\"\n          title=\"More options\"\n        >\n          <MoreVertical className=\"h-4 w-4\" />\n        </button>\n\n        {showDropdown && (\n          <>\n            <div\n              className=\"fixed inset-0 z-10\"\n              onClick={() => setShowDropdown(false)}\n            />\n            <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-20\">\n              <div className=\"py-1\">\n                <button\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    console.log('Manage Lists clicked');\n                    setShowDropdown(false);\n                    setShowListModal(true);\n                  }}\n                  className=\"w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center\"\n                >\n                  <BookmarkPlus className=\"h-4 w-4 mr-2\" />\n                  Manage Lists\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    console.log('Suggest Improvement clicked');\n                    setShowDropdown(false);\n                    onShowSuggestion();\n                  }}\n                  className=\"w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center\"\n                >\n                  <Sparkles className=\"h-4 w-4 mr-2\" />\n                  Suggest Improvement\n                </button>\n                <div className=\"border-t border-gray-100\">\n                  <FlagButtonMenuItem\n                    articleId={articleId}\n                    isFlagged={isFlagged}\n                    onClose={() => setShowDropdown(false)}\n                    onShowModal={() => {\n                      setShowDropdown(false);\n                      setShowFlagModal(true);\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n\n      {showListModal && (\n        <ListManagementModal\n          articleId={articleId}\n          articleTitle={articleTitle}\n          isOpen={showListModal}\n          onClose={() => setShowListModal(false)}\n        />\n      )}\n\n      {showFlagModal && (\n        <FlagModal\n          articleId={articleId}\n          isFlagged={isFlagged}\n          isOpen={showFlagModal}\n          onClose={() => setShowFlagModal(false)}\n        />\n      )}\n    </>\n  );\n}\n\ninterface FlagButtonMenuItemProps {\n  articleId: string;\n  isFlagged: boolean;\n  onClose: () => void;\n  onShowModal: () => void;\n}\n\nfunction FlagButtonMenuItem({ isFlagged, onShowModal }: FlagButtonMenuItemProps) {\n  const { isSignedIn } = useUser();\n\n  async function handleFlag() {\n    if (!isSignedIn) {\n      alert(\"Please sign in to flag content\");\n      return;\n    }\n\n    if (isFlagged) {\n      alert(\"This content has already been flagged\");\n      return;\n    }\n\n    onShowModal();\n  }\n\n  return (\n    <button\n      onClick={(e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleFlag();\n      }}\n      disabled={isFlagged}\n      className=\"w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center disabled:opacity-50\"\n      title={isFlagged ? \"Already flagged\" : \"Flag as inappropriate\"}\n    >\n      <Flag className=\"h-4 w-4 mr-2\" fill={isFlagged ? \"currentColor\" : \"none\"} />\n      <span>{isFlagged ? \"Flagged\" : \"Flag\"}</span>\n    </button>\n  );\n}\n\n\ninterface ListManagementModalProps {\n  articleId: string;\n  articleTitle: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nfunction ListManagementModal({ articleId, articleTitle, isOpen, onClose }: ListManagementModalProps) {\n  const [lists, setLists] = useState<any[]>([]);\n  const [articleLists, setArticleLists] = useState<Set<string>>(new Set());\n  const [isLoading, setIsLoading] = useState(false);\n  const [showNewListForm, setShowNewListForm] = useState(false);\n  const [newListName, setNewListName] = useState(\"\");\n  const { isSignedIn } = useUser();\n\n  useEffect(() => {\n    if (isOpen && isSignedIn) {\n      fetchLists();\n    }\n  }, [isOpen, isSignedIn]);\n\n  const fetchLists = async () => {\n    setIsLoading(true);\n    try {\n      const [listsResponse, articleListsResponse] = await Promise.all([\n        fetch(\"/api/lists\"),\n        fetch(`/api/articles/${articleId}/lists`)\n      ]);\n      \n      if (listsResponse.ok) {\n        const data = await listsResponse.json();\n        setLists(data);\n      }\n      \n      if (articleListsResponse.ok) {\n        const data = await articleListsResponse.json();\n        setArticleLists(new Set(data.listIds || []));\n      }\n    } catch (error) {\n      console.error(\"Error fetching lists:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleToggleList = async (listId: string) => {\n    try {\n      const isInList = articleLists.has(listId);\n      const url = isInList \n        ? `/api/lists/${listId}/items?articleId=${articleId}`\n        : `/api/lists/${listId}/items`;\n      \n      const response = await fetch(url, {\n        method: isInList ? \"DELETE\" : \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: isInList ? undefined : JSON.stringify({ articleId }),\n      });\n\n      if (response.ok) {\n        if (isInList) {\n          setArticleLists(prev => {\n            const newSet = new Set(prev);\n            newSet.delete(listId);\n            return newSet;\n          });\n        } else {\n          setArticleLists(prev => new Set([...prev, listId]));\n        }\n      }\n    } catch (error) {\n      console.error(\"Error toggling list:\", error);\n    }\n  };\n\n  const handleCreateNewList = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newListName.trim()) return;\n\n    try {\n      const response = await fetch(\"/api/lists\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ listName: newListName }),\n      });\n\n      if (response.ok) {\n        const newList = await response.json();\n        await handleToggleList(newList.listId);\n        setNewListName(\"\");\n        setShowNewListForm(false);\n        fetchLists();\n      }\n    } catch (error) {\n      console.error(\"Error creating list:\", error);\n    }\n  };\n\n  if (!isSignedIn) {\n    return null;\n  }\n\n  return (\n    <>\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 flex items-center justify-center z-50 p-4\" \n          style={{ backgroundColor: 'rgba(0, 0, 0, 0.3)' }}\n        >\n          <div className=\"bg-white rounded-lg max-w-md w-full max-h-[80vh] overflow-hidden flex flex-col\">\n            <div className=\"p-4 border-b\">\n              <h2 className=\"text-xl font-semibold\">Manage Lists</h2>\n              <p className=\"text-sm text-gray-600 mt-1\">Add &ldquo;{articleTitle}&rdquo; to your lists</p>\n            </div>\n            \n            <div className=\"flex-1 overflow-y-auto p-4\">\n              {isLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <Loader2 className=\"h-6 w-6 animate-spin text-gray-500\" />\n                </div>\n              ) : (\n                <>\n                  <div className=\"space-y-1\">\n                    {lists.map((list) => (\n                      <button\n                        key={list.listId}\n                        onClick={() => handleToggleList(list.listId)}\n                        className=\"w-full text-left p-2 rounded-lg border hover:bg-gray-50 flex items-center justify-between group\"\n                      >\n                        <div>\n                          <p className=\"font-medium text-sm\">{list.listName}</p>\n                          {list.description && (\n                            <p className=\"text-xs text-gray-600\">{list.description}</p>\n                          )}\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          {articleLists.has(list.listId) ? (\n                            <>\n                              <Check className=\"h-4 w-4 text-green-600\" />\n                              <X className=\"h-4 w-4 text-red-600 opacity-0 group-hover:opacity-100 transition-opacity\" />\n                            </>\n                          ) : (\n                            <Plus className=\"h-4 w-4 text-gray-400 group-hover:text-gray-600\" />\n                          )}\n                        </div>\n                      </button>\n                    ))}\n                  </div>\n\n                  {!showNewListForm ? (\n                    <button\n                      onClick={() => setShowNewListForm(true)}\n                      className=\"w-full mt-3 p-2 rounded-lg border-2 border-dashed border-gray-300 hover:border-gray-400 flex items-center justify-center text-gray-600 hover:text-gray-700\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Create new list\n                    </button>\n                  ) : (\n                    <form onSubmit={handleCreateNewList} className=\"mt-3 p-2 border rounded-lg\">\n                      <input\n                        type=\"text\"\n                        value={newListName}\n                        onChange={(e) => setNewListName(e.target.value)}\n                        placeholder=\"List name\"\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm\"\n                        autoFocus\n                      />\n                      <div className=\"flex gap-2 mt-2\">\n                        <button\n                          type=\"submit\"\n                          className=\"flex-1 px-3 py-1.5 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm\"\n                        >\n                          Create\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={() => {\n                            setShowNewListForm(false);\n                            setNewListName(\"\");\n                          }}\n                          className=\"flex-1 px-3 py-1.5 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 text-sm\"\n                        >\n                          Cancel\n                        </button>\n                      </div>\n                    </form>\n                  )}\n                </>\n              )}\n            </div>\n            \n            <div className=\"p-4 border-t space-y-2\">\n              <Link\n                href=\"/dashboard/lists\"\n                onClick={onClose}\n                className=\"block w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-center text-sm\"\n              >\n                Manage All Lists\n              </Link>\n              <button\n                onClick={onClose}\n                className=\"w-full px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 text-sm\"\n              >\n                Done\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\ninterface SuggestionModalProps {\n  articleId: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface FlagModalProps {\n  articleId: string;\n  isFlagged: boolean;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nfunction FlagModal({ articleId, isOpen, onClose }: FlagModalProps) {\n  const { isSignedIn } = useUser();\n  const [loading, setLoading] = useState(false);\n  const [flagReason, setFlagReason] = useState(\"\");\n\n  async function submitFlag() {\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/articles/${articleId}/flag`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ flagReason }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to flag content\");\n      \n      onClose();\n      setFlagReason(\"\");\n      // Refresh the page to show the flagged status\n      window.location.reload();\n    } catch (error) {\n      console.error(\"Error flagging content:\", error);\n      alert(\"Failed to flag content\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  if (!isOpen || !isSignedIn) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg max-w-md w-full p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Flag Content</h3>\n        <p className=\"text-gray-600 mb-4\">\n          Please provide a reason for flagging this content:\n        </p>\n        <textarea\n          value={flagReason}\n          onChange={(e) => setFlagReason(e.target.value)}\n          placeholder=\"Explain why this content is inappropriate...\"\n          className=\"w-full rounded-md border border-gray-300 px-3 py-2 mb-4\"\n          rows={4}\n          required\n        />\n        <div className=\"flex justify-end gap-2\">\n          <button\n            onClick={() => {\n              onClose();\n              setFlagReason(\"\");\n            }}\n            className=\"px-4 py-2 text-gray-700 hover:text-gray-900\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={submitFlag}\n            disabled={loading || !flagReason.trim()}\n            className=\"px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 disabled:opacity-50\"\n          >\n            {loading ? \"Submitting...\" : \"Submit Flag\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction SuggestionModal({ articleId, isOpen, onClose }: SuggestionModalProps) {\n  const { user } = useUser();\n  const { isSubscribed, isLoadingSubscription } = useSubscription();\n  const [suggestionType, setSuggestionType] = useState('');\n  const [suggestionDetails, setSuggestionDetails] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [result, setResult] = useState<{ success: boolean; message: string } | null>(null);\n  const [hasFreshResponse, setHasFreshResponse] = useState(false);\n\n  const suggestionTypes = [\n    { value: 'CONTENT_ADDITION', label: 'Add missing content' },\n    { value: 'CONTENT_CORRECTION', label: 'Correct an error' },\n    { value: 'GRAMMAR_SPELLING', label: 'Fix grammar/spelling' },\n    { value: 'CODE_IMPROVEMENT', label: 'Improve code example' },\n    { value: 'CLARITY_IMPROVEMENT', label: 'Improve clarity' },\n    { value: 'EXAMPLE_ADDITION', label: 'Add an example' },\n    { value: 'LINK_UPDATE', label: 'Update a link' },\n    { value: 'OTHER', label: 'Other improvement' },\n  ];\n\n  const fullReset = () => {\n    setSuggestionType('');\n    setSuggestionDetails('');\n    setResult(null);\n    setHasFreshResponse(false);\n    setIsSubmitting(false);\n  };\n\n  const handleClose = () => {\n    onClose();\n    fullReset();\n  };\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n\n    if (!suggestionType || !suggestionDetails.trim()) {\n      setResult({ success: false, message: 'Please select a suggestion type and provide details.' });\n      setHasFreshResponse(true);\n      setIsSubmitting(false);\n      return;\n    }\n    setResult(null);\n\n    try {\n      const response = await fetch(`/api/articles/${articleId}/suggest`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ suggestionType, suggestionDetails }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        if (data.suggestion && typeof data.suggestion.isApproved === 'boolean') {\n          setResult({\n            success: data.suggestion.isApproved,\n            message: data.suggestion.isApproved \n              ? `Great! Your suggestion has been approved and applied. You now have ${data.approvedSuggestionsCount} approved suggestions! Please refresh your browser to see the changes.`\n              : data.message || data.suggestion.rejectionReason || 'Your suggestion was not approved at this time. It has been saved for review.',\n          });\n        } else {\n          setResult({ success: false, message: data.message || 'Received an unexpected response from the server.' });\n        }\n      } else {\n        setResult({ success: false, message: data.message || data.error || `Request failed with status ${response.status}.` });\n      }\n      setHasFreshResponse(true);\n\n    } catch (err) {\n      setResult({\n        success: false,\n        message: err instanceof Error ? err.message : 'Failed to submit suggestion',\n      });\n      setHasFreshResponse(true);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (!isOpen || !user) return null;\n\n  return (\n    <div \n      className=\"fixed inset-0 flex items-center justify-center p-4\"\n      style={{ \n        backgroundColor: 'rgba(0, 0, 0, 0.3)', \n        zIndex: 9999\n      }}\n      onClick={(e) => {\n        if (e.target === e.currentTarget) {\n          handleClose();\n        }\n      }}\n    >\n      <div \n        className=\"bg-white rounded-lg max-w-md w-full max-h-[80vh] overflow-hidden flex flex-col shadow-xl\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"p-6 border-b flex justify-between items-center\">\n          <div>\n            <h2 className=\"text-xl font-semibold\">Suggest an Improvement</h2>\n            <p className=\"text-sm text-gray-600 mt-1\">\n              Your feedback helps us improve our content.\n            </p>\n          </div>\n          <button\n            onClick={handleClose}\n            className=\"text-gray-400 hover:text-gray-600\"\n          >\n            <X className=\"h-6 w-6\" />\n          </button>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto p-6\">\n          {!isSubscribed && !isLoadingSubscription ? (\n            <div className=\"text-center\">\n              <CreditCard className=\"mx-auto h-12 w-12 text-blue-600 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                Subscription Required\n              </h3>\n              <p className=\"text-gray-600 mb-4\">\n                Article suggestions are available to subscribed users. Upgrade your plan to suggest improvements.\n              </p>\n              <div className=\"flex gap-2\">\n                <button\n                  onClick={handleClose}\n                  className=\"flex-1 px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300\"\n                >\n                  Cancel\n                </button>\n                <Link href=\"/pricing\" className=\"flex-1\">\n                  <button className=\"w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\">\n                    View Plans\n                  </button>\n                </Link>\n              </div>\n            </div>\n          ) : hasFreshResponse && result ? (\n            <div>\n              <div className={`p-3 rounded-md text-sm mb-4 ${result.success ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>\n                {result.message}\n              </div>\n              <button\n                onClick={handleClose}\n                className=\"w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n              >\n                OK\n              </button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <div>\n                <label htmlFor=\"suggestion-type\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Type\n                </label>\n                <select\n                  id=\"suggestion-type\"\n                  value={suggestionType}\n                  onChange={(e) => setSuggestionType(e.target.value)}\n                  disabled={isSubmitting}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  <option value=\"\">Select improvement type</option>\n                  {suggestionTypes.map((type) => (\n                    <option key={type.value} value={type.value}>\n                      {type.label}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              \n              <div>\n                <label htmlFor=\"suggestion-details\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Details\n                </label>\n                <textarea\n                  id=\"suggestion-details\"\n                  placeholder=\"Please provide specific details about your suggestion...\"\n                  value={suggestionDetails}\n                  onChange={(e) => setSuggestionDetails(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 min-h-[120px]\"\n                  disabled={isSubmitting}\n                />\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <button\n                  onClick={handleClose}\n                  disabled={isSubmitting}\n                  className=\"flex-1 px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 disabled:opacity-50\"\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={handleSubmit}\n                  disabled={isSubmitting}\n                  className=\"flex-1 px-4 py-2 bg-orange-600 text-white rounded-md hover:bg-orange-700 disabled:bg-gray-400\"\n                >\n                  {isSubmitting ? 'Submitting...' : 'Submit Suggestion'}\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/articles/[slug]/interactive-examples.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[382,385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[382,385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport { Loader2, RefreshCw, CheckCircle, XCircle, Lightbulb, MessageCircle } from \"lucide-react\";\n\ninterface Option {\n  id: string;\n  text: string;\n}\n\ninterface Example {\n  exampleId: string;\n  questionType: \"MULTIPLE_CHOICE\" | \"TEXT_INPUT\" | \"COMMAND_LINE\";\n  scenarioOrQuestionText: string;\n  optionsJson: any;\n  correctAnswerDescription: string;\n}\n\ninterface InteractiveExamplesProps {\n  articleId: string;\n  onFocusedExampleChange?: (exampleId: string | null) => void;\n}\n\nexport default function InteractiveExamples({ articleId, onFocusedExampleChange }: InteractiveExamplesProps) {\n  const [examples, setExamples] = useState<Example[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [generating, setGenerating] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [answers, setAnswers] = useState<Record<string, string>>({});\n  const [submissions, setSubmissions] = useState<Record<string, {\n    isCorrect: boolean;\n    feedback: string;\n    correctAnswerDescription: string;\n  }>>({});\n  const [submitting, setSubmitting] = useState<string | null>(null);\n  const [focusedExampleId, setFocusedExampleId] = useState<string | undefined>(undefined);\n\n  // Notify parent of focused example changes\n  useEffect(() => {\n    onFocusedExampleChange?.(focusedExampleId || null);\n  }, [focusedExampleId, onFocusedExampleChange]);\n\n  const fetchExamples = useCallback(async () => {\n    try {\n      const response = await fetch(`/api/articles/${articleId}/examples`);\n      if (!response.ok) throw new Error(\"Failed to fetch examples\");\n      const data = await response.json();\n      console.log(\"Fetched examples:\", data);\n      setExamples(data);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"An error occurred\");\n    } finally {\n      setLoading(false);\n    }\n  }, [articleId]);\n\n  useEffect(() => {\n    fetchExamples();\n  }, [fetchExamples]);\n\n  const generateExamples = async () => {\n    setGenerating(true);\n    setError(null);\n\n    try {\n      const response = await fetch(`/api/articles/${articleId}/examples`, {\n        method: \"POST\",\n      });\n      if (!response.ok) throw new Error(\"Failed to generate examples\");\n      const data = await response.json();\n      setExamples([...examples, ...data.examples]);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"An error occurred\");\n    } finally {\n      setGenerating(false);\n    }\n  };\n\n  const submitAnswer = async (exampleId: string) => {\n    const userAnswer = answers[exampleId];\n    if (!userAnswer || userAnswer.trim().length === 0) return;\n\n    setSubmitting(exampleId);\n    setError(null);\n\n    try {\n      const response = await fetch(`/api/examples/${exampleId}/submit`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userAnswer }),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to submit answer\");\n\n      const data = await response.json();\n      setSubmissions({\n        ...submissions,\n        [exampleId]: {\n          isCorrect: data.isCorrect,\n          feedback: data.feedback,\n          correctAnswerDescription: data.correctAnswerDescription,\n        },\n      });\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"An error occurred\");\n    } finally {\n      setSubmitting(null);\n    }\n  };\n\n  const renderExample = (example: Example) => {\n    const submitted = submissions[example.exampleId];\n    const isSubmitting = submitting === example.exampleId;\n\n    return (\n      <div key={example.exampleId} className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n        <div className=\"mb-4\">\n          <div className=\"flex items-start justify-between mb-2\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              {example.questionType === \"MULTIPLE_CHOICE\" && \"Multiple Choice\"}\n              {example.questionType === \"TEXT_INPUT\" && \"Text Answer\"}\n              {example.questionType === \"COMMAND_LINE\" && \"Command Line\"}\n            </h3>\n            <div className=\"flex items-center gap-2\">\n              {submitted && (\n                <div className=\"flex items-center\">\n                  {submitted.isCorrect ? (\n                    <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                  ) : (\n                    <XCircle className=\"h-5 w-5 text-red-600\" />\n                  )}\n                </div>\n              )}\n              <button\n                onClick={() => setFocusedExampleId(focusedExampleId === example.exampleId ? undefined : example.exampleId)}\n                className=\"text-gray-500 hover:text-gray-700 transition-colors\"\n                title=\"Ask AI about this question\"\n              >\n                <MessageCircle className=\"h-5 w-5\" />\n              </button>\n            </div>\n          </div>\n          <p className=\"text-gray-700\">{example.scenarioOrQuestionText}</p>\n        </div>\n\n        {example.questionType === \"MULTIPLE_CHOICE\" && example.optionsJson && (\n          <div className=\"space-y-2 mb-4\">\n            {(() => {\n              // Parse optionsJson if it's a string or ensure it's properly formatted\n              let options: Option[] = [];\n              try {\n                if (typeof example.optionsJson === 'string') {\n                  options = JSON.parse(example.optionsJson);\n                } else if (Array.isArray(example.optionsJson)) {\n                  options = example.optionsJson;\n                } else {\n                  console.error('Invalid optionsJson format:', example.optionsJson);\n                  return null;\n                }\n              } catch (error) {\n                console.error('Error parsing optionsJson:', error);\n                return null;\n              }\n\n              return options.map((option) => (\n                <label\n                  key={option.id}\n                  className=\"flex items-center space-x-3 p-3 rounded-lg border border-gray-200 hover:bg-gray-50 cursor-pointer\"\n                >\n                  <input\n                    type=\"radio\"\n                    name={`question-${example.exampleId}`}\n                    value={option.text}\n                    onChange={(e) => setAnswers({ ...answers, [example.exampleId]: e.target.value })}\n                    disabled={!!submitted}\n                    checked={answers[example.exampleId] === option.text}\n                    className=\"h-4 w-4 text-blue-600\"\n                  />\n                  <span className=\"text-gray-700\">{option.text}</span>\n                </label>\n              ));\n            })()}\n          </div>\n        )}\n\n        {(example.questionType === \"TEXT_INPUT\" || example.questionType === \"COMMAND_LINE\") && (\n          <div className=\"mb-4\">\n            <input\n              type=\"text\"\n              value={answers[example.exampleId] || \"\"}\n              onChange={(e) => setAnswers({ ...answers, [example.exampleId]: e.target.value })}\n              disabled={!!submitted}\n              placeholder={example.questionType === \"COMMAND_LINE\" ? \"Enter command...\" : \"Enter your answer...\"}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono\"\n            />\n          </div>\n        )}\n\n        {!submitted && (\n          <button\n            onClick={() => submitAnswer(example.exampleId)}\n            disabled={!answers[example.exampleId] || isSubmitting}\n            className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            {isSubmitting ? (\n              <>\n                <Loader2 className=\"animate-spin h-4 w-4 mr-2\" />\n                Checking...\n              </>\n            ) : (\n              \"Submit Answer\"\n            )}\n          </button>\n        )}\n\n        {submitted && (\n          <div className=\"mt-4 space-y-3\">\n            <div className={`p-4 rounded-lg ${submitted.isCorrect ? \"bg-green-50\" : \"bg-red-50\"}`}>\n              <p className={`text-sm ${submitted.isCorrect ? \"text-green-800\" : \"text-red-800\"}`}>\n                {submitted.feedback}\n              </p>\n            </div>\n            <div className=\"p-4 bg-blue-50 rounded-lg\">\n              <div className=\"flex items-start\">\n                <Lightbulb className=\"h-5 w-5 text-blue-600 mr-2 flex-shrink-0 mt-0.5\" />\n                <div>\n                  <p className=\"text-sm font-medium text-blue-900 mb-1\">Explanation:</p>\n                  <p className=\"text-sm text-blue-800\">{submitted.correctAnswerDescription}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center py-8\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-blue-600\" />\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <section className=\"border-t pt-12\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-bold text-gray-900\">Test Your Knowledge</h2>\n          <button\n            onClick={generateExamples}\n            disabled={generating}\n            className=\"inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50\"\n          >\n            {generating ? (\n              <>\n                <Loader2 className=\"animate-spin h-4 w-4 mr-2\" />\n                Generating...\n              </>\n            ) : (\n              <>\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Generate More Examples\n              </>\n            )}\n          </button>\n        </div>\n\n      {error && (\n        <div className=\"mb-6 bg-red-50 border border-red-200 rounded-lg p-4\">\n          <p className=\"text-red-800\">Error: {error}</p>\n        </div>\n      )}\n\n      {examples.length === 0 ? (\n        <div className=\"text-center py-12 bg-gray-50 rounded-lg\">\n          <p className=\"text-gray-600 mb-4\">No examples yet. Generate some to test your knowledge!</p>\n          <button\n            onClick={generateExamples}\n            disabled={generating}\n            className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700\"\n          >\n            Generate Examples\n          </button>\n        </div>\n      ) : (\n        <div className=\"space-y-6\">\n          {examples.map(renderExample)}\n        </div>\n      )}\n    </section>\n    </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/articles/[slug]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/categories/[categoryId]/article-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/categories/[categoryId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/categories/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/dashboard/achievements/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/dashboard/articles/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":117,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3213,3272],"text":"\n          A complete list of articles you&apos;ve read\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3213,3272],"text":"\n          A complete list of articles you&lsquo;ve read\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3213,3272],"text":"\n          A complete list of articles you&#39;ve read\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3213,3272],"text":"\n          A complete list of articles you&rsquo;ve read\n        "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { auth } from \"@clerk/nextjs/server\";\nimport { redirect } from \"next/navigation\";\nimport { BookOpen, Calendar, ArrowLeft } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { prisma } from \"@/lib/prisma\";\n\ninterface ArticleData {\n  id: string;\n  title: string;\n  slug: string;\n  lastAccessed: Date;\n  quizzesTaken: number;\n  correctAnswers: number;\n  totalQuestions: number;\n  hasQuizResponses: boolean;\n}\n\nasync function getUserArticles(userId: string): Promise<ArticleData[]> {\n  try {\n    // Get all viewed articles\n    const [viewedArticles, userResponses] = await Promise.all([\n      // Get all articles the user has viewed\n      prisma.userArticleView.findMany({\n        where: { clerkUserId: userId },\n        include: {\n          article: {\n            select: {\n              articleId: true,\n              articleTitle: true,\n              articleSlug: true\n            }\n          }\n        },\n        orderBy: { viewedAt: 'desc' }\n      }),\n      // Get all user responses for quiz stats\n      prisma.userResponse.findMany({\n        where: { clerkUserId: userId },\n        include: {\n          example: {\n            select: {\n              articleId: true\n            }\n          }\n        }\n      })\n    ]);\n\n    // Group responses by article for stats\n    const responseMap = new Map<string, { correctAnswers: number; totalQuestions: number }>();\n    \n    userResponses.forEach(response => {\n      const articleId = response.example.articleId;\n      \n      if (!responseMap.has(articleId)) {\n        responseMap.set(articleId, {\n          correctAnswers: 0,\n          totalQuestions: 0\n        });\n      }\n      \n      const stats = responseMap.get(articleId)!;\n      stats.totalQuestions++;\n      if (response.isCorrect) {\n        stats.correctAnswers++;\n      }\n    });\n\n    // Create article data combining views and quiz stats\n    const articles = viewedArticles.map(view => {\n      const quizStats = responseMap.get(view.article.articleId) || {\n        correctAnswers: 0,\n        totalQuestions: 0\n      };\n      \n      return {\n        id: view.article.articleId,\n        title: view.article.articleTitle,\n        slug: view.article.articleSlug,\n        lastAccessed: view.viewedAt,\n        quizzesTaken: quizStats.totalQuestions,\n        correctAnswers: quizStats.correctAnswers,\n        totalQuestions: quizStats.totalQuestions,\n        hasQuizResponses: quizStats.totalQuestions > 0\n      };\n    });\n\n    return articles;\n      \n  } catch (error) {\n    console.error('Error fetching user articles:', error);\n    return [];\n  }\n}\n\nexport default async function UserArticlesPage() {\n  const { userId } = await auth();\n\n  if (!userId) {\n    redirect(\"/sign-in\");\n  }\n\n  const articles = await getUserArticles(userId);\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n      <div className=\"mb-8\">\n        <Link \n          href=\"/dashboard\" \n          className=\"inline-flex items-center text-blue-600 hover:text-blue-700 mb-4\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Dashboard\n        </Link>\n        <h1 className=\"text-3xl font-bold text-gray-900\">Your Articles</h1>\n        <p className=\"text-gray-600 mt-2\">\n          A complete list of articles you've read\n        </p>\n      </div>\n\n      {articles.length > 0 ? (\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">\n              {articles.length} Articles Read\n            </h2>\n          </div>\n          <div className=\"divide-y divide-gray-200\">\n            {articles.map((article) => {\n              const successRate = article.totalQuestions > 0 \n                ? Math.round((article.correctAnswers / article.totalQuestions) * 100)\n                : 0;\n                \n              return (\n                <div key={article.id} className=\"p-6 hover:bg-gray-50\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-start space-x-4\">\n                        <BookOpen className=\"h-6 w-6 text-blue-600 mt-1\" />\n                        <div>\n                          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                            {article.title}\n                          </h3>\n                          <div className=\"flex items-center space-x-6 text-sm text-gray-500 mb-3\">\n                            <div className=\"flex items-center\">\n                              <Calendar className=\"h-4 w-4 mr-1\" />\n                              Last accessed: {article.lastAccessed.toLocaleDateString()}\n                            </div>\n                          </div>\n                          {article.hasQuizResponses ? (\n                            <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                              <div>\n                                <span className=\"font-medium text-gray-900\">{article.totalQuestions}</span>\n                                <span className=\"text-gray-500 ml-1\">Questions Answered</span>\n                              </div>\n                              <div>\n                                <span className=\"font-medium text-gray-900\">{article.correctAnswers}</span>\n                                <span className=\"text-gray-500 ml-1\">Correct</span>\n                              </div>\n                              <div>\n                                <span className={`font-medium ${successRate >= 70 ? 'text-green-600' : successRate >= 50 ? 'text-yellow-600' : 'text-red-600'}`}>\n                                  {successRate}%\n                                </span>\n                                <span className=\"text-gray-500 ml-1\">Success Rate</span>\n                              </div>\n                            </div>\n                          ) : (\n                            <div className=\"text-sm text-gray-500\">\n                              No quiz questions answered yet\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <Link\n                      href={`/articles/${article.slug}`}\n                      className=\"ml-4 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors text-sm font-medium\"\n                    >\n                      Read Article\n                    </Link>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      ) : (\n        <div className=\"text-center py-12\">\n          <BookOpen className=\"mx-auto h-12 w-12 text-gray-400\" />\n          <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No articles read yet</h3>\n          <p className=\"mt-1 text-sm text-gray-500\">\n            Start exploring articles to see your reading history here.\n          </p>\n          <div className=\"mt-6\">\n            <Link\n              href=\"/categories\"\n              className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700\"\n            >\n              Browse Articles\n            </Link>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/dashboard/liked/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":53,"column":23,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1355,1413],"text":"\n          Articles you&apos;ve liked for quick access\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1355,1413],"text":"\n          Articles you&lsquo;ve liked for quick access\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1355,1413],"text":"\n          Articles you&#39;ve liked for quick access\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1355,1413],"text":"\n          Articles you&rsquo;ve liked for quick access\n        "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { Heart, Loader2, BookOpen } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface LikedArticle {\n  articleId: string;\n  articleTitle: string;\n  articleSlug: string;\n  likedAt: string;\n  category: {\n    categoryId: string;\n    categoryName: string;\n  } | null;\n  _count: {\n    comments: number;\n    likes: number;\n  };\n}\n\nexport default function LikedArticlesPage() {\n  const [articles, setArticles] = useState<LikedArticle[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    fetchLikedArticles();\n  }, []);\n\n  const fetchLikedArticles = async () => {\n    try {\n      const response = await fetch(\"/api/articles/liked\");\n      if (response.ok) {\n        const data = await response.json();\n        setArticles(data);\n      }\n    } catch (error) {\n      console.error(\"Error fetching liked articles:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 flex items-center gap-3\">\n          <Heart className=\"h-8 w-8 text-red-600 fill-current\" />\n          Liked Articles\n        </h1>\n        <p className=\"mt-2 text-gray-600\">\n          Articles you've liked for quick access\n        </p>\n      </div>\n\n      {isLoading ? (\n        <div className=\"flex items-center justify-center py-12\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-gray-500\" />\n        </div>\n      ) : articles.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <Heart className=\"mx-auto h-12 w-12 text-gray-400\" />\n          <h3 className=\"mt-4 text-lg font-medium text-gray-900\">\n            No liked articles yet\n          </h3>\n          <p className=\"mt-2 text-gray-600\">\n            Start exploring and like articles to see them here\n          </p>\n          <Link\n            href=\"/\"\n            className=\"mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700\"\n          >\n            Browse Articles\n          </Link>\n        </div>\n      ) : (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {articles.map((article) => (\n            <Link\n              key={article.articleId}\n              href={`/articles/${article.articleSlug}`}\n              className=\"block bg-white rounded-lg shadow hover:shadow-md transition-shadow p-6\"\n            >\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2 line-clamp-2\">\n                {article.articleTitle}\n              </h3>\n              \n              <div className=\"flex items-center text-sm text-gray-500 mb-3\">\n                <BookOpen className=\"h-4 w-4 mr-1\" />\n                <span>{article.category?.categoryName || \"Uncategorized\"}</span>\n              </div>\n\n              <div className=\"flex items-center justify-between text-sm text-gray-500\">\n                <div className=\"flex items-center gap-4\">\n                  <span className=\"flex items-center gap-1\">\n                    <Heart className=\"h-4 w-4\" />\n                    {article._count.likes}\n                  </span>\n                  <span>{article._count.comments} comments</span>\n                </div>\n                <span className=\"text-xs\">\n                  {formatDistanceToNow(new Date(article.likedAt), { addSuffix: true })}\n                </span>\n              </div>\n            </Link>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/dashboard/lists/[listId]/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchList'. Either include it or remove the dependency array.","line":49,"column":6,"nodeType":"ArrayExpression","endLine":49,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [fetchList, listId]","fix":{"range":[1178,1186],"text":"[fetchList, listId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, use } from \"react\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/navigation\";\nimport { ArrowLeft, BookOpen, Loader2, Trash2, StickyNote, Globe, Lock } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface CuratedList {\n  listId: string;\n  listName: string;\n  description: string | null;\n  isPublic: boolean;\n  items: {\n    itemId: string;\n    order: number;\n    notes: string | null;\n    addedAt: string;\n    article: {\n      articleId: string;\n      articleTitle: string;\n      articleSlug: string;\n      category: {\n        categoryId: string;\n        categoryName: string;\n      } | null;\n    };\n  }[];\n  user: {\n    username: string | null;\n    firstName: string | null;\n    lastName: string | null;\n    imageUrl: string | null;\n  };\n}\n\ninterface PageProps {\n  params: Promise<{ listId: string }>;\n}\n\nexport default function ListDetailPage({ params }: PageProps) {\n  const { listId } = use(params);\n  const [list, setList] = useState<CuratedList | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const router = useRouter();\n\n  useEffect(() => {\n    fetchList();\n  }, [listId]);\n\n  const fetchList = async () => {\n    try {\n      const response = await fetch(`/api/lists/${listId}`);\n      if (response.ok) {\n        const data = await response.json();\n        setList(data);\n      } else if (response.status === 404) {\n        router.push(\"/dashboard/lists\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching list:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRemoveItem = async (articleId: string) => {\n    if (!confirm(\"Remove this article from the list?\")) return;\n\n    try {\n      const response = await fetch(`/api/lists/${listId}/items?articleId=${articleId}`, {\n        method: \"DELETE\",\n      });\n\n      if (response.ok) {\n        fetchList();\n      }\n    } catch (error) {\n      console.error(\"Error removing item:\", error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-gray-500\" />\n      </div>\n    );\n  }\n\n  if (!list) {\n    return null;\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <Link\n          href=\"/dashboard/lists\"\n          className=\"inline-flex items-center text-sm text-gray-600 hover:text-gray-900 mb-4\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-1\" />\n          Back to lists\n        </Link>\n        \n        <div className=\"flex items-start justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">{list.listName}</h1>\n            {list.description && (\n              <p className=\"mt-2 text-gray-600\">{list.description}</p>\n            )}\n            <div className=\"mt-2 flex items-center gap-4 text-sm text-gray-500\">\n              <span className=\"flex items-center gap-1\">\n                {list.isPublic ? <Globe className=\"h-4 w-4\" /> : <Lock className=\"h-4 w-4\" />}\n                {list.isPublic ? \"Public\" : \"Private\"}\n              </span>\n              <span>{list.items.length} articles</span>\n              {list.user.username && (\n                <span>by {list.user.username}</span>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {list.items.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <BookOpen className=\"mx-auto h-12 w-12 text-gray-400\" />\n          <h3 className=\"mt-4 text-lg font-medium text-gray-900\">\n            No articles in this list yet\n          </h3>\n          <p className=\"mt-2 text-gray-600\">\n            Add articles to this list from any article page\n          </p>\n          <Link\n            href=\"/\"\n            className=\"mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700\"\n          >\n            Browse Articles\n          </Link>\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {list.items\n            .sort((a, b) => a.order - b.order)\n            .map((item) => (\n              <div\n                key={item.itemId}\n                className=\"bg-white rounded-lg shadow hover:shadow-md transition-shadow p-6\"\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <Link\n                      href={`/articles/${item.article.articleSlug}`}\n                      className=\"text-lg font-semibold text-gray-900 hover:text-blue-600\"\n                    >\n                      {item.article.articleTitle}\n                    </Link>\n                    \n                    <div className=\"mt-1 flex items-center text-sm text-gray-500\">\n                      <BookOpen className=\"h-4 w-4 mr-1\" />\n                      <span>{item.article.category?.categoryName || \"Uncategorized\"}</span>\n                      <span className=\"mx-2\">•</span>\n                      <span>Added {formatDistanceToNow(new Date(item.addedAt), { addSuffix: true })}</span>\n                    </div>\n\n                    {item.notes && (\n                      <div className=\"mt-3 flex items-start gap-2\">\n                        <StickyNote className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n                        <p className=\"text-sm text-gray-600\">{item.notes}</p>\n                      </div>\n                    )}\n                  </div>\n\n                  <button\n                    onClick={() => handleRemoveItem(item.article.articleId)}\n                    className=\"ml-4 text-red-600 hover:text-red-800\"\n                    title=\"Remove from list\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </button>\n                </div>\n              </div>\n            ))}\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/dashboard/lists/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/dashboard/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Role' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":195,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":195,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { auth } from \"@clerk/nextjs/server\";\nimport { redirect } from \"next/navigation\";\nimport { BookOpen, Trophy, Clock, TrendingUp, CheckCircle, XCircle, Heart, BookmarkIcon } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { prisma } from \"@/lib/prisma\";\nimport { SubscriptionStatus } from \"@/components/subscription-status\";\nimport { Role } from \"@prisma/client\";\n\ninterface DashboardStats {\n  articlesRead: number;\n  quizzesTaken: number;\n  correctAnswers: number;\n  learningStreak: number;\n  recentActivity: Array<{\n    id: string;\n    type: string;\n    description: string;\n    articleTitle: string;\n    articleSlug: string;\n    timestamp: Date;\n    isCorrect: boolean;\n  }>;\n  recentArticles: Array<{\n    id: string;\n    title: string;\n    slug: string;\n    lastAccessed: Date;\n  }>;\n}\n\nasync function getDashboardStats(userId: string): Promise<DashboardStats> {\n  try {\n    // Get user stats\n    const [\n      totalResponses,\n      correctResponses,\n      articlesViewed,\n      recentActivity,\n      allUserArticles,\n      recentViews\n    ] = await Promise.all([\n      // Total quiz responses\n      prisma.userResponse.count({\n        where: { clerkUserId: userId }\n      }),\n      \n      // Correct responses\n      prisma.userResponse.count({\n        where: { \n          clerkUserId: userId,\n          isCorrect: true \n        }\n      }),\n      \n      // Count articles viewed (from UserArticleView table)\n      prisma.userArticleView.count({\n        where: { clerkUserId: userId }\n      }),\n      \n      // Recent activity (last 10 responses)\n      prisma.userResponse.findMany({\n        where: { clerkUserId: userId },\n        include: {\n          example: {\n            include: {\n              article: {\n                select: {\n                  articleTitle: true,\n                  articleSlug: true\n                }\n              }\n            }\n          }\n        },\n        orderBy: { submittedAt: 'desc' },\n        take: 10\n      }),\n      \n      // Recent articles (unique articles with latest access time)\n      prisma.userResponse.findMany({\n        where: { clerkUserId: userId },\n        include: {\n          example: {\n            include: {\n              article: {\n                select: {\n                  articleId: true,\n                  articleTitle: true,\n                  articleSlug: true\n                }\n              }\n            }\n          }\n        },\n        orderBy: { submittedAt: 'desc' }\n      }),\n      \n      // Recent article views for streak calculation\n      prisma.userArticleView.findMany({\n        where: { clerkUserId: userId },\n        orderBy: { viewedAt: 'desc' },\n        take: 30\n      })\n    ]);\n\n    // Calculate learning streak (simplified - consecutive days with activity)\n    const today = new Date();\n    const recentDays = [];\n    for (let i = 0; i < 30; i++) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n      recentDays.push({\n        date: date.toDateString(),\n        hasActivity: false\n      });\n    }\n\n    // Mark days with article views\n    recentViews.forEach(view => {\n      const viewDate = view.viewedAt.toDateString();\n      const dayIndex = recentDays.findIndex(day => day.date === viewDate);\n      if (dayIndex !== -1) {\n        recentDays[dayIndex].hasActivity = true;\n      }\n    });\n\n    // Calculate streak from today backwards\n    let learningStreak = 0;\n    for (const day of recentDays) {\n      if (day.hasActivity) {\n        learningStreak++;\n      } else {\n        break;\n      }\n    }\n\n    // Format recent activity for display\n    const formattedActivity = recentActivity.map(response => ({\n      id: response.responseId,\n      type: response.isCorrect ? 'correct_answer' : 'incorrect_answer',\n      description: `${response.isCorrect ? 'Correctly answered' : 'Answered'} question in \"${response.example.article.articleTitle}\"`,\n      articleTitle: response.example.article.articleTitle,\n      articleSlug: response.example.article.articleSlug,\n      timestamp: response.submittedAt,\n      isCorrect: response.isCorrect\n    }));\n\n    // Get unique recent articles with latest access time\n    const articleMap = new Map();\n    allUserArticles.forEach(response => {\n      const article = response.example.article;\n      if (!articleMap.has(article.articleId) || \n          articleMap.get(article.articleId).lastAccessed < response.submittedAt) {\n        articleMap.set(article.articleId, {\n          id: article.articleId,\n          title: article.articleTitle,\n          slug: article.articleSlug,\n          lastAccessed: response.submittedAt\n        });\n      }\n    });\n    \n    const recentArticles = Array.from(articleMap.values())\n      .sort((a, b) => b.lastAccessed.getTime() - a.lastAccessed.getTime())\n      .slice(0, 5);\n\n    return {\n      articlesRead: articlesViewed,\n      quizzesTaken: totalResponses,\n      correctAnswers: correctResponses,\n      learningStreak: learningStreak,\n      recentActivity: formattedActivity,\n      recentArticles: recentArticles\n    };\n  } catch (error) {\n    console.error('Error fetching dashboard stats:', error);\n    return {\n      articlesRead: 0,\n      quizzesTaken: 0,\n      correctAnswers: 0,\n      learningStreak: 0,\n      recentActivity: [],\n      recentArticles: []\n    };\n  }\n}\n\nexport default async function DashboardPage() {\n  const { userId } = await auth();\n\n  if (!userId) {\n    redirect(\"/sign-in\");\n  }\n\n  const [stats, user] = await Promise.all([\n    getDashboardStats(userId),\n    prisma.user.findUnique({\n      where: { clerkUserId: userId },\n      select: { role: true }\n    })\n  ]);\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n      <h1 className=\"text-3xl font-bold text-gray-900 mb-8\">Your Dashboard</h1>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12\">\n        <Link href=\"/dashboard/articles\" className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow cursor-pointer\">\n          <div className=\"flex items-center\">\n            <BookOpen className=\"h-8 w-8 text-blue-600\" />\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Articles Read</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">{stats.articlesRead}</p>\n            </div>\n          </div>\n        </Link>\n\n        <Link href=\"/dashboard/quizzes\" className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow cursor-pointer\">\n          <div className=\"flex items-center\">\n            <Trophy className=\"h-8 w-8 text-yellow-600\" />\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Quizzes Taken</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">{stats.quizzesTaken}</p>\n            </div>\n          </div>\n        </Link>\n\n        <Link href=\"/dashboard/achievements\" className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow cursor-pointer\">\n          <div className=\"flex items-center\">\n            <TrendingUp className=\"h-8 w-8 text-green-600\" />\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Correct Answers</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">{stats.correctAnswers}</p>\n            </div>\n          </div>\n        </Link>\n\n        <Link href=\"/dashboard/streak\" className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow cursor-pointer\">\n          <div className=\"flex items-center\">\n            <Clock className=\"h-8 w-8 text-purple-600\" />\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Learning Streak</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">{stats.learningStreak} days</p>\n            </div>\n          </div>\n        </Link>\n\n        <Link href=\"/dashboard/liked\" className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow cursor-pointer\">\n          <div className=\"flex items-center\">\n            <Heart className=\"h-8 w-8 text-red-600\" />\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Liked Articles</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">View All</p>\n            </div>\n          </div>\n        </Link>\n\n        <Link href=\"/dashboard/lists\" className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow cursor-pointer\">\n          <div className=\"flex items-center\">\n            <BookmarkIcon className=\"h-8 w-8 text-indigo-600\" />\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">My Lists</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">Manage</p>\n            </div>\n          </div>\n        </Link>\n      </div>\n\n      {/* Subscription Status and Recent Activity Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6\">\n        {/* Subscription Status - Takes up 1 column */}\n        <div className=\"lg:col-span-1\">\n          <SubscriptionStatus />\n        </div>\n\n        {/* Recent Quiz Results and Recent Articles - Takes up 2 columns */}\n        <div className=\"lg:col-span-2 grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Recent Quiz Results */}\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Recent Quiz Results</h2>\n        {stats.recentActivity.length > 0 ? (\n          <div className=\"space-y-4\">\n            {stats.recentActivity.map((activity) => (\n              <div key={activity.id} className=\"flex items-center justify-between py-3 border-b border-gray-100 last:border-b-0\">\n                <div className=\"flex items-center space-x-3\">\n                  {activity.isCorrect ? (\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                  ) : (\n                    <XCircle className=\"h-5 w-5 text-red-500\" />\n                  )}\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900\">\n                      {activity.description}\n                    </p>\n                    <p className=\"text-xs text-gray-500\">\n                      {activity.timestamp.toLocaleDateString()} at{' '}\n                      {activity.timestamp.toLocaleTimeString([], { \n                        hour: '2-digit', \n                        minute: '2-digit' \n                      })}\n                    </p>\n                  </div>\n                </div>\n                <Link\n                  href={`/articles/${activity.articleSlug}`}\n                  className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\"\n                >\n                  View Article\n                </Link>\n              </div>\n            ))}\n          </div>\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              <p>No quiz results yet. Start taking quizzes to see your progress here!</p>\n            </div>\n          )}\n        </div>\n\n        {/* Recently Read Articles */}\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Recently Read Articles</h2>\n          {stats.recentArticles.length > 0 ? (\n            <div className=\"space-y-4\">\n              {stats.recentArticles.map((article) => (\n                <div key={article.id} className=\"flex items-center justify-between py-3 border-b border-gray-100 last:border-b-0\">\n                  <div className=\"flex items-center space-x-3\">\n                    <BookOpen className=\"h-5 w-5 text-blue-500\" />\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">\n                        {article.title}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        Last accessed: {article.lastAccessed.toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                  <Link\n                    href={`/articles/${article.slug}`}\n                    className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\"\n                  >\n                    Read Again\n                  </Link>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              <p>No articles read yet. Start reading to see your recent articles here!</p>\n            </div>\n          )}\n        </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/dashboard/quizzes/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":78,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2292,2366],"text":"\n          Complete history of all quiz questions you&apos;ve answered\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2292,2366],"text":"\n          Complete history of all quiz questions you&lsquo;ve answered\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2292,2366],"text":"\n          Complete history of all quiz questions you&#39;ve answered\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2292,2366],"text":"\n          Complete history of all quiz questions you&rsquo;ve answered\n        "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { auth } from \"@clerk/nextjs/server\";\nimport { redirect } from \"next/navigation\";\nimport { Trophy, CheckCircle, XCircle, Calendar, ArrowLeft } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { prisma } from \"@/lib/prisma\";\n\ninterface QuizResult {\n  id: string;\n  question: string;\n  userAnswer: string;\n  correctAnswer: string;\n  isCorrect: boolean;\n  submittedAt: Date;\n  articleTitle: string;\n  articleSlug: string;\n}\n\nasync function getUserQuizResults(userId: string): Promise<QuizResult[]> {\n  try {\n    const userResponses = await prisma.userResponse.findMany({\n      where: { clerkUserId: userId },\n      include: {\n        example: {\n          include: {\n            article: {\n              select: {\n                articleTitle: true,\n                articleSlug: true\n              }\n            }\n          }\n        }\n      },\n      orderBy: { submittedAt: 'desc' }\n    });\n\n    return userResponses.map(response => ({\n      id: response.responseId,\n      question: response.example.question,\n      userAnswer: response.userAnswer,\n      correctAnswer: response.example.correctAnswer,\n      isCorrect: response.isCorrect,\n      submittedAt: response.submittedAt,\n      articleTitle: response.example.article.articleTitle,\n      articleSlug: response.example.article.articleSlug\n    }));\n      \n  } catch (error) {\n    console.error('Error fetching quiz results:', error);\n    return [];\n  }\n}\n\nexport default async function UserQuizzesPage() {\n  const { userId } = await auth();\n\n  if (!userId) {\n    redirect(\"/sign-in\");\n  }\n\n  const quizResults = await getUserQuizResults(userId);\n  const totalQuestions = quizResults.length;\n  const correctAnswers = quizResults.filter(q => q.isCorrect).length;\n  const successRate = totalQuestions > 0 ? Math.round((correctAnswers / totalQuestions) * 100) : 0;\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n      <div className=\"mb-8\">\n        <Link \n          href=\"/dashboard\" \n          className=\"inline-flex items-center text-blue-600 hover:text-blue-700 mb-4\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Dashboard\n        </Link>\n        <h1 className=\"text-3xl font-bold text-gray-900\">Your Quiz Results</h1>\n        <p className=\"text-gray-600 mt-2\">\n          Complete history of all quiz questions you've answered\n        </p>\n      </div>\n\n      {/* Summary Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n          <div className=\"flex items-center\">\n            <Trophy className=\"h-8 w-8 text-yellow-600\" />\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Total Questions</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">{totalQuestions}</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n          <div className=\"flex items-center\">\n            <CheckCircle className=\"h-8 w-8 text-green-600\" />\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Correct Answers</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">{correctAnswers}</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n          <div className=\"flex items-center\">\n            <div className={`h-8 w-8 rounded-full flex items-center justify-center text-white font-bold ${\n              successRate >= 70 ? 'bg-green-600' : successRate >= 50 ? 'bg-yellow-600' : 'bg-red-600'\n            }`}>\n              %\n            </div>\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Success Rate</p>\n              <p className={`text-2xl font-semibold ${\n                successRate >= 70 ? 'text-green-600' : successRate >= 50 ? 'text-yellow-600' : 'text-red-600'\n              }`}>\n                {successRate}%\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quiz Results */}\n      {quizResults.length > 0 ? (\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">\n              All Quiz Results ({totalQuestions} questions)\n            </h2>\n          </div>\n          <div className=\"divide-y divide-gray-200\">\n            {quizResults.map((result) => (\n              <div key={result.id} className=\"p-6\">\n                <div className=\"flex items-start space-x-4\">\n                  {result.isCorrect ? (\n                    <CheckCircle className=\"h-6 w-6 text-green-500 mt-1\" />\n                  ) : (\n                    <XCircle className=\"h-6 w-6 text-red-500 mt-1\" />\n                  )}\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium text-gray-900 mb-2\">\n                          {result.question}\n                        </p>\n                        <div className=\"space-y-2 text-sm\">\n                          <div>\n                            <span className=\"font-medium text-gray-700\">Your answer:</span>\n                            <span className={`ml-2 ${result.isCorrect ? 'text-green-600' : 'text-red-600'}`}>\n                              {result.userAnswer}\n                            </span>\n                          </div>\n                          {!result.isCorrect && (\n                            <div>\n                              <span className=\"font-medium text-gray-700\">Correct answer:</span>\n                              <span className=\"ml-2 text-green-600\">{result.correctAnswer}</span>\n                            </div>\n                          )}\n                          <div className=\"flex items-center space-x-4 text-gray-500\">\n                            <div className=\"flex items-center\">\n                              <Calendar className=\"h-4 w-4 mr-1\" />\n                              {result.submittedAt.toLocaleDateString()} at{' '}\n                              {result.submittedAt.toLocaleTimeString([], { \n                                hour: '2-digit', \n                                minute: '2-digit' \n                              })}\n                            </div>\n                            <span>•</span>\n                            <span>From: {result.articleTitle}</span>\n                          </div>\n                        </div>\n                      </div>\n                      <Link\n                        href={`/articles/${result.articleSlug}`}\n                        className=\"ml-4 text-sm text-blue-600 hover:text-blue-700 font-medium\"\n                      >\n                        View Article\n                      </Link>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      ) : (\n        <div className=\"text-center py-12\">\n          <Trophy className=\"mx-auto h-12 w-12 text-gray-400\" />\n          <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No quiz results yet</h3>\n          <p className=\"mt-1 text-sm text-gray-500\">\n            Start taking quizzes to see your results here.\n          </p>\n          <div className=\"mt-6\">\n            <Link\n              href=\"/categories\"\n              className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700\"\n            >\n              Take Your First Quiz\n            </Link>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/dashboard/streak/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":15},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":234,"column":50,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7959,8015],"text":"• Start with easier topics when you&apos;re building momentum"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7959,8015],"text":"• Start with easier topics when you&lsquo;re building momentum"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7959,8015],"text":"• Start with easier topics when you&#39;re building momentum"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7959,8015],"text":"• Start with easier topics when you&rsquo;re building momentum"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":235,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8035,8088],"text":"• Don&apos;t break the chain - consistency beats intensity"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8035,8088],"text":"• Don&lsquo;t break the chain - consistency beats intensity"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8035,8088],"text":"• Don&#39;t break the chain - consistency beats intensity"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8035,8088],"text":"• Don&rsquo;t break the chain - consistency beats intensity"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { auth } from \"@clerk/nextjs/server\";\nimport { redirect } from \"next/navigation\";\nimport { Clock, Calendar, Flame, TrendingUp, ArrowLeft } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { prisma } from \"@/lib/prisma\";\n\ninterface StreakData {\n  currentStreak: number;\n  longestStreak: number;\n  activeDays: Set<string>;\n  totalActiveDays: number;\n  streakHistory: Array<{\n    date: string;\n    hasActivity: boolean;\n    questionsAnswered: number;\n  }>;\n}\n\nasync function getUserStreakData(userId: string): Promise<StreakData> {\n  try {\n    const userResponses = await prisma.userResponse.findMany({\n      where: { clerkUserId: userId },\n      orderBy: { submittedAt: 'desc' }\n    });\n\n    // Get last 30 days\n    const today = new Date();\n    const thirtyDaysAgo = new Date(today);\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 29);\n\n    // Create array of last 30 days\n    const days = [];\n    for (let i = 29; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n      days.push({\n        date: date.toDateString(),\n        hasActivity: false,\n        questionsAnswered: 0\n      });\n    }\n\n    // Count activity per day\n    const dailyActivity = new Map<string, number>();\n    userResponses.forEach(response => {\n      const dateStr = response.submittedAt.toDateString();\n      dailyActivity.set(dateStr, (dailyActivity.get(dateStr) || 0) + 1);\n    });\n\n    // Mark days with activity\n    days.forEach(day => {\n      const count = dailyActivity.get(day.date) || 0;\n      day.hasActivity = count > 0;\n      day.questionsAnswered = count;\n    });\n\n    // Calculate current streak (from today backwards)\n    let currentStreak = 0;\n    for (let i = days.length - 1; i >= 0; i--) {\n      if (days[i].hasActivity) {\n        currentStreak++;\n      } else {\n        break;\n      }\n    }\n\n    // Calculate longest streak in the 30-day period\n    let longestStreak = 0;\n    let tempStreak = 0;\n    days.forEach(day => {\n      if (day.hasActivity) {\n        tempStreak++;\n        longestStreak = Math.max(longestStreak, tempStreak);\n      } else {\n        tempStreak = 0;\n      }\n    });\n\n    // Get all unique active days\n    const activeDays = new Set<string>();\n    userResponses.forEach(response => {\n      activeDays.add(response.submittedAt.toDateString());\n    });\n\n    return {\n      currentStreak,\n      longestStreak,\n      activeDays,\n      totalActiveDays: activeDays.size,\n      streakHistory: days\n    };\n      \n  } catch (error) {\n    console.error('Error fetching streak data:', error);\n    return {\n      currentStreak: 0,\n      longestStreak: 0,\n      activeDays: new Set(),\n      totalActiveDays: 0,\n      streakHistory: []\n    };\n  }\n}\n\nexport default async function StreakPage() {\n  const { userId } = await auth();\n\n  if (!userId) {\n    redirect(\"/sign-in\");\n  }\n\n  const streakData = await getUserStreakData(userId);\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n      <div className=\"mb-8\">\n        <Link \n          href=\"/dashboard\" \n          className=\"inline-flex items-center text-blue-600 hover:text-blue-700 mb-4\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Dashboard\n        </Link>\n        <h1 className=\"text-3xl font-bold text-gray-900\">Your Learning Streak</h1>\n        <p className=\"text-gray-600 mt-2\">\n          Track your daily learning consistency and build lasting habits\n        </p>\n      </div>\n\n      {/* Streak Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n          <div className=\"flex items-center\">\n            <Flame className=\"h-8 w-8 text-orange-600\" />\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Current Streak</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">\n                {streakData.currentStreak} day{streakData.currentStreak !== 1 ? 's' : ''}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n          <div className=\"flex items-center\">\n            <TrendingUp className=\"h-8 w-8 text-green-600\" />\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Longest Streak (30 days)</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">\n                {streakData.longestStreak} day{streakData.longestStreak !== 1 ? 's' : ''}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\n          <div className=\"flex items-center\">\n            <Calendar className=\"h-8 w-8 text-blue-600\" />\n            <div className=\"ml-4\">\n              <p className=\"text-sm font-medium text-gray-600\">Total Active Days</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">{streakData.totalActiveDays}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Activity Calendar */}\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Last 30 Days Activity</h2>\n        \n        <div className=\"grid grid-cols-7 gap-2 mb-4\">\n          {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n            <div key={day} className=\"text-center text-sm font-medium text-gray-500 py-2\">\n              {day}\n            </div>\n          ))}\n        </div>\n\n        <div className=\"grid grid-cols-7 gap-2\">\n          {streakData.streakHistory.map((day, index) => {\n            const date = new Date(day.date);\n            const isToday = date.toDateString() === new Date().toDateString();\n            \n            return (\n              <div\n                key={index}\n                className={`\n                  aspect-square flex items-center justify-center text-sm rounded-md border\n                  ${day.hasActivity \n                    ? 'bg-green-100 border-green-300 text-green-800' \n                    : 'bg-gray-50 border-gray-200 text-gray-400'\n                  }\n                  ${isToday ? 'ring-2 ring-blue-500' : ''}\n                `}\n                title={`${date.toLocaleDateString()}: ${day.questionsAnswered} questions answered`}\n              >\n                <div className=\"text-center\">\n                  <div className=\"font-medium\">{date.getDate()}</div>\n                  {day.hasActivity && (\n                    <div className=\"text-xs mt-1\">\n                      {day.questionsAnswered}\n                    </div>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        <div className=\"flex items-center justify-center space-x-6 mt-6 text-sm text-gray-600\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 bg-gray-50 border border-gray-200 rounded\"></div>\n            <span>No activity</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 bg-green-100 border border-green-300 rounded\"></div>\n            <span>Active day</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 border-2 border-blue-500 rounded\"></div>\n            <span>Today</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Streak Tips */}\n      <div className=\"mt-8 bg-blue-50 border border-blue-200 rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold text-blue-900 mb-4\">\n          💡 Tips to Build Your Learning Streak\n        </h3>\n        <ul className=\"space-y-2 text-blue-800\">\n          <li>• Set a daily goal of answering at least 3-5 quiz questions</li>\n          <li>• Study at the same time each day to build a routine</li>\n          <li>• Start with easier topics when you're building momentum</li>\n          <li>• Don't break the chain - consistency beats intensity</li>\n          <li>• Review incorrect answers to reinforce learning</li>\n        </ul>\n      </div>\n\n      {streakData.currentStreak === 0 && (\n        <div className=\"text-center py-12\">\n          <Flame className=\"mx-auto h-12 w-12 text-gray-400\" />\n          <h3 className=\"mt-2 text-sm font-medium text-gray-900\">Start Your Learning Streak</h3>\n          <p className=\"mt-1 text-sm text-gray-500\">\n            Answer some quiz questions today to begin building your learning habit!\n          </p>\n          <div className=\"mt-6\">\n            <Link\n              href=\"/categories\"\n              className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700\"\n            >\n              Start Learning Today\n            </Link>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/pricing/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'X' is defined but never used.","line":6,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":101,"column":21,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3294,3341],"text":"\n                What&apos;s included\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3294,3341],"text":"\n                What&lsquo;s included\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3294,3341],"text":"\n                What&#39;s included\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3294,3341],"text":"\n                What&rsquo;s included\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":140,"column":21,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5148,5195],"text":"\n                What&apos;s included\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5148,5195],"text":"\n                What&lsquo;s included\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5148,5195],"text":"\n                What&#39;s included\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5148,5195],"text":"\n                What&rsquo;s included\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":176,"column":21,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6790,6837],"text":"\n                What&apos;s included\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6790,6837],"text":"\n                What&lsquo;s included\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6790,6837],"text":"\n                What&#39;s included\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6790,6837],"text":"\n                What&rsquo;s included\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@clerk/nextjs';\nimport { Check, X } from 'lucide-react';\nimport { SUBSCRIPTION_TIERS } from '@/lib/stripe';\n\n// You'll need to create these price IDs in your Stripe dashboard\nconst PRICE_IDS = {\n  STANDARD: process.env.NEXT_PUBLIC_STRIPE_STANDARD_PRICE_ID || '',\n  MAX: process.env.NEXT_PUBLIC_STRIPE_MAX_PRICE_ID || '',\n};\n\nexport default function PricingPage() {\n  const { isSignedIn } = useAuth();\n  const router = useRouter();\n  const [loading, setLoading] = useState<string | null>(null);\n\n  const handleSubscribe = async (tier: 'STANDARD' | 'MAX') => {\n    if (!isSignedIn) {\n      router.push('/sign-in?redirect_url=/pricing');\n      return;\n    }\n\n    const priceId = PRICE_IDS[tier];\n    if (!priceId) {\n      alert('Stripe is not fully configured. Please contact support.');\n      console.error(`Price ID for ${tier} tier is not configured`);\n      return;\n    }\n\n    setLoading(tier);\n\n    try {\n      const response = await fetch('/api/subscription/checkout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          priceId,\n          tier,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        console.error('API Error:', data);\n        alert(`Error: ${data.error || 'Failed to create checkout session'}`);\n        return;\n      }\n\n      if (data.url) {\n        window.location.href = data.url;\n      } else {\n        console.error('No checkout URL returned', data);\n        alert('Failed to create checkout session. Please try again.');\n      }\n    } catch (error) {\n      console.error('Subscription error:', error);\n    } finally {\n      setLoading(null);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl font-bold text-gray-900 sm:text-5xl\">\n            Choose Your Learning Journey\n          </h1>\n          <p className=\"mt-4 text-xl text-gray-600\">\n            Unlock your potential with our comprehensive IT learning platform\n          </p>\n        </div>\n\n        <div className=\"mt-16 grid grid-cols-1 gap-8 lg:grid-cols-3\">\n          {/* Free Tier */}\n          <div className=\"bg-white rounded-lg shadow-lg overflow-hidden\">\n            <div className=\"px-6 py-8\">\n              <h3 className=\"text-2xl font-semibold text-gray-900\">\n                {SUBSCRIPTION_TIERS.FREE.name}\n              </h3>\n              <p className=\"mt-4 text-gray-600\">Perfect for getting started</p>\n              <p className=\"mt-8\">\n                <span className=\"text-4xl font-bold text-gray-900\">$0</span>\n                <span className=\"text-gray-600\">/month</span>\n              </p>\n              <button\n                className=\"mt-8 w-full bg-gray-200 text-gray-800 py-3 px-6 rounded-md font-medium cursor-not-allowed\"\n                disabled\n              >\n                Current Plan\n              </button>\n            </div>\n            <div className=\"px-6 pb-8\">\n              <h4 className=\"text-sm font-semibold text-gray-900 uppercase tracking-wide\">\n                What's included\n              </h4>\n              <ul className=\"mt-4 space-y-3\">\n                {SUBSCRIPTION_TIERS.FREE.features.map((feature, index) => (\n                  <li key={index} className=\"flex items-start\">\n                    <Check className=\"h-5 w-5 text-green-500 flex-shrink-0\" />\n                    <span className=\"ml-3 text-gray-600\">{feature}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n\n          {/* Standard Tier */}\n          <div className=\"bg-white rounded-lg shadow-lg overflow-hidden border-2 border-blue-500\">\n            <div className=\"bg-blue-500 text-white text-center py-2 px-4\">\n              <span className=\"text-sm font-semibold\">MOST POPULAR</span>\n            </div>\n            <div className=\"px-6 py-8\">\n              <h3 className=\"text-2xl font-semibold text-gray-900\">\n                {SUBSCRIPTION_TIERS.STANDARD.name}\n              </h3>\n              <p className=\"mt-4 text-gray-600\">For serious learners</p>\n              <p className=\"mt-8\">\n                <span className=\"text-4xl font-bold text-gray-900\">\n                  ${SUBSCRIPTION_TIERS.STANDARD.price}\n                </span>\n                <span className=\"text-gray-600\">/month</span>\n              </p>\n              <button\n                onClick={() => handleSubscribe('STANDARD')}\n                disabled={loading !== null}\n                className=\"mt-8 w-full bg-blue-600 text-white py-3 px-6 rounded-md font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {loading === 'STANDARD' ? 'Loading...' : 'Subscribe'}\n              </button>\n            </div>\n            <div className=\"px-6 pb-8\">\n              <h4 className=\"text-sm font-semibold text-gray-900 uppercase tracking-wide\">\n                What's included\n              </h4>\n              <ul className=\"mt-4 space-y-3\">\n                {SUBSCRIPTION_TIERS.STANDARD.features.map((feature, index) => (\n                  <li key={index} className=\"flex items-start\">\n                    <Check className=\"h-5 w-5 text-green-500 flex-shrink-0\" />\n                    <span className=\"ml-3 text-gray-600\">{feature}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n\n          {/* Max Tier */}\n          <div className=\"bg-white rounded-lg shadow-lg overflow-hidden\">\n            <div className=\"px-6 py-8\">\n              <h3 className=\"text-2xl font-semibold text-gray-900\">\n                {SUBSCRIPTION_TIERS.MAX.name}\n              </h3>\n              <p className=\"mt-4 text-gray-600\">Maximum learning power</p>\n              <p className=\"mt-8\">\n                <span className=\"text-4xl font-bold text-gray-900\">\n                  ${SUBSCRIPTION_TIERS.MAX.price}\n                </span>\n                <span className=\"text-gray-600\">/month</span>\n              </p>\n              <button\n                onClick={() => handleSubscribe('MAX')}\n                disabled={loading !== null}\n                className=\"mt-8 w-full bg-gray-900 text-white py-3 px-6 rounded-md font-medium hover:bg-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {loading === 'MAX' ? 'Loading...' : 'Subscribe'}\n              </button>\n            </div>\n            <div className=\"px-6 pb-8\">\n              <h4 className=\"text-sm font-semibold text-gray-900 uppercase tracking-wide\">\n                What's included\n              </h4>\n              <ul className=\"mt-4 space-y-3\">\n                {SUBSCRIPTION_TIERS.MAX.features.map((feature, index) => (\n                  <li key={index} className=\"flex items-start\">\n                    <Check className=\"h-5 w-5 text-green-500 flex-shrink-0\" />\n                    <span className=\"ml-3 text-gray-600\">{feature}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-12 text-center\">\n          <p className=\"text-gray-600\">\n            All plans include a 7-day free trial. Cancel anytime.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/search/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentPage' is assigned a value but never used.","line":55,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport Link from \"next/link\";\nimport { Search, Loader2, Folder, FileText, Sparkles } from \"lucide-react\";\n\ninterface SearchResults {\n  query: string;\n  categories: Array<{\n    categoryId: string;\n    categoryName: string;\n    description: string | null;\n  }>;\n  articles: Array<{\n    articleId: string;\n    articleTitle: string;\n    articleSlug: string;\n    isContentGenerated: boolean;\n    categories: Array<{\n      category: {\n        categoryName: string;\n      };\n    }>;\n    tags: Array<{\n      tag: {\n        tagId: string;\n        tagName: string;\n        description: string | null;\n        color: string | null;\n      };\n    }>;\n  }>;\n  aiSuggestions: {\n    newCategoriesAdded: number;\n    newArticlesAdded: number;\n  };\n  pagination?: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n    hasNextPage: boolean;\n    hasPreviousPage: boolean;\n  };\n}\n\nexport default function SearchPage() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState<SearchResults | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [isRestoringFromURL, setIsRestoringFromURL] = useState(false);\n\n  // Initialize state from URL parameters on component mount\n  useEffect(() => {\n    const urlQuery = searchParams.get('q');\n    const urlPage = searchParams.get('page');\n    \n    if (urlQuery) {\n      setQuery(urlQuery);\n      const pageNum = urlPage ? parseInt(urlPage, 10) : 1;\n      setCurrentPage(pageNum);\n      \n      // Show loading state immediately when restoring from URL\n      setIsRestoringFromURL(true);\n      setLoading(true);\n      setError(null);\n      \n      // Perform search if we have a query from URL\n      performSearch(urlQuery, pageNum);\n    }\n  }, [searchParams]);\n\n  const performSearch = async (searchQuery: string, page: number = 1) => {\n    if (!searchQuery.trim()) return;\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"/api/search\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ query: searchQuery, page, limit: 20 }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Search failed\");\n      }\n\n      const data = await response.json();\n      console.log(\"Search results:\", data);\n      setResults(data);\n    } catch (err) {\n      console.error(\"Search error:\", err);\n      setError(err instanceof Error ? err.message : \"An error occurred\");\n    } finally {\n      setLoading(false);\n      setIsRestoringFromURL(false);\n    }\n  };\n\n  const updateURL = (searchQuery: string, page: number = 1) => {\n    const params = new URLSearchParams();\n    params.set('q', searchQuery);\n    if (page > 1) {\n      params.set('page', page.toString());\n    }\n    router.replace(`/search?${params.toString()}`, { scroll: false });\n  };\n\n  const handleSearch = async (e: React.FormEvent, page: number = 1) => {\n    e.preventDefault();\n    if (!query.trim()) return;\n\n    setCurrentPage(page);\n    updateURL(query, page);\n    await performSearch(query, page);\n  };\n\n  const handlePageChange = (page: number) => {\n    if (results && query) {\n      setCurrentPage(page);\n      updateURL(query, page);\n      performSearch(query, page);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n          What would you like to learn today?\n        </h1>\n        <p className=\"text-lg text-gray-600\">\n          Search for any IT topic and we&apos;ll find or create the perfect learning resources for you\n        </p>\n      </div>\n\n      <form onSubmit={handleSearch} className=\"mb-12\">\n        <div className=\"relative\">\n          <input\n            type=\"text\"\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n            placeholder=\"Search for Linux commands, cloud services, programming concepts...\"\n            className=\"w-full px-4 py-3 pl-12 pr-32 text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            disabled={loading}\n          />\n          <Search className=\"absolute left-4 top-3.5 h-5 w-5 text-gray-400\" />\n          <button\n            type=\"submit\"\n            disabled={loading || !query.trim()}\n            className=\"absolute right-2 top-2 px-4 py-1.5 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n          >\n            {loading ? (\n              <Loader2 className=\"h-5 w-5 animate-spin\" />\n            ) : (\n              \"Search\"\n            )}\n          </button>\n        </div>\n      </form>\n\n      {error && (\n        <div className=\"mb-8 bg-red-50 border border-red-200 rounded-lg p-4\">\n          <p className=\"text-red-800\">Error: {error}</p>\n        </div>\n      )}\n\n      {/* Loading state when restoring from URL */}\n      {isRestoringFromURL && (\n        <div className=\"mb-8 bg-blue-50 border border-blue-200 rounded-lg p-4\">\n          <div className=\"flex items-center\">\n            <Loader2 className=\"h-5 w-5 text-blue-600 mr-2 animate-spin\" />\n            <p className=\"text-blue-800\">Restoring your search results...</p>\n          </div>\n        </div>\n      )}\n\n      {/* Regular loading state for new searches */}\n      {loading && !isRestoringFromURL && !results && (\n        <div className=\"mb-8 bg-gray-50 border border-gray-200 rounded-lg p-4\">\n          <div className=\"flex items-center\">\n            <Loader2 className=\"h-5 w-5 text-gray-600 mr-2 animate-spin\" />\n            <p className=\"text-gray-700\">Searching...</p>\n          </div>\n        </div>\n      )}\n\n      {results && (\n        <div className=\"space-y-8\">\n          {results.aiSuggestions.newCategoriesAdded > 0 || results.aiSuggestions.newArticlesAdded > 0 ? (\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <div className=\"flex items-center\">\n                <Sparkles className=\"h-5 w-5 text-blue-600 mr-2\" />\n                <p className=\"text-blue-800\">\n                  AI enhanced your search: Added {results.aiSuggestions.newCategoriesAdded} new categories \n                  and {results.aiSuggestions.newArticlesAdded} new article topics!\n                </p>\n              </div>\n            </div>\n          ) : null}\n\n          {results.categories.length > 0 && (\n            <section>\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-4 flex items-center\">\n                <Folder className=\"h-5 w-5 mr-2\" />\n                Categories\n              </h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {results.categories.map((category) => (\n                  <Link\n                    key={category.categoryId}\n                    href={`/categories/${category.categoryId}`}\n                    className=\"block p-4 bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow\"\n                  >\n                    <h3 className=\"font-medium text-gray-900\">{category.categoryName}</h3>\n                    {category.description && (\n                      <p className=\"mt-1 text-sm text-gray-600 line-clamp-2\">\n                        {category.description}\n                      </p>\n                    )}\n                  </Link>\n                ))}\n              </div>\n            </section>\n          )}\n\n          {results.articles.length > 0 && (\n            <section>\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-4 flex items-center\">\n                <FileText className=\"h-5 w-5 mr-2\" />\n                Articles\n              </h2>\n              <div className=\"space-y-4\">\n                {results.articles.map((article) => (\n                  <div\n                    key={article.articleId}\n                    className=\"p-4 bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow\"\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <Link\n                          href={`/articles/${article.articleSlug}`}\n                          className=\"hover:text-blue-600 transition-colors\"\n                        >\n                          <h3 className=\"font-medium text-gray-900 hover:text-blue-600\">\n                            {article.articleTitle}\n                          </h3>\n                        </Link>\n                        <p className=\"mt-1 text-sm text-gray-600\">\n                          in {article.categories?.map(c => c.category.categoryName).join(', ') || 'No category'}\n                        </p>\n                        {/* Tags */}\n                        {article.tags && article.tags.length > 0 && (\n                          <div className=\"mt-2 flex flex-wrap gap-1\">\n                            {article.tags.map(({ tag }) => (\n                              <Link\n                                key={tag.tagId}\n                                href={`/search?q=${encodeURIComponent(`#${tag.tagName}`)}`}\n                                className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium text-white hover:opacity-80 transition-opacity\"\n                                style={{ \n                                  backgroundColor: tag.color || '#3B82F6',\n                                }}\n                                title={tag.description ? `${tag.description} - Click to find more articles with this tag` : `Click to find more articles with #${tag.tagName}`}\n                              >\n                                #{tag.tagName}\n                              </Link>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                      {!article.isContentGenerated && (\n                        <span className=\"ml-4 text-xs text-amber-600 bg-amber-50 px-2 py-1 rounded\">\n                          Content pending\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </section>\n          )}\n\n          {results.categories.length === 0 && results.articles.length === 0 && (\n            <div className=\"text-center py-12\">\n              <p className=\"text-gray-600\">\n                No results found for &ldquo;{results.query}&rdquo;. Try searching for a different topic!\n              </p>\n            </div>\n          )}\n\n          {/* Pagination */}\n          {results.pagination && results.pagination.totalPages > 1 && (\n            <div className=\"mt-8 flex items-center justify-between\">\n              <div className=\"text-sm text-gray-600\">\n                Showing {((results.pagination.page - 1) * results.pagination.limit) + 1}-\n                {Math.min(results.pagination.page * results.pagination.limit, results.pagination.total)} of {results.pagination.total} results\n              </div>\n              <div className=\"flex space-x-2\">\n                <button\n                  onClick={() => handlePageChange(results.pagination!.page - 1)}\n                  disabled={!results.pagination.hasPreviousPage || loading}\n                  className=\"px-3 py-1 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white transition-colors\"\n                >\n                  Previous\n                </button>\n                \n                {/* Page numbers */}\n                <div className=\"flex space-x-1\">\n                  {Array.from({ length: Math.min(5, results.pagination.totalPages) }, (_, i) => {\n                    let pageNum;\n                    if (results.pagination!.totalPages <= 5) {\n                      pageNum = i + 1;\n                    } else if (results.pagination!.page <= 3) {\n                      pageNum = i + 1;\n                    } else if (results.pagination!.page >= results.pagination!.totalPages - 2) {\n                      pageNum = results.pagination!.totalPages - 4 + i;\n                    } else {\n                      pageNum = results.pagination!.page - 2 + i;\n                    }\n                    \n                    return (\n                      <button\n                        key={pageNum}\n                        onClick={() => handlePageChange(pageNum)}\n                        disabled={loading}\n                        className={`px-3 py-1 text-sm font-medium border rounded-md transition-colors ${\n                          pageNum === results.pagination!.page\n                            ? 'bg-blue-600 text-white border-blue-600 hover:bg-blue-700 hover:cursor-pointer'\n                            : 'text-gray-700 bg-white border-gray-300 hover:bg-gray-50 hover:cursor-pointer'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        {pageNum}\n                      </button>\n                    );\n                  })}\n                </div>\n                \n                <button\n                  onClick={() => handlePageChange(results.pagination!.page + 1)}\n                  disabled={!results.pagination.hasNextPage || loading}\n                  className=\"px-3 py-1 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 hover:cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white transition-colors\"\n                >\n                  Next\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/sign-in/[[...sign-in]]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/app/sign-up/[[...sign-up]]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/article-change-history.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadChangeHistory'. Either include it or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [articleId, loadChangeHistory]","fix":{"range":[1166,1177],"text":"[articleId, loadChangeHistory]"}}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":113,"column":17,"nodeType":"JSXOpeningElement","endLine":117,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { History, User, Calendar, ChevronDown, ChevronUp } from 'lucide-react';\nimport { formatDistanceToNow, format } from 'date-fns';\n\ninterface Change {\n  id: string;\n  changeType: string;\n  description: string;\n  createdAt: string;\n  user: {\n    firstName: string | null;\n    lastName: string | null;\n    imageUrl: string | null;\n  };\n  suggestion: {\n    suggestionType: string;\n  } | null;\n}\n\ninterface ArticleInfo {\n  articleTitle: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface ArticleChangeHistoryProps {\n  articleId: string;\n}\n\nexport function ArticleChangeHistory({ articleId }: ArticleChangeHistoryProps) {\n  const [changes, setChanges] = useState<Change[]>([]);\n  const [article, setArticle] = useState<ArticleInfo | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  useEffect(() => {\n    loadChangeHistory();\n  }, [articleId]);\n\n  const loadChangeHistory = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/articles/${articleId}/changes`);\n      if (!response.ok) throw new Error('Failed to load change history');\n\n      const data = await response.json();\n      setChanges(data.changes);\n      setArticle(data.article);\n    } catch (error) {\n      console.error('Error loading change history:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getUserName = (user: Change['user']) => {\n    if (user.firstName || user.lastName) {\n      return `${user.firstName || ''} ${user.lastName || ''}`.trim();\n    }\n    return 'Anonymous';\n  };\n\n  const getChangeTypeColor = (type: string) => {\n    switch (type) {\n      case 'suggestion':\n        return 'bg-blue-100 text-blue-800';\n      case 'rollback':\n        return 'bg-orange-100 text-orange-800';\n      case 'admin_edit':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (loading || !article || changes.length === 0) {\n    return null;\n  }\n\n  const displayChanges = isExpanded ? changes : changes.slice(0, 3);\n\n  return (\n    <Card className=\"mt-8\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-lg\">\n          <History className=\"h-5 w-5\" />\n          Article History\n        </CardTitle>\n        <CardDescription>\n          This article has been improved {changes.length} time{changes.length !== 1 ? 's' : ''} by our community\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div className=\"text-sm text-muted-foreground mb-4\">\n          <p>\n            Created {format(new Date(article.createdAt), 'MMM d, yyyy')} • \n            Last updated {formatDistanceToNow(new Date(article.updatedAt), { addSuffix: true })}\n          </p>\n        </div>\n\n        <div className=\"space-y-3\">\n          {displayChanges.map((change) => (\n            <div\n              key={change.id}\n              className=\"flex items-start gap-3 pb-3 border-b last:border-0 last:pb-0\"\n            >\n              {change.user.imageUrl ? (\n                <img\n                  src={change.user.imageUrl}\n                  alt={getUserName(change.user)}\n                  className=\"h-8 w-8 rounded-full\"\n                />\n              ) : (\n                <div className=\"h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center\">\n                  <User className=\"h-4 w-4 text-gray-500\" />\n                </div>\n              )}\n              \n              <div className=\"flex-1 space-y-1\">\n                <div className=\"flex items-center gap-2 flex-wrap\">\n                  <span className=\"font-medium text-sm\">\n                    {getUserName(change.user)}\n                  </span>\n                  <Badge \n                    variant=\"secondary\" \n                    className={`text-xs ${getChangeTypeColor(change.changeType)}`}\n                  >\n                    {change.suggestion ? change.suggestion.suggestionType : change.changeType}\n                  </Badge>\n                </div>\n                \n                <p className=\"text-sm text-muted-foreground\">\n                  {change.description}\n                </p>\n                \n                <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                  <Calendar className=\"h-3 w-3\" />\n                  {formatDistanceToNow(new Date(change.createdAt), { addSuffix: true })}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {changes.length > 3 && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setIsExpanded(!isExpanded)}\n            className=\"w-full\"\n          >\n            {isExpanded ? (\n              <>\n                <ChevronUp className=\"h-4 w-4 mr-1\" />\n                Show Less\n              </>\n            ) : (\n              <>\n                <ChevronDown className=\"h-4 w-4 mr-1\" />\n                Show {changes.length - 3} More Changes\n              </>\n            )}\n          </Button>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/article-groups/article-groups-button.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":146,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":146,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'newGroup' is assigned a value but never used.","line":174,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":174,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":198,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":198,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":225,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":225,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":241,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":241,"endColumn":19}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { usePathname, useRouter } from \"next/navigation\";\nimport { useUser } from \"@clerk/nextjs\";\nimport {\n  useFloating,\n  autoUpdate,\n  flip,\n  offset,\n  shift,\n  useHover,\n  useFocus,\n  useDismiss,\n  useRole,\n  useInteractions,\n  FloatingPortal,\n} from \"@floating-ui/react\";\nimport { FolderOpen, Plus, Trash2, X, ChevronRight, Loader2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { toast } from \"sonner\";\n\ninterface ArticleGroup {\n  groupId: string;\n  name: string;\n  articles: {\n    id: string;\n    scrollPosition: number;\n    lastViewedAt: string | null;\n    article: {\n      articleId: string;\n      articleTitle: string;\n      articleSlug: string;\n    };\n  }[];\n}\n\nexport function ArticleGroupsButton() {\n  const { isSignedIn, isLoaded } = useUser();\n  const [isOpen, setIsOpen] = useState(false);\n  const [groups, setGroups] = useState<ArticleGroup[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [creating, setCreating] = useState(false);\n  const [newGroupName, setNewGroupName] = useState(\"\");\n  const [showNewGroupInput, setShowNewGroupInput] = useState(false);\n  const [expandedGroup, setExpandedGroup] = useState<string | null>(null);\n  const pathname = usePathname();\n  const router = useRouter();\n  const [currentArticleId, setCurrentArticleId] = useState<string | null>(null);\n\n  // Extract article slug from pathname - this will update when pathname changes\n  const articleMatch = pathname.match(/^\\/articles\\/([^\\/]+)/);\n  const currentArticleSlug = articleMatch ? decodeURIComponent(articleMatch[1]) : null;\n\n  const { refs, floatingStyles, context } = useFloating({\n    open: isOpen,\n    onOpenChange: setIsOpen,\n    middleware: [offset(10), flip(), shift()],\n    whileElementsMounted: autoUpdate,\n    placement: \"top-start\",\n  });\n\n  const hover = useHover(context, { \n    move: false,\n    delay: { open: 100, close: 300 } // Add delay to prevent immediate closing\n  });\n  const focus = useFocus(context);\n  const dismiss = useDismiss(context);\n  const role = useRole(context);\n\n  const { getReferenceProps, getFloatingProps } = useInteractions([\n    hover,\n    focus,\n    dismiss,\n    role,\n  ]);\n\n  // Fetch current article ID if on article page\n  useEffect(() => {\n    if (currentArticleSlug) {\n      setCurrentArticleId(null); // Reset while loading\n      fetch(`/api/articles?slug=${currentArticleSlug}`)\n        .then((res) => res.json())\n        .then((data) => {\n          if (data && data.length > 0) {\n            const articleId = data[0].articleId;\n            setCurrentArticleId(articleId);\n            \n            // Check if we have a stored scroll position for this article\n            const storedScrollPosition = sessionStorage.getItem(`article-scroll-${articleId}`);\n            if (storedScrollPosition) {\n              const scrollPos = parseInt(storedScrollPosition, 10);\n              sessionStorage.removeItem(`article-scroll-${articleId}`);\n              \n              // Wait for the page to render, then scroll\n              const attemptScroll = (attempts = 0) => {\n                if (attempts > 20) return; // Give up after 2 seconds\n                \n                // Check if the page has content and is ready\n                if (document.body.scrollHeight > window.innerHeight) {\n                  window.scrollTo({ top: scrollPos, behavior: \"instant\" });\n                  \n                  // Update last viewed time in the group\n                  groups.forEach((group) => {\n                    const article = group.articles.find((a) => a.article.articleId === articleId);\n                    if (article) {\n                      fetch(`/api/article-groups/${group.groupId}/articles/${articleId}/scroll`, {\n                        method: \"PATCH\",\n                        headers: { \"Content-Type\": \"application/json\" },\n                        body: JSON.stringify({ scrollPosition: scrollPos }),\n                      });\n                    }\n                  });\n                } else {\n                  // Try again in 100ms\n                  setTimeout(() => attemptScroll(attempts + 1), 100);\n                }\n              };\n              \n              // Start attempting to scroll after a short delay\n              setTimeout(() => attemptScroll(), 100);\n            }\n          }\n        })\n        .catch((error) => console.error(\"Error fetching article:\", error));\n    } else {\n      setCurrentArticleId(null);\n    }\n  }, [pathname, currentArticleSlug, groups]); // Depend on pathname to ensure updates\n\n  // Fetch article groups\n  useEffect(() => {\n    if (isOpen) {\n      fetchGroups();\n    }\n  }, [isOpen]);\n\n  const fetchGroups = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"/api/article-groups\");\n      if (!response.ok) throw new Error(\"Failed to fetch groups\");\n      const data = await response.json();\n      setGroups(data);\n    } catch (error) {\n      toast.error(\"Failed to load article groups\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createGroup = async () => {\n    if (!newGroupName.trim() || creating) return;\n    \n    if (!isSignedIn) {\n      toast.error(\"Please sign in to create article groups\");\n      return;\n    }\n\n    setCreating(true);\n    try {\n      const response = await fetch(\"/api/article-groups\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ name: newGroupName.trim() }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to create group\");\n      }\n      \n      const newGroup = await response.json();\n      \n      await fetchGroups();\n      setNewGroupName(\"\");\n      setShowNewGroupInput(false);\n      toast.success(\"Group created successfully\");\n    } catch (error) {\n      console.error(\"Error creating group:\", error);\n      toast.error(error instanceof Error ? error.message : \"Failed to create group\");\n    } finally {\n      setCreating(false);\n    }\n  };\n\n  const deleteGroup = async (groupId: string) => {\n    try {\n      const response = await fetch(`/api/article-groups/${groupId}`, {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) throw new Error(\"Failed to delete group\");\n      \n      await fetchGroups();\n      toast.success(\"Group deleted successfully\");\n    } catch (error) {\n      toast.error(\"Failed to delete group\");\n    }\n  };\n\n  const addCurrentArticleToGroup = async (groupId: string) => {\n    if (!currentArticleId) {\n      toast.error(\"No article selected\");\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/article-groups/${groupId}/articles`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ articleId: currentArticleId }),\n      });\n\n      if (response.status === 409) {\n        toast.info(\"Article already in group\");\n        return;\n      }\n\n      if (!response.ok) throw new Error(\"Failed to add article\");\n      \n      await fetchGroups();\n      toast.success(\"Article added to group\");\n    } catch (error) {\n      toast.error(\"Failed to add article to group\");\n    }\n  };\n\n  const removeArticleFromGroup = async (groupId: string, articleId: string) => {\n    try {\n      const response = await fetch(\n        `/api/article-groups/${groupId}/articles?articleId=${articleId}`,\n        { method: \"DELETE\" }\n      );\n\n      if (!response.ok) throw new Error(\"Failed to remove article\");\n      \n      await fetchGroups();\n      toast.success(\"Article removed from group\");\n    } catch (error) {\n      toast.error(\"Failed to remove article from group\");\n    }\n  };\n\n  const saveScrollPosition = async (groupId: string, articleId: string) => {\n    const scrollPosition = window.scrollY;\n    \n    try {\n      await fetch(`/api/article-groups/${groupId}/articles/${articleId}/scroll`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ scrollPosition }),\n      });\n    } catch (error) {\n      console.error(\"Failed to save scroll position:\", error);\n    }\n  };\n\n  const navigateToArticle = async (\n    groupId: string,\n    articleId: string,\n    articleSlug: string,\n    scrollPosition: number\n  ) => {\n    // Save current scroll position if on an article page\n    if (currentArticleId && currentArticleId !== articleId) {\n      const currentGroup = groups.find((g) =>\n        g.articles.some((a) => a.article.articleId === currentArticleId)\n      );\n      if (currentGroup) {\n        await saveScrollPosition(currentGroup.groupId, currentArticleId);\n      }\n    }\n\n    // Store scroll position in sessionStorage before navigation\n    sessionStorage.setItem(`article-scroll-${articleId}`, scrollPosition.toString());\n\n    // Navigate to the article\n    router.push(`/articles/${articleSlug}`);\n  };\n\n  // Don't render until auth is loaded\n  if (!isLoaded || !isSignedIn) {\n    return null;\n  }\n\n  return (\n    <>\n      <Button\n        ref={refs.setReference}\n        className=\"fixed bottom-5 right-20 z-50 h-12 w-12 rounded-full shadow-lg hover:shadow-xl transition-all bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 border border-gray-200 dark:border-gray-600\"\n        size=\"icon\"\n        {...getReferenceProps()}\n        title=\"Article Groups\"\n      >\n        <FolderOpen className=\"h-5 w-5\" />\n      </Button>\n\n      {isOpen && (\n        <FloatingPortal>\n          <div\n            ref={refs.setFloating}\n            style={floatingStyles}\n            {...getFloatingProps()}\n            className=\"z-50 w-80 bg-white dark:bg-gray-900 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700 p-4\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"font-semibold text-lg text-gray-100\">Article Groups</h3>\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={() => setShowNewGroupInput(!showNewGroupInput)}\n                className=\"hover:bg-gray-100 dark:hover:bg-gray-800\"\n                title=\"Create new group\"\n              >\n                <Plus className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n              </Button>\n            </div>\n\n            {showNewGroupInput && (\n              <form onSubmit={(e) => { e.preventDefault(); createGroup(); }} className=\"mb-4 flex gap-2\">\n                <Input\n                  placeholder=\"Group name...\"\n                  value={newGroupName}\n                  onChange={(e) => setNewGroupName(e.target.value)}\n                  className=\"flex-1\"\n                  autoFocus\n                />\n                <Button \n                  size=\"sm\" \n                  type=\"submit\"\n                  disabled={!newGroupName.trim() || creating}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white disabled:opacity-50\"\n                >\n                  {creating ? (\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  ) : (\n                    \"Add\"\n                  )}\n                </Button>\n                <Button\n                  size=\"sm\"\n                  type=\"button\"\n                  variant=\"ghost\"\n                  onClick={() => {\n                    setShowNewGroupInput(false);\n                    setNewGroupName(\"\");\n                  }}\n                  className=\"hover:bg-gray-100 dark:hover:bg-gray-800\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </form>\n            )}\n\n            {loading ? (\n              <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">Loading...</div>\n            ) : groups.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                <FolderOpen className=\"h-12 w-12 mx-auto mb-3 text-gray-300 dark:text-gray-600\" />\n                <p className=\"text-sm\">No groups yet.</p>\n                <p className=\"text-sm\">Click the + button to create one!</p>\n              </div>\n            ) : (\n              <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                {groups.map((group) => (\n                  <GroupItem\n                    key={group.groupId}\n                    group={group}\n                    currentArticleId={currentArticleId}\n                    currentArticleSlug={currentArticleSlug}\n                    onDelete={deleteGroup}\n                    onAddCurrentArticle={addCurrentArticleToGroup}\n                    onRemoveArticle={removeArticleFromGroup}\n                    onNavigateToArticle={navigateToArticle}\n                    isExpanded={expandedGroup === group.groupId}\n                    onToggleExpand={(groupId) => setExpandedGroup(expandedGroup === groupId ? null : groupId)}\n                  />\n                ))}\n              </div>\n            )}\n          </div>\n        </FloatingPortal>\n      )}\n    </>\n  );\n}\n\ninterface GroupItemProps {\n  group: ArticleGroup;\n  currentArticleId: string | null;\n  currentArticleSlug: string | null;\n  onDelete: (groupId: string) => void;\n  onAddCurrentArticle: (groupId: string) => void;\n  onRemoveArticle: (groupId: string, articleId: string) => void;\n  onNavigateToArticle: (\n    groupId: string,\n    articleId: string,\n    articleSlug: string,\n    scrollPosition: number\n  ) => void;\n  isExpanded: boolean;\n  onToggleExpand: (groupId: string) => void;\n}\n\nfunction GroupItem({\n  group,\n  currentArticleId,\n  currentArticleSlug,\n  onDelete,\n  onAddCurrentArticle,\n  onRemoveArticle,\n  onNavigateToArticle,\n  isExpanded,\n  onToggleExpand,\n}: GroupItemProps) {\n  return (\n    <div className=\"border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden\">\n      <div\n        className=\"flex items-center justify-between p-3 hover:bg-gray-100 dark:hover:bg-gray-800 cursor-pointer group transition-colors\"\n        onClick={() => onToggleExpand(group.groupId)}\n      >\n        <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n          <ChevronRight \n            className={`h-4 w-4 text-gray-400 dark:text-gray-500 flex-shrink-0 transition-transform duration-200 ${\n              isExpanded ? 'rotate-90' : ''\n            }`} \n          />\n          <span className=\"truncate text-gray-900 dark:text-gray-100\">{group.name}</span>\n          <span className=\"text-xs text-gray-500 dark:text-gray-400 flex-shrink-0\">\n            ({group.articles.length})\n          </span>\n        </div>\n        <div className=\"flex gap-1\">\n          {currentArticleId && (\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              className=\"h-7 w-7 hover:bg-gray-200 dark:hover:bg-gray-700 text-blue-600 dark:text-blue-400\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onAddCurrentArticle(group.groupId);\n              }}\n              title=\"Add current article to this group\"\n            >\n              <Plus className=\"h-3 w-3\" />\n            </Button>\n          )}\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            className=\"h-7 w-7 text-red-500 hover:text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 opacity-0 group-hover:opacity-100 transition-opacity\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onDelete(group.groupId);\n            }}\n            title=\"Delete this group\"\n          >\n            <Trash2 className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </div>\n\n      {isExpanded && group.articles.length > 0 && (\n        <div className=\"border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50\">\n          <div className=\"p-2 space-y-1 max-h-64 overflow-y-auto\">\n            {group.articles.map((item) => {\n              const isCurrentArticle = item.article.articleId === currentArticleId || \n                                     (currentArticleSlug && item.article.articleSlug === currentArticleSlug);\n              return (\n                <div\n                  key={item.id}\n                  className={`flex items-center justify-between p-2 rounded-lg cursor-pointer group/article transition-colors ${\n                    isCurrentArticle \n                      ? 'bg-blue-100 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-800' \n                      : 'hover:bg-white dark:hover:bg-gray-800'\n                  }`}\n                  onClick={() =>\n                    onNavigateToArticle(\n                      group.groupId,\n                      item.article.articleId,\n                      item.article.articleSlug,\n                      item.scrollPosition\n                    )\n                  }\n                >\n                  <span className={`text-sm truncate flex-1 min-w-0 pl-6 pr-2 ${\n                    isCurrentArticle \n                      ? 'text-blue-700 dark:text-blue-300 font-medium' \n                      : 'text-gray-700 dark:text-gray-300'\n                  }`}>\n                    {item.article.articleTitle}\n                  </span>\n                <button\n                  className=\"h-7 w-7 flex items-center justify-center text-gray-100 hover:text-red-300 hover:bg-red-900/30 rounded transition-colors ml-2 flex-shrink-0 border border-gray-400 bg-gray-700/50\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onRemoveArticle(group.groupId, item.article.articleId);\n                  }}\n                  title=\"Remove from group\"\n                  type=\"button\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </button>\n              </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n      \n      {isExpanded && group.articles.length === 0 && (\n        <div className=\"border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50 p-4 text-center text-sm text-gray-500 dark:text-gray-400\">\n          No articles in this group yet\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/article-suggestion-form-inline.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/article-suggestion-form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/chat/chat-interface.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchChatHistory'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [fetchChatHistory, isOpen, isSignedIn]","fix":{"range":[1460,1480],"text":"[fetchChatHistory, isOpen, isSignedIn]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { useAuth } from '@clerk/nextjs';\nimport { ChatMessage } from './chat-message';\nimport { Send, MessageCircle, X, Loader2, Lock } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\n\ninterface ChatInterfaceProps {\n  articleId: string;\n  currentExampleId?: string;\n}\n\ninterface Message {\n  messageId: string;\n  role: 'USER' | 'ASSISTANT';\n  content: string;\n  createdAt: string;\n  exampleId?: string | null;\n}\n\nexport function ChatInterface({ articleId, currentExampleId }: ChatInterfaceProps) {\n  const { isSignedIn } = useAuth();\n  const router = useRouter();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFetchingHistory, setIsFetchingHistory] = useState(false);\n  const [subscriptionStatus, setSubscriptionStatus] = useState<{ canUseAI: boolean; loading: boolean }>({ canUseAI: false, loading: true });\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    if (isOpen && isSignedIn) {\n      checkSubscriptionStatus();\n      fetchChatHistory();\n    }\n  }, [isOpen, isSignedIn]);\n\n  const checkSubscriptionStatus = async () => {\n    try {\n      const response = await fetch('/api/subscription/status');\n      if (response.ok) {\n        const data = await response.json();\n        const canUseAI = data.tier === 'STANDARD' || data.tier === 'MAX';\n        setSubscriptionStatus({ canUseAI, loading: false });\n      } else {\n        setSubscriptionStatus({ canUseAI: false, loading: false });\n      }\n    } catch (error) {\n      console.error('Error checking subscription status:', error);\n      setSubscriptionStatus({ canUseAI: false, loading: false });\n    }\n  };\n\n  const fetchChatHistory = async () => {\n    setIsFetchingHistory(true);\n    try {\n      const response = await fetch(`/api/articles/${articleId}/chat`);\n      if (response.ok) {\n        const data = await response.json();\n        setMessages(data);\n      }\n    } catch (error) {\n      console.error('Error fetching chat history:', error);\n    } finally {\n      setIsFetchingHistory(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!input.trim() || isLoading || !isSignedIn) return;\n\n    const userInput = input.trim();\n    setInput('');\n    \n    // Create temporary user message\n    const tempUserMessage: Message = {\n      messageId: `temp-user-${Date.now()}`,\n      role: 'USER',\n      content: userInput,\n      createdAt: new Date().toISOString(),\n      exampleId: currentExampleId,\n    };\n    \n    // Add user message immediately\n    setMessages(prev => [...prev, tempUserMessage]);\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(`/api/articles/${articleId}/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          content: userInput,\n          exampleId: currentExampleId,\n        }),\n      });\n\n      if (response.ok) {\n        const { userMessage, assistantMessage } = await response.json();\n        // Replace temp message with real messages\n        setMessages(prev => {\n          // Remove the temporary user message\n          const filtered = prev.filter(msg => msg.messageId !== tempUserMessage.messageId);\n          // Add the real messages\n          return [...filtered, userMessage, assistantMessage];\n        });\n      } else {\n        // Remove temp message on error\n        setMessages(prev => prev.filter(msg => msg.messageId !== tempUserMessage.messageId));\n        \n        // Check if it's a subscription error\n        if (response.status === 403) {\n          setSubscriptionStatus({ canUseAI: false, loading: false });\n        }\n        \n        const errorData = await response.json();\n        console.error('Failed to send message:', errorData.error);\n      }\n    } catch (error) {\n      // Remove temp message on error\n      setMessages(prev => prev.filter(msg => msg.messageId !== tempUserMessage.messageId));\n      console.error('Error sending message:', error);\n    } finally {\n      setIsLoading(false);\n      inputRef.current?.focus();\n    }\n  };\n\n  if (!isSignedIn) {\n    return null;\n  }\n\n  return (\n    <>\n      {/* Floating chat button */}\n      <button\n        onClick={() => setIsOpen(true)}\n        className=\"fixed bottom-4 right-4 bg-blue-600 hover:bg-blue-700 text-white rounded-full p-4 shadow-lg transition-all duration-200 z-40\"\n        aria-label=\"Open AI chat\"\n      >\n        <MessageCircle className=\"h-6 w-6\" />\n      </button>\n\n      {/* Chat interface */}\n      {isOpen && (\n        <div className=\"fixed bottom-0 right-0 w-full sm:w-96 h-[600px] bg-white dark:bg-gray-900 shadow-2xl rounded-t-lg sm:rounded-tl-lg border border-gray-200 dark:border-gray-700 z-50 flex flex-col\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center gap-2\">\n              <MessageCircle className=\"h-5 w-5 text-blue-600\" />\n              <h3 className=\"font-semibold\">AI Tutor</h3>\n            </div>\n            <button\n              onClick={() => setIsOpen(false)}\n              className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n              aria-label=\"Close chat\"\n            >\n              <X className=\"h-5 w-5\" />\n            </button>\n          </div>\n\n          {/* Messages area */}\n          <div className=\"flex-1 overflow-y-auto p-4\">\n            {subscriptionStatus.loading || isFetchingHistory ? (\n              <div className=\"flex items-center justify-center h-full\">\n                <Loader2 className=\"h-6 w-6 animate-spin text-gray-400\" />\n              </div>\n            ) : !subscriptionStatus.canUseAI ? (\n              <div className=\"text-center mt-8 px-4\">\n                <Lock className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n                <h3 className=\"text-lg font-semibold mb-2\">AI Chat is a Premium Feature</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-6\">\n                  Upgrade to Standard or Max plan to get unlimited access to our AI tutor who can help you understand concepts and answer questions about the articles.\n                </p>\n                <button\n                  onClick={() => router.push('/pricing')}\n                  className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\n                >\n                  View Pricing Plans\n                </button>\n              </div>\n            ) : messages.length === 0 ? (\n              <div className=\"text-center text-gray-500 dark:text-gray-400 mt-8\">\n                <MessageCircle className=\"h-12 w-12 mx-auto mb-4 text-gray-300 dark:text-gray-600\" />\n                <p className=\"text-sm\">Ask me anything about this article!</p>\n                {currentExampleId && (\n                  <p className=\"text-xs mt-2\">I can help you understand this quiz question.</p>\n                )}\n              </div>\n            ) : (\n              <>\n                {messages.map((message) => (\n                  <ChatMessage\n                    key={message.messageId}\n                    role={message.role}\n                    content={message.content}\n                    createdAt={message.createdAt}\n                  />\n                ))}\n                {isLoading && (\n                  <div className=\"flex justify-start mb-4\">\n                    <div className=\"max-w-[70%] rounded-lg px-4 py-2 bg-gray-100 dark:bg-gray-800\">\n                      <div className=\"flex items-center gap-2\">\n                        <Loader2 className=\"h-4 w-4 animate-spin text-gray-500\" />\n                        <span className=\"text-sm text-gray-500\">AI is thinking...</span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                <div ref={messagesEndRef} />\n              </>\n            )}\n          </div>\n\n          {/* Input area */}\n          {subscriptionStatus.canUseAI && (\n            <form onSubmit={handleSubmit} className=\"p-4 border-t border-gray-200 dark:border-gray-700\">\n              <div className=\"flex gap-2\">\n                <textarea\n                  ref={inputRef}\n                  value={input}\n                  onChange={(e) => setInput(e.target.value)}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter' && !e.shiftKey) {\n                      e.preventDefault();\n                      handleSubmit(e);\n                    }\n                  }}\n                  placeholder=\"Ask a question...\"\n                  className=\"flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white resize-none\"\n                  rows={1}\n                  disabled={isLoading}\n                />\n                <button\n                  type=\"submit\"\n                  disabled={!input.trim() || isLoading}\n                  className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                >\n                  {isLoading ? (\n                    <Loader2 className=\"h-5 w-5 animate-spin\" />\n                  ) : (\n                    <Send className=\"h-5 w-5\" />\n                  )}\n                </button>\n              </div>\n            </form>\n          )}\n        </div>\n      )}\n    </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/chat/chat-message.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/comments/comment-form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/comments/comment.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/comments/comments-list.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[438,441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[438,441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchComments'. Either include it or remove the dependency array.","line":36,"column":6,"nodeType":"ArrayExpression","endLine":36,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [articleId, fetchComments]","fix":{"range":[1034,1045],"text":"[articleId, fetchComments]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useUser } from \"@clerk/nextjs\";\nimport { MessageSquare, Loader2 } from \"lucide-react\";\nimport CommentForm from \"./comment-form\";\nimport Comment from \"./comment\";\n\ninterface CommentsListProps {\n  articleId: string;\n}\n\nexport default function CommentsList({ articleId }: CommentsListProps) {\n  const { isSignedIn } = useUser();\n  const [comments, setComments] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchComments = async () => {\n    try {\n      const response = await fetch(`/api/articles/${articleId}/comments`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch comments\");\n      }\n      const data = await response.json();\n      setComments(data);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"An error occurred\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchComments();\n  }, [articleId]);\n\n  const handleCommentAdded = () => {\n    fetchComments();\n  };\n\n  return (\n    <div className=\"mt-12 border-t border-gray-200 pt-8\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-gray-900 flex items-center gap-2\">\n          <MessageSquare className=\"w-6 h-6\" />\n          Comments\n        </h2>\n      </div>\n\n      {isSignedIn && (\n        <div className=\"mb-8\">\n          <CommentForm\n            articleId={articleId}\n            onSuccess={handleCommentAdded}\n          />\n        </div>\n      )}\n\n      {!isSignedIn && (\n        <div className=\"mb-6 p-4 bg-gray-50 rounded-lg text-center\">\n          <p className=\"text-sm text-gray-600\">\n            Please sign in to leave a comment.\n          </p>\n        </div>\n      )}\n\n      {isLoading ? (\n        <div className=\"flex items-center justify-center py-8\">\n          <Loader2 className=\"w-6 h-6 animate-spin text-gray-400\" />\n        </div>\n      ) : error ? (\n        <div className=\"text-center py-8\">\n          <p className=\"text-sm text-red-600\">{error}</p>\n        </div>\n      ) : comments.length === 0 ? (\n        <div className=\"text-center py-8\">\n          <p className=\"text-gray-500\">No comments yet. Be the first to comment!</p>\n        </div>\n      ) : (\n        <div className=\"space-y-0\">\n          {comments.map((comment) => (\n            <Comment\n              key={comment.commentId}\n              comment={comment}\n              articleId={articleId}\n              onCommentDeleted={handleCommentAdded}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/flag-button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/floating-action-menu.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchChatHistory'. Either include it or remove the dependency array.","line":138,"column":6,"nodeType":"ArrayExpression","endLine":138,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [fetchChatHistory, isChatOpen, isSignedIn]","fix":{"range":[3720,3744],"text":"[fetchChatHistory, isChatOpen, isSignedIn]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":281,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":281,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":331,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":331,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":358,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":358,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":374,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":374,"endColumn":19}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { useAuth } from \"@clerk/nextjs\";\nimport { useUser } from \"@clerk/nextjs\";\nimport { usePathname, useRouter } from \"next/navigation\";\nimport {\n  useFloating,\n  autoUpdate,\n  flip,\n  offset,\n  shift,\n  useHover,\n  useFocus,\n  useDismiss,\n  useRole,\n  useInteractions,\n  FloatingPortal,\n} from \"@floating-ui/react\";\nimport { \n  MessageCircle, \n  FolderOpen, \n  Plus, \n  MoreVertical,\n  Loader2,\n  Lock,\n  X,\n  Send,\n  Trash2,\n  ChevronRight\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { toast } from \"sonner\";\nimport { ChatMessage } from \"./chat/chat-message\";\n\ninterface FloatingActionMenuProps {\n  articleId: string;\n  currentExampleId?: string;\n}\n\ninterface Message {\n  messageId: string;\n  role: 'USER' | 'ASSISTANT';\n  content: string;\n  createdAt: string;\n  exampleId?: string | null;\n}\n\ninterface ArticleGroup {\n  groupId: string;\n  name: string;\n  articles: {\n    id: string;\n    scrollPosition: number;\n    lastViewedAt: string | null;\n    article: {\n      articleId: string;\n      articleTitle: string;\n      articleSlug: string;\n    };\n  }[];\n}\n\ntype MenuAction = 'chat' | 'groups';\n\nexport function FloatingActionMenu({ articleId, currentExampleId }: FloatingActionMenuProps) {\n  const { isSignedIn } = useAuth();\n  const { isLoaded } = useUser();\n  const pathname = usePathname();\n  const router = useRouter();\n  \n  // Main menu state\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [activeAction, setActiveAction] = useState<MenuAction | null>(null);\n  \n  // Chat state\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFetchingHistory, setIsFetchingHistory] = useState(false);\n  const [subscriptionStatus, setSubscriptionStatus] = useState<{ canUseAI: boolean; loading: boolean }>({ canUseAI: false, loading: true });\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n  \n  // Groups state\n  const [groups, setGroups] = useState<ArticleGroup[]>([]);\n  const [groupsLoading, setGroupsLoading] = useState(false);\n  const [creating, setCreating] = useState(false);\n  const [newGroupName, setNewGroupName] = useState(\"\");\n  const [showNewGroupInput, setShowNewGroupInput] = useState(false);\n  const [expandedGroup, setExpandedGroup] = useState<string | null>(null);\n  const [currentArticleId, setCurrentArticleId] = useState<string | null>(null);\n\n  // Extract article slug from pathname\n  const articleMatch = pathname.match(/^\\/articles\\/([^\\/]+)/);\n  const currentArticleSlug = articleMatch ? decodeURIComponent(articleMatch[1]) : null;\n\n  const { refs, floatingStyles, context } = useFloating({\n    open: isMenuOpen,\n    onOpenChange: setIsMenuOpen,\n    middleware: [offset(10), flip(), shift()],\n    whileElementsMounted: autoUpdate,\n    placement: \"top-end\",\n  });\n\n  const hover = useHover(context, { \n    move: false,\n    delay: { open: 100, close: 300 }\n  });\n  const focus = useFocus(context);\n  const dismiss = useDismiss(context);\n  const role = useRole(context);\n\n  const { getReferenceProps, getFloatingProps } = useInteractions([\n    hover,\n    focus,\n    dismiss,\n    role,\n  ]);\n\n\n  // Chat functions\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    if (isChatOpen && isSignedIn) {\n      checkSubscriptionStatus();\n      fetchChatHistory();\n    }\n  }, [isChatOpen, isSignedIn]);\n\n  const checkSubscriptionStatus = async () => {\n    try {\n      const response = await fetch('/api/subscription/status');\n      if (response.ok) {\n        const data = await response.json();\n        const canUseAI = data.tier === 'STANDARD' || data.tier === 'MAX';\n        setSubscriptionStatus({ canUseAI, loading: false });\n      } else {\n        setSubscriptionStatus({ canUseAI: false, loading: false });\n      }\n    } catch (error) {\n      console.error('Error checking subscription status:', error);\n      setSubscriptionStatus({ canUseAI: false, loading: false });\n    }\n  };\n\n  const fetchChatHistory = async () => {\n    setIsFetchingHistory(true);\n    try {\n      const response = await fetch(`/api/articles/${articleId}/chat`);\n      if (response.ok) {\n        const data = await response.json();\n        setMessages(data);\n      }\n    } catch (error) {\n      console.error('Error fetching chat history:', error);\n    } finally {\n      setIsFetchingHistory(false);\n    }\n  };\n\n  const handleChatSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!input.trim() || isLoading || !isSignedIn) return;\n\n    const userInput = input.trim();\n    setInput('');\n    \n    const tempUserMessage: Message = {\n      messageId: `temp-user-${Date.now()}`,\n      role: 'USER',\n      content: userInput,\n      createdAt: new Date().toISOString(),\n      exampleId: currentExampleId,\n    };\n    \n    setMessages(prev => [...prev, tempUserMessage]);\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(`/api/articles/${articleId}/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          content: userInput,\n          exampleId: currentExampleId,\n        }),\n      });\n\n      if (response.ok) {\n        const { userMessage, assistantMessage } = await response.json();\n        setMessages(prev => {\n          const filtered = prev.filter(msg => msg.messageId !== tempUserMessage.messageId);\n          return [...filtered, userMessage, assistantMessage];\n        });\n      } else {\n        setMessages(prev => prev.filter(msg => msg.messageId !== tempUserMessage.messageId));\n        \n        if (response.status === 403) {\n          setSubscriptionStatus({ canUseAI: false, loading: false });\n        }\n        \n        const errorData = await response.json();\n        console.error('Failed to send message:', errorData.error);\n      }\n    } catch (error) {\n      setMessages(prev => prev.filter(msg => msg.messageId !== tempUserMessage.messageId));\n      console.error('Error sending message:', error);\n    } finally {\n      setIsLoading(false);\n      inputRef.current?.focus();\n    }\n  };\n\n  // Groups functions\n  useEffect(() => {\n    if (currentArticleSlug) {\n      setCurrentArticleId(null);\n      fetch(`/api/articles?slug=${currentArticleSlug}`)\n        .then((res) => res.json())\n        .then((data) => {\n          if (data && data.length > 0) {\n            const articleId = data[0].articleId;\n            setCurrentArticleId(articleId);\n            \n            const storedScrollPosition = sessionStorage.getItem(`article-scroll-${articleId}`);\n            if (storedScrollPosition) {\n              const scrollPos = parseInt(storedScrollPosition, 10);\n              sessionStorage.removeItem(`article-scroll-${articleId}`);\n              \n              const attemptScroll = (attempts = 0) => {\n                if (attempts > 20) return;\n                \n                if (document.body.scrollHeight > window.innerHeight) {\n                  window.scrollTo({ top: scrollPos, behavior: \"instant\" });\n                  \n                  groups.forEach((group) => {\n                    const article = group.articles.find((a) => a.article.articleId === articleId);\n                    if (article) {\n                      fetch(`/api/article-groups/${group.groupId}/articles/${articleId}/scroll`, {\n                        method: \"PATCH\",\n                        headers: { \"Content-Type\": \"application/json\" },\n                        body: JSON.stringify({ scrollPosition: scrollPos }),\n                      });\n                    }\n                  });\n                } else {\n                  setTimeout(() => attemptScroll(attempts + 1), 100);\n                }\n              };\n              \n              setTimeout(() => attemptScroll(), 100);\n            }\n          }\n        })\n        .catch((error) => console.error(\"Error fetching article:\", error));\n    } else {\n      setCurrentArticleId(null);\n    }\n  }, [pathname, currentArticleSlug, groups]);\n\n  const fetchGroups = async () => {\n    setGroupsLoading(true);\n    try {\n      const response = await fetch(\"/api/article-groups\");\n      if (!response.ok) throw new Error(\"Failed to fetch groups\");\n      const data = await response.json();\n      setGroups(data);\n    } catch (error) {\n      toast.error(\"Failed to load article groups\");\n    } finally {\n      setGroupsLoading(false);\n    }\n  };\n\n  const createGroup = async () => {\n    if (!newGroupName.trim() || creating) return;\n    \n    if (!isSignedIn) {\n      toast.error(\"Please sign in to create article groups\");\n      return;\n    }\n\n    setCreating(true);\n    try {\n      const response = await fetch(\"/api/article-groups\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ name: newGroupName.trim() }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to create group\");\n      }\n      \n      await fetchGroups();\n      setNewGroupName(\"\");\n      setShowNewGroupInput(false);\n      toast.success(\"Group created successfully\");\n    } catch (error) {\n      console.error(\"Error creating group:\", error);\n      toast.error(error instanceof Error ? error.message : \"Failed to create group\");\n    } finally {\n      setCreating(false);\n    }\n  };\n\n  const deleteGroup = async (groupId: string) => {\n    try {\n      const response = await fetch(`/api/article-groups/${groupId}`, {\n        method: \"DELETE\",\n      });\n\n      if (!response.ok) throw new Error(\"Failed to delete group\");\n      \n      await fetchGroups();\n      toast.success(\"Group deleted successfully\");\n    } catch (error) {\n      toast.error(\"Failed to delete group\");\n    }\n  };\n\n  const addCurrentArticleToGroup = async (groupId: string) => {\n    if (!currentArticleId) {\n      toast.error(\"No article selected\");\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/article-groups/${groupId}/articles`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ articleId: currentArticleId }),\n      });\n\n      if (response.status === 409) {\n        toast.info(\"Article already in group\");\n        return;\n      }\n\n      if (!response.ok) throw new Error(\"Failed to add article\");\n      \n      await fetchGroups();\n      toast.success(\"Article added to group\");\n    } catch (error) {\n      toast.error(\"Failed to add article to group\");\n    }\n  };\n\n  const removeArticleFromGroup = async (groupId: string, articleId: string) => {\n    try {\n      const response = await fetch(\n        `/api/article-groups/${groupId}/articles?articleId=${articleId}`,\n        { method: \"DELETE\" }\n      );\n\n      if (!response.ok) throw new Error(\"Failed to remove article\");\n      \n      await fetchGroups();\n      toast.success(\"Article removed from group\");\n    } catch (error) {\n      toast.error(\"Failed to remove article from group\");\n    }\n  };\n\n  const saveScrollPosition = async (groupId: string, articleId: string) => {\n    const scrollPosition = window.scrollY;\n    \n    try {\n      await fetch(`/api/article-groups/${groupId}/articles/${articleId}/scroll`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ scrollPosition }),\n      });\n    } catch (error) {\n      console.error(\"Failed to save scroll position:\", error);\n    }\n  };\n\n  const navigateToArticle = async (\n    groupId: string,\n    articleId: string,\n    articleSlug: string,\n    scrollPosition: number\n  ) => {\n    if (currentArticleId && currentArticleId !== articleId) {\n      const currentGroup = groups.find((g) =>\n        g.articles.some((a) => a.article.articleId === currentArticleId)\n      );\n      if (currentGroup) {\n        await saveScrollPosition(currentGroup.groupId, currentArticleId);\n      }\n    }\n\n    sessionStorage.setItem(`article-scroll-${articleId}`, scrollPosition.toString());\n    router.push(`/articles/${articleSlug}`);\n  };\n\n  // Menu action handlers\n  const handleMenuAction = (action: MenuAction) => {\n    setActiveAction(action);\n    setIsMenuOpen(false);\n    \n    if (action === 'chat') {\n      setIsChatOpen(true);\n    } else if (action === 'groups') {\n      fetchGroups();\n    }\n  };\n\n  const closeAllActions = () => {\n    setActiveAction(null);\n    setIsChatOpen(false);\n    setShowNewGroupInput(false);\n    setExpandedGroup(null);\n  };\n\n  if (!isLoaded || !isSignedIn) {\n    return null;\n  }\n\n  return (\n    <>\n      {/* Floating multi-action button */}\n      <Button\n        ref={refs.setReference}\n        className=\"fixed bottom-4 right-4 z-40 h-14 w-14 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 bg-black hover:bg-gray-800 text-white border-0\"\n        size=\"icon\"\n        {...getReferenceProps()}\n        title=\"Actions Menu\"\n      >\n        <MoreVertical className=\"h-6 w-6\" />\n      </Button>\n\n      {/* Menu popup */}\n      {isMenuOpen && (\n        <FloatingPortal>\n          <div\n            ref={refs.setFloating}\n            style={floatingStyles}\n            {...getFloatingProps()}\n            className=\"z-50 bg-white dark:bg-gray-900 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden\"\n          >\n            <div className=\"p-2 space-y-1\">\n              <Button\n                onClick={() => handleMenuAction('chat')}\n                className=\"w-full justify-start gap-3 text-left bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-200 border-0 transition-colors\"\n                size=\"sm\"\n              >\n                <MessageCircle className=\"h-4 w-4\" />\n                AI Chat\n              </Button>\n              <Button\n                onClick={() => handleMenuAction('groups')}\n                className=\"w-full justify-start gap-3 text-left bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-200 border-0 transition-colors\"\n                size=\"sm\"\n              >\n                <FolderOpen className=\"h-4 w-4\" />\n                Article Groups\n              </Button>\n            </div>\n          </div>\n        </FloatingPortal>\n      )}\n\n      {/* Chat interface */}\n      {isChatOpen && (\n        <div className=\"fixed bottom-0 right-0 w-full sm:w-96 h-[600px] bg-white dark:bg-gray-900 shadow-2xl rounded-t-lg sm:rounded-tl-lg border border-gray-200 dark:border-gray-700 z-50 flex flex-col\">\n          <div className=\"flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center gap-2\">\n              <MessageCircle className=\"h-5 w-5 text-gray-700 dark:text-gray-200\" />\n              <h3 className=\"font-semibold\">AI Tutor</h3>\n            </div>\n            <button\n              onClick={() => setIsChatOpen(false)}\n              className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n              aria-label=\"Close chat\"\n            >\n              <X className=\"h-5 w-5\" />\n            </button>\n          </div>\n\n          <div className=\"flex-1 overflow-y-auto p-4\">\n            {subscriptionStatus.loading || isFetchingHistory ? (\n              <div className=\"flex items-center justify-center h-full\">\n                <Loader2 className=\"h-6 w-6 animate-spin text-gray-400\" />\n              </div>\n            ) : !subscriptionStatus.canUseAI ? (\n              <div className=\"text-center mt-8 px-4\">\n                <Lock className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n                <h3 className=\"text-lg font-semibold mb-2\">AI Chat is a Premium Feature</h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-6\">\n                  Upgrade to Standard or Max plan to get unlimited access to our AI tutor who can help you understand concepts and answer questions about the articles.\n                </p>\n                <button\n                  onClick={() => router.push('/pricing')}\n                  className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\n                >\n                  View Pricing Plans\n                </button>\n              </div>\n            ) : messages.length === 0 ? (\n              <div className=\"text-center text-gray-500 dark:text-gray-400 mt-8\">\n                <MessageCircle className=\"h-12 w-12 mx-auto mb-4 text-gray-300 dark:text-gray-600\" />\n                <p className=\"text-sm\">Ask me anything about this article!</p>\n                {currentExampleId && (\n                  <p className=\"text-xs mt-2\">I can help you understand this quiz question.</p>\n                )}\n              </div>\n            ) : (\n              <>\n                {messages.map((message) => (\n                  <ChatMessage\n                    key={message.messageId}\n                    role={message.role}\n                    content={message.content}\n                    createdAt={message.createdAt}\n                  />\n                ))}\n                {isLoading && (\n                  <div className=\"flex justify-start mb-4\">\n                    <div className=\"max-w-[70%] rounded-lg px-4 py-2 bg-gray-100 dark:bg-gray-800\">\n                      <div className=\"flex items-center gap-2\">\n                        <Loader2 className=\"h-4 w-4 animate-spin text-gray-500\" />\n                        <span className=\"text-sm text-gray-500\">AI is thinking...</span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                <div ref={messagesEndRef} />\n              </>\n            )}\n          </div>\n\n          {subscriptionStatus.canUseAI && (\n            <form onSubmit={handleChatSubmit} className=\"p-4 border-t border-gray-200 dark:border-gray-700\">\n              <div className=\"flex gap-2\">\n                <textarea\n                  ref={inputRef}\n                  value={input}\n                  onChange={(e) => setInput(e.target.value)}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter' && !e.shiftKey) {\n                      e.preventDefault();\n                      handleChatSubmit(e);\n                    }\n                  }}\n                  placeholder=\"Ask a question...\"\n                  className=\"flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white resize-none\"\n                  rows={1}\n                  disabled={isLoading}\n                />\n                <button\n                  type=\"submit\"\n                  disabled={!input.trim() || isLoading}\n                  className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                >\n                  {isLoading ? (\n                    <Loader2 className=\"h-5 w-5 animate-spin\" />\n                  ) : (\n                    <Send className=\"h-5 w-5\" />\n                  )}\n                </button>\n              </div>\n            </form>\n          )}\n        </div>\n      )}\n\n      {/* Groups interface */}\n      {activeAction === 'groups' && (\n        <div className=\"fixed bottom-0 right-0 w-full sm:w-96 h-[600px] bg-white dark:bg-gray-900 shadow-2xl rounded-t-lg sm:rounded-tl-lg border border-gray-200 dark:border-gray-700 z-50 flex flex-col\">\n          <div className=\"flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center gap-2\">\n              <FolderOpen className=\"h-5 w-5 text-gray-700 dark:text-gray-200\" />\n              <h3 className=\"font-semibold text-gray-100\">Article Groups</h3>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={() => setShowNewGroupInput(!showNewGroupInput)}\n                className=\"hover:bg-gray-100 dark:hover:bg-gray-800\"\n                title=\"Create new group\"\n              >\n                <Plus className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n              </Button>\n              <button\n                onClick={closeAllActions}\n                className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n                aria-label=\"Close groups\"\n              >\n                <X className=\"h-5 w-5\" />\n              </button>\n            </div>\n          </div>\n\n          <div className=\"flex-1 overflow-y-auto p-4\">\n            {showNewGroupInput && (\n              <form onSubmit={(e) => { e.preventDefault(); createGroup(); }} className=\"mb-4 flex gap-2\">\n                <Input\n                  placeholder=\"Group name...\"\n                  value={newGroupName}\n                  onChange={(e) => setNewGroupName(e.target.value)}\n                  className=\"flex-1\"\n                  autoFocus\n                />\n                <Button \n                  size=\"sm\" \n                  type=\"submit\"\n                  disabled={!newGroupName.trim() || creating}\n                  className=\"bg-gray-700 hover:bg-gray-800 dark:bg-gray-600 dark:hover:bg-gray-700 text-white disabled:opacity-50\"\n                >\n                  {creating ? (\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  ) : (\n                    \"Add\"\n                  )}\n                </Button>\n                <Button\n                  size=\"sm\"\n                  type=\"button\"\n                  variant=\"ghost\"\n                  onClick={() => {\n                    setShowNewGroupInput(false);\n                    setNewGroupName(\"\");\n                  }}\n                  className=\"hover:bg-gray-100 dark:hover:bg-gray-800\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </form>\n            )}\n\n            {groupsLoading ? (\n              <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                <Loader2 className=\"h-6 w-6 animate-spin mx-auto mb-2\" />\n                Loading...\n              </div>\n            ) : groups.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                <FolderOpen className=\"h-12 w-12 mx-auto mb-3 text-gray-300 dark:text-gray-600\" />\n                <p className=\"text-sm\">No groups yet.</p>\n                <p className=\"text-sm\">Click the + button to create one!</p>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {groups.map((group) => (\n                  <GroupItem\n                    key={group.groupId}\n                    group={group}\n                    currentArticleId={currentArticleId}\n                    currentArticleSlug={currentArticleSlug}\n                    onDelete={deleteGroup}\n                    onAddCurrentArticle={addCurrentArticleToGroup}\n                    onRemoveArticle={removeArticleFromGroup}\n                    onNavigateToArticle={navigateToArticle}\n                    isExpanded={expandedGroup === group.groupId}\n                    onToggleExpand={(groupId) => setExpandedGroup(expandedGroup === groupId ? null : groupId)}\n                  />\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\n// Group item component (same as original but extracted)\ninterface GroupItemProps {\n  group: ArticleGroup;\n  currentArticleId: string | null;\n  currentArticleSlug: string | null;\n  onDelete: (groupId: string) => void;\n  onAddCurrentArticle: (groupId: string) => void;\n  onRemoveArticle: (groupId: string, articleId: string) => void;\n  onNavigateToArticle: (\n    groupId: string,\n    articleId: string,\n    articleSlug: string,\n    scrollPosition: number\n  ) => void;\n  isExpanded: boolean;\n  onToggleExpand: (groupId: string) => void;\n}\n\nfunction GroupItem({\n  group,\n  currentArticleId,\n  currentArticleSlug,\n  onDelete,\n  onAddCurrentArticle,\n  onRemoveArticle,\n  onNavigateToArticle,\n  isExpanded,\n  onToggleExpand,\n}: GroupItemProps) {\n  return (\n    <div className=\"border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden\">\n      <div\n        className=\"flex items-center justify-between p-3 hover:bg-gray-100 dark:hover:bg-gray-800 cursor-pointer group transition-colors\"\n        onClick={() => onToggleExpand(group.groupId)}\n      >\n        <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n          <ChevronRight \n            className={`h-4 w-4 text-gray-400 dark:text-gray-500 flex-shrink-0 transition-transform duration-200 ${\n              isExpanded ? 'rotate-90' : ''\n            }`} \n          />\n          <span className=\"truncate text-gray-900 dark:text-gray-100\">{group.name}</span>\n          <span className=\"text-xs text-gray-500 dark:text-gray-400 flex-shrink-0\">\n            ({group.articles.length})\n          </span>\n        </div>\n        <div className=\"flex gap-1\">\n          {currentArticleId && (\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              className=\"h-7 w-7 hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onAddCurrentArticle(group.groupId);\n              }}\n              title=\"Add current article to this group\"\n            >\n              <Plus className=\"h-3 w-3\" />\n            </Button>\n          )}\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            className=\"h-7 w-7 text-red-500 hover:text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 opacity-0 group-hover:opacity-100 transition-opacity\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onDelete(group.groupId);\n            }}\n            title=\"Delete this group\"\n          >\n            <Trash2 className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </div>\n\n      {isExpanded && group.articles.length > 0 && (\n        <div className=\"border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50\">\n          <div className=\"p-2 space-y-1 max-h-64 overflow-y-auto\">\n            {group.articles.map((item) => {\n              const isCurrentArticle = item.article.articleId === currentArticleId || \n                                     (currentArticleSlug && item.article.articleSlug === currentArticleSlug);\n              return (\n                <div\n                  key={item.id}\n                  className={`flex items-center justify-between p-2 rounded-lg cursor-pointer group/article transition-colors ${\n                    isCurrentArticle \n                      ? 'bg-blue-100 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-800' \n                      : 'hover:bg-white dark:hover:bg-gray-800'\n                  }`}\n                  onClick={() =>\n                    onNavigateToArticle(\n                      group.groupId,\n                      item.article.articleId,\n                      item.article.articleSlug,\n                      item.scrollPosition\n                    )\n                  }\n                >\n                  <span className={`text-sm truncate flex-1 pl-6 ${\n                    isCurrentArticle \n                      ? 'text-blue-700 dark:text-blue-300 font-medium' \n                      : 'text-gray-700 dark:text-gray-300'\n                  }`}>\n                    {item.article.articleTitle}\n                  </span>\n                <button\n                  className=\"h-7 w-7 flex items-center justify-center text-gray-100 hover:text-red-300 hover:bg-red-900/30 rounded transition-colors ml-2 flex-shrink-0 bg-gray-700/50\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onRemoveArticle(group.groupId, item.article.articleId);\n                  }}\n                  title=\"Remove from group\"\n                  type=\"button\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </button>\n              </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n      \n      {isExpanded && group.articles.length === 0 && (\n        <div className=\"border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50 p-4 text-center text-sm text-gray-500 dark:text-gray-400\">\n          No articles in this group yet\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/like-button.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkLikeStatus'. Either include it or remove the dependency array.","line":24,"column":6,"nodeType":"ArrayExpression","endLine":24,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [isSignedIn, articleId, checkLikeStatus]","fix":{"range":[631,654],"text":"[isSignedIn, articleId, checkLikeStatus]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Heart } from \"lucide-react\";\nimport { useUser } from \"@clerk/nextjs\";\nimport { useRouter } from \"next/navigation\";\n\ninterface LikeButtonProps {\n  articleId: string;\n  className?: string;\n  iconOnly?: boolean;\n}\n\nexport default function LikeButton({ articleId, className = \"\", iconOnly = false }: LikeButtonProps) {\n  const [isLiked, setIsLiked] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { isSignedIn } = useUser();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (isSignedIn) {\n      checkLikeStatus();\n    }\n  }, [isSignedIn, articleId]);\n\n  const checkLikeStatus = async () => {\n    try {\n      const response = await fetch(`/api/articles/${articleId}/like`);\n      if (response.ok) {\n        const data = await response.json();\n        setIsLiked(data.isLiked);\n      }\n    } catch (error) {\n      console.error(\"Error checking like status:\", error);\n    }\n  };\n\n  const handleLike = async () => {\n    if (!isSignedIn) {\n      router.push(\"/sign-in\");\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await fetch(`/api/articles/${articleId}/like`, {\n        method: \"POST\",\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setIsLiked(data.isLiked);\n      }\n    } catch (error) {\n      console.error(\"Error toggling like:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <button\n      onClick={handleLike}\n      disabled={isLoading}\n      className={`inline-flex items-center ${iconOnly ? \"justify-center p-2\" : \"gap-2 px-3 py-2\"} text-sm font-medium rounded-md transition-colors ${\n        isLiked\n          ? \"bg-red-100 text-red-700 hover:bg-red-200\"\n          : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\n      } disabled:opacity-50 disabled:cursor-not-allowed ${className}`}\n      title={isLiked ? \"Unlike article\" : \"Like article\"}\n    >\n      <Heart\n        className={`h-4 w-4 ${isLiked ? \"fill-current\" : \"\"}`}\n      />\n      {!iconOnly && <span>{isLiked ? \"Liked\" : \"Like\"}</span>}\n    </button>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/markdown-viewer.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3309,3312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3309,3312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport rehypeHighlight from 'rehype-highlight';\nimport { Copy, Check } from 'lucide-react';\nimport 'highlight.js/styles/github-dark.css';\n\ninterface MarkdownViewerProps {\n  content: string;\n  removeFirstHeading?: boolean;\n}\n\nexport default function MarkdownViewer({ content, removeFirstHeading = false }: MarkdownViewerProps) {\n  const [copiedCode, setCopiedCode] = useState<string | null>(null);\n\n  const copyToClipboard = async (code: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      setCopiedCode(code);\n      setTimeout(() => setCopiedCode(null), 2000);\n    } catch (error) {\n      console.error('Failed to copy code to clipboard:', error);\n      // Fallback for older browsers or when clipboard API is not available\n      const textArea = document.createElement('textarea');\n      textArea.value = code;\n      textArea.style.position = 'fixed';\n      textArea.style.left = '-999999px';\n      textArea.style.top = '-999999px';\n      document.body.appendChild(textArea);\n      textArea.focus();\n      textArea.select();\n      try {\n        document.execCommand('copy');\n        setCopiedCode(code);\n        setTimeout(() => setCopiedCode(null), 2000);\n      } catch (fallbackError) {\n        console.error('Fallback copy method also failed:', fallbackError);\n      }\n      document.body.removeChild(textArea);\n    }\n  };\n\n  // Remove the first H1 heading if requested\n  let processedContent = content;\n  if (removeFirstHeading) {\n    // Match the first H1 heading (# Title at the beginning of a line)\n    processedContent = content.replace(/^#\\s+[^\\n]+\\n/, '');\n  }\n\n  return (\n    <div className=\"prose prose-lg max-w-none\n      prose-headings:text-gray-900 prose-headings:font-bold\n      prose-h1:text-4xl prose-h1:mb-4 prose-h1:mt-8\n      prose-h2:text-3xl prose-h2:mb-3 prose-h2:mt-6\n      prose-h3:text-2xl prose-h3:mb-2 prose-h3:mt-4\n      prose-p:text-gray-700 prose-p:leading-relaxed prose-p:mb-4\n      prose-strong:text-gray-900 prose-strong:font-semibold\n      prose-a:text-blue-600 prose-a:underline hover:prose-a:text-blue-700\n      prose-code:text-pink-600 prose-code:bg-gray-100 prose-code:px-1 prose-code:py-0.5 prose-code:rounded prose-code:text-sm\n      prose-pre:bg-gray-900 prose-pre:text-gray-100 prose-pre:overflow-x-auto prose-pre:rounded-lg prose-pre:p-4\n      prose-pre:my-4 prose-pre:shadow-lg\n      prose-ul:list-disc prose-ul:pl-6 prose-ul:my-4\n      prose-ol:list-decimal prose-ol:pl-6 prose-ol:my-4\n      prose-li:text-gray-700 prose-li:mb-2\n      prose-blockquote:border-l-4 prose-blockquote:border-gray-300 prose-blockquote:pl-4 prose-blockquote:italic prose-blockquote:text-gray-600\n      prose-table:border-collapse prose-table:w-full prose-table:my-4\n      prose-th:border prose-th:border-gray-300 prose-th:px-4 prose-th:py-2 prose-th:bg-gray-100 prose-th:font-semibold\n      prose-td:border prose-td:border-gray-300 prose-td:px-4 prose-td:py-2\">\n      <ReactMarkdown\n        remarkPlugins={[remarkGfm]}\n        rehypePlugins={[rehypeHighlight]}\n        components={{\n        pre: ({ children, ...props }) => {\n          // Extract text content from the code element\n          const extractTextContent = (element: any): string => {\n            if (typeof element === 'string') {\n              return element;\n            }\n            if (Array.isArray(element)) {\n              return element.map(extractTextContent).join('');\n            }\n            if (element?.props?.children) {\n              return extractTextContent(element.props.children);\n            }\n            return '';\n          };\n          \n          const codeString = extractTextContent(children);\n          \n          return (\n            <div className=\"relative group\">\n              <pre {...props} className=\"bg-gray-900 text-gray-100 overflow-x-auto rounded-lg p-4 my-4 shadow-lg\">\n                {children}\n              </pre>\n              <button\n                onClick={() => copyToClipboard(codeString)}\n                className=\"absolute top-2 right-2 p-2 rounded bg-gray-700 hover:bg-gray-600 opacity-0 group-hover:opacity-100 transition-opacity\"\n                title=\"Copy code\"\n              >\n                {copiedCode === codeString ? (\n                  <Check className=\"w-4 h-4 text-green-400\" />\n                ) : (\n                  <Copy className=\"w-4 h-4 text-gray-300\" />\n                )}\n              </button>\n            </div>\n          );\n        },\n        code: ({ className, children, ...props }) => {\n          const match = /language-(\\w+)/.exec(className || '');\n          const isInline = !match;\n          \n          if (isInline) {\n            return (\n              <code className=\"text-pink-600 bg-gray-100 px-1 py-0.5 rounded text-sm font-mono\" {...props}>\n                {children}\n              </code>\n            );\n          }\n          \n          return (\n            <code className={className} {...props}>\n              {children}\n            </code>\n          );\n        },\n        }}\n      >\n        {processedContent}\n      </ReactMarkdown>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/navbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/role-guard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userRole' is assigned a value but never used.","line":20,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Role } from \"@prisma/client\";\nimport { ReactNode } from \"react\";\n\ntype RoleGuardProps = {\n  children: ReactNode;\n  requiredRole?: Role | Role[];\n  minRole?: Role;\n  fallback?: ReactNode;\n};\n\nexport function RoleGuard({ \n  children, \n  requiredRole, \n  minRole, \n  fallback = null \n}: RoleGuardProps) {\n  const { userRole, isLoadingRole, hasRole, hasMinRole } = useAuth();\n\n  if (isLoadingRole) {\n    return (\n      <div className=\"flex items-center justify-center p-4\">\n        <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  const hasRequiredRole = requiredRole ? hasRole(requiredRole) : true;\n  const hasMinimumRole = minRole ? hasMinRole(minRole) : true;\n\n  if (!hasRequiredRole || !hasMinimumRole) {\n    return <>{fallback}</>;\n  }\n\n  return <>{children}</>;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/subscription-status.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/ui/input.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":28,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[73,150],"text":"type InputProps = React.InputHTMLAttributes<HTMLInputElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-base ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-gray-900 placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-orange-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/components/ui/textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[73,159],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-base ring-offset-white placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-orange-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/hooks/use-auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/hooks/use-subscription.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/lib/ai-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3394,3397],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3394,3397],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'processedContent' is never reassigned. Use 'const' instead.","line":728,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":728,"endColumn":25,"fix":{"range":[27171,27209],"text":"const processedContent = articleContent;"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":963,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":963,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[35816,35819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[35816,35819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { createOpenAI } from '@ai-sdk/openai';\nimport { createGoogleGenerativeAI } from '@ai-sdk/google';\nimport { createAnthropic } from '@ai-sdk/anthropic';\nimport { generateObject, generateText } from 'ai';\nimport { z } from 'zod';\nimport { prisma } from './prisma';\nimport crypto from 'crypto';\nimport { createPatch } from 'diff';\n\n// Encryption key for API keys (in production, use a proper key management service)\nconst ENCRYPTION_KEY = process.env.AI_API_KEY_ENCRYPTION_KEY || 'default-key-for-development-only';\n\n// Utility functions for API key encryption/decryption\nfunction encryptApiKey(apiKey: string): string {\n  if (!apiKey) return '';\n  const algorithm = 'aes-256-cbc';\n  const key = crypto.scryptSync(ENCRYPTION_KEY, 'salt', 32);\n  const iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv(algorithm, key, iv);\n  let encrypted = cipher.update(apiKey, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  return iv.toString('hex') + ':' + encrypted;\n}\n\nfunction decryptApiKey(encryptedApiKey: string): string {\n  if (!encryptedApiKey) return '';\n  try {\n    const algorithm = 'aes-256-cbc';\n    const key = crypto.scryptSync(ENCRYPTION_KEY, 'salt', 32);\n    const parts = encryptedApiKey.split(':');\n    if (parts.length !== 2) return '';\n    const iv = Buffer.from(parts[0], 'hex');\n    const encryptedText = parts[1];\n    const decipher = crypto.createDecipheriv(algorithm, key, iv);\n    let decrypted = decipher.update(encryptedText, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    return decrypted;\n  } catch (error) {\n    console.error('Failed to decrypt API key:', error);\n    return '';\n  }\n}\n\n// Initialize providers with database models\nasync function createProviderForModel(modelId: string) {\n  const model = await prisma.aIModel.findUnique({\n    where: { modelId, isActive: true }\n  });\n  \n  if (!model) {\n    throw new Error(`Model ${modelId} not found or inactive`);\n  }\n  \n  const apiKey = decryptApiKey(model.apiKey);\n  if (!apiKey) {\n    throw new Error(`No API key found for model ${modelId}`);\n  }\n  \n  switch (model.provider) {\n    case 'openai':\n      return createOpenAI({ apiKey })(model.modelName);\n    case 'google':\n      return createGoogleGenerativeAI({ apiKey })(model.modelName);\n    case 'anthropic':\n      return createAnthropic({ apiKey })(model.modelName);\n    default:\n      throw new Error(`Unsupported provider: ${model.provider}`);\n  }\n}\n\n// Get model for specific interaction type\nasync function getModelForInteraction(interactionTypeName: string) {\n  const interactionType = await prisma.aIInteractionType.findUnique({\n    where: { typeName: interactionTypeName },\n    include: { defaultModel: true }\n  });\n  \n  if (!interactionType?.defaultModel) {\n    // Fallback to any active default model\n    const defaultModel = await prisma.aIModel.findFirst({\n      where: { isActive: true, isDefault: true }\n    });\n    \n    if (!defaultModel) {\n      throw new Error(`No active model found for interaction type: ${interactionTypeName}`);\n    }\n    \n    return { model: defaultModel, interactionType };\n  }\n  \n  return { model: interactionType.defaultModel, interactionType };\n}\n\n// Track AI interaction\nasync function trackAIInteraction(\n  modelId: string,\n  interactionTypeId: string,\n  clerkUserId: string | null,\n  inputTokens: number,\n  outputTokens: number,\n  startTime: Date,\n  endTime: Date,\n  contextData?: any,\n  prompt?: string,\n  response?: string,\n  errorMessage?: string\n) {\n  const model = await prisma.aIModel.findUnique({\n    where: { modelId }\n  });\n  \n  if (!model) {\n    console.error(`Model ${modelId} not found for tracking`);\n    return;\n  }\n  \n  const inputCost = (inputTokens / 1000000) * Number(model.inputTokenCostPer1M);\n  const outputCost = (outputTokens / 1000000) * Number(model.outputTokenCostPer1M);\n  const totalCost = inputCost + outputCost;\n  \n  const durationMs = endTime.getTime() - startTime.getTime();\n  \n  try {\n    await prisma.aIInteraction.create({\n      data: {\n        modelId,\n        interactionTypeId,\n        clerkUserId,\n        inputTokens,\n        outputTokens,\n        inputTokenCost: inputCost,\n        outputTokenCost: outputCost,\n        totalCost: totalCost,\n        prompt: prompt?.substring(0, 5000), // Limit prompt length for storage\n        response: response?.substring(0, 10000), // Limit response length for storage\n        contextData,\n        startedAt: startTime,\n        completedAt: endTime,\n        durationMs,\n        isSuccessful: !errorMessage,\n        errorMessage\n      }\n    });\n  } catch (error) {\n    console.error('Failed to track AI interaction:', error);\n  }\n}\n\n// Schema definitions for structured outputs\nexport const CategorySuggestionSchema = z.object({\n  name: z.string(),\n  description: z.string().optional(),\n});\n\nexport const ArticleSuggestionSchema = z.object({\n  title: z.string(),\n  target_category_names: z.array(z.string()).min(1),\n  primary_category_name: z.string(),\n});\n\nexport const AISearchResponseSchema = z.object({\n  suggested_new_categories: z.array(CategorySuggestionSchema),\n  suggested_new_article_titles: z.array(ArticleSuggestionSchema),\n});\n\nexport const InteractiveExampleSchema = z.object({\n  question_type: z.enum(['multiple_choice', 'text_input', 'command_line']),\n  scenario_or_question_text: z.string(),\n  options_json: z.array(z.object({\n    id: z.string(),\n    text: z.string(),\n  })).optional(),\n  correct_answer_key_or_text: z.string(),\n  correct_answer_description: z.string(),\n  ai_marking_prompt_hint: z.string().optional(),\n});\n\nexport const ExampleGenerationResponseSchema = z.object({\n  examples: z.array(InteractiveExampleSchema),\n});\n\nexport const MarkingResponseSchema = z.object({\n  is_correct: z.boolean(),\n  feedback: z.string(),\n});\n\nexport const ReorderResultsSchema = z.object({\n  reordered_article_ids: z.array(z.string()),\n  explanation: z.string().optional(),\n});\n\nexport const KeywordExtractionSchema = z.object({\n  keywords: z.array(z.string()),\n  search_intent: z.string(),\n  suggested_search_terms: z.array(z.string()),\n});\n\nexport const TagSuggestionSchema = z.object({\n  tagName: z.string(),\n  description: z.string().optional(),\n  color: z.string().optional(),\n});\n\nexport const TagSelectionResponseSchema = z.object({\n  existing_tags: z.array(z.string()), // Tag IDs of existing tags to use\n  new_tags: z.array(TagSuggestionSchema), // New tags to create\n  explanation: z.string().optional(),\n});\n\nexport const ArticleSuggestionValidationSchema = z.object({\n  isValid: z.boolean(),\n  reason: z.string(),\n  updatedContent: z.string().nullable(),\n  diff: z.string().nullable(),\n  description: z.string().nullable(),\n});\n\n// Enhanced AI Service functions with database tracking\nexport const aiService = {\n  async generateSearchSuggestions(query: string, allCategories: { categoryName: string; description: string | null }[], existingArticles: { title: string; category: string }[], articlesToGenerate: number = 5, clerkUserId: string | null = null) {\n    const systemPrompt = `You are an AI assistant helping users find and discover IT-related content. Based on their search query, suggest relevant categories and article titles that would be helpful. \n\nIMPORTANT: \n1. Articles can belong to MULTIPLE categories. Assign articles to ALL relevant categories, not just one.\n2. When suggesting articles, you MUST prefer using existing categories whenever possible. Only suggest new categories if none of the existing categories are appropriate.\n3. Keep category names GENERIC and SIMPLE (e.g., \"Docker\", \"Kubernetes\", \"Python\", \"Programming\", NOT \"Docker Basics\" or \"Advanced Python\")\n4. Be precise about technology distinctions - Docker and Docker Swarm are different, Kubernetes and OpenShift are different, etc.\n5. Consider fundamental categories like \"Programming\", \"DevOps\", \"Security\", \"Networking\", etc. for articles that fit these broader topics.`;\n    \n    const userPrompt = `User's search query: \"${query}\"\n    \nALL EXISTING CATEGORIES in the system (use these whenever possible):\n${allCategories.map(cat => `- ${cat.categoryName}${cat.description ? `: ${cat.description}` : ''}`).join('\\n')}\n\nExisting articles related to this search: ${JSON.stringify(existingArticles)}\n\nPlease suggest exactly ${articlesToGenerate} new article titles that would be helpful for this search.\n\nSPECIAL ATTENTION FOR \"HOW TO\" QUESTIONS:\nIf the user's query is a specific \"how to\" question (like \"How to reclaim space used by docker\"), prioritize creating articles that DIRECTLY answer that specific question with practical steps and commands.\n\nCRITICAL RULES:\n1. Each article should have MULTIPLE categories:\n   - target_category_names: An array of ALL relevant category names\n   - primary_category_name: The MOST specific/relevant category (from target_category_names)\n2. For each article, assign it to ALL applicable categories:\n   - The specific technology category (e.g., \"LISP\", \"Python\", \"Docker\")\n   - Fundamental categories (e.g., \"Programming\", \"DevOps\", \"AI\")\n   - Domain categories if applicable (e.g., \"Web Development\", \"Data Science\")\n3. Use exact category names from the list above when they exist\n4. Only suggest new categories if essential (especially for fundamental categories like \"Programming\")\n5. NEW CATEGORY NAMES MUST BE:\n   - Generic and simple (e.g., \"Programming\", \"Docker Swarm\", not \"Docker Swarm Basics\")\n   - Just the technology/tool/domain name without qualifiers\n   - Distinct from related technologies\n6. If suggesting a new category, provide a clear description\n7. Don't suggest article titles that already exist\n8. Articles must be SPECIFICALLY about the searched technology\n9. For \"how to\" queries, create titles that directly address the specific task\n\nEXAMPLE: An article about \"LISP Programming Tutorial\" should have:\n- target_category_names: [\"LISP\", \"Programming\", \"AI\"] (if AI category exists and is relevant)\n- primary_category_name: \"LISP\" (most specific)`;\n\n    const startTime = new Date();\n    let result, error;\n    \n    try {\n      const { model, interactionType } = await getModelForInteraction('search_suggestions');\n      const aiModel = await createProviderForModel(model.modelId);\n      \n      result = await generateObject({\n        model: aiModel,\n        system: systemPrompt,\n        prompt: userPrompt,\n        schema: AISearchResponseSchema,\n        temperature: 0.7,\n        maxTokens: 1000,\n      });\n      \n      const endTime = new Date();\n      \n      // Track the interaction\n      await trackAIInteraction(\n        model.modelId,\n        interactionType.typeId,\n        clerkUserId,\n        result.usage?.promptTokens || 0,\n        result.usage?.completionTokens || 0,\n        startTime,\n        endTime,\n        { query, categoriesCount: allCategories.length, articlesCount: existingArticles.length },\n        userPrompt,\n        JSON.stringify(result.object)\n      );\n      \n      return result.object;\n    } catch (err) {\n      error = err;\n      const endTime = new Date();\n      \n      // Try to get model info for error tracking\n      try {\n        const { model, interactionType } = await getModelForInteraction('search_suggestions');\n        await trackAIInteraction(\n          model.modelId,\n          interactionType.typeId,\n          clerkUserId,\n          0,\n          0,\n          startTime,\n          endTime,\n          { query, categoriesCount: allCategories.length, articlesCount: existingArticles.length },\n          userPrompt,\n          undefined,\n          String(err)\n        );\n      } catch (trackingError) {\n        console.error('Failed to track error:', trackingError);\n      }\n      \n      throw error;\n    }\n  },\n\n  async generateArticleContent(title: string, categoryName: string, clerkUserId: string | null = null) {\n    const systemPrompt = `You are an expert IT technical writer. Create comprehensive, detailed articles in Markdown format with proper headings, code examples, and clear explanations. Include practical examples and real-world scenarios. \n\nIMPORTANT: Output pure Markdown content only. Do NOT wrap the entire response in code blocks. Start directly with the article title using # heading.`;\n    \n    const userPrompt = `Write a comprehensive IT article about \"${title}\" in the category \"${categoryName}\".\n\nRequirements:\n1. Start directly with the title using # (h1 heading)\n2. Use proper Markdown formatting with # for h1, ## for h2, etc.\n3. Include code examples with proper syntax highlighting (use triple backticks with language specification for code blocks ONLY)\n4. Add practical examples and real-world use cases\n5. Structure with clear sections: Introduction, Key Concepts, Examples, Best Practices, Common Issues, Conclusion\n6. Make it educational and practical for IT professionals\n7. Include command-line examples where relevant\n8. Aim for 1500-2500 words of high-quality content\n\nRemember: Output raw Markdown text, NOT wrapped in any code blocks.`;\n\n    const startTime = new Date();\n    let result, error;\n    \n    try {\n      const { model, interactionType } = await getModelForInteraction('article_generation');\n      const aiModel = await createProviderForModel(model.modelId);\n      \n      result = await generateText({\n        model: aiModel,\n        system: systemPrompt,\n        prompt: userPrompt,\n        temperature: 0.7,\n        maxTokens: 4000,\n      });\n\n      const endTime = new Date();\n      \n      // Clean up any accidental code block wrappers\n      let content = result.text.trim();\n      if (content.startsWith('```markdown\\n') && content.endsWith('\\n```')) {\n        content = content.slice(12, -4).trim();\n      } else if (content.startsWith('```\\n') && content.endsWith('\\n```')) {\n        content = content.slice(4, -4).trim();\n      }\n      \n      // Track the interaction\n      await trackAIInteraction(\n        model.modelId,\n        interactionType.typeId,\n        clerkUserId,\n        result.usage?.promptTokens || 0,\n        result.usage?.completionTokens || 0,\n        startTime,\n        endTime,\n        { title, categoryName },\n        userPrompt,\n        content\n      );\n\n      return {\n        title,\n        content,\n        metaDescription: `Learn about ${title} in ${categoryName}. Comprehensive guide with examples and best practices.`\n      };\n    } catch (err) {\n      error = err;\n      const endTime = new Date();\n      \n      // Try to get model info for error tracking\n      try {\n        const { model, interactionType } = await getModelForInteraction('article_generation');\n        await trackAIInteraction(\n          model.modelId,\n          interactionType.typeId,\n          clerkUserId,\n          0,\n          0,\n          startTime,\n          endTime,\n          { title, categoryName },\n          userPrompt,\n          undefined,\n          String(err)\n        );\n      } catch (trackingError) {\n        console.error('Failed to track error:', trackingError);\n      }\n      \n      throw error;\n    }\n  },\n\n  async generateInteractiveExamples(articleTitle: string, categoryName: string, existingQuestions: string[], clerkUserId: string | null = null) {\n    const systemPrompt = `You are an IT education expert creating interactive examples. Generate diverse, practical questions that test real understanding. Focus on real-world scenarios that IT professionals would encounter.`;\n    \n    const userPrompt = `Based on the IT article titled \"${articleTitle}\" in the category \"${categoryName}\", generate 3-5 unique interactive examples to test understanding.\n\n${existingQuestions.length > 0 ? `Avoid these existing questions: ${JSON.stringify(existingQuestions)}` : ''}\n\nFor each example:\n- Choose question type intelligently from 'multiple_choice', 'text_input', or 'command_line'\n- Create practical, real-world scenarios\n- For multiple choice, provide 4-5 plausible options with format: {\"id\": \"a\", \"text\": \"Option text\"}\n- Include clear explanations for correct answers\n- Add keywords for AI marking (for text/command line questions)`;\n\n    const startTime = new Date();\n    let result, error;\n    \n    try {\n      const { model, interactionType } = await getModelForInteraction('interactive_examples');\n      const aiModel = await createProviderForModel(model.modelId);\n      \n      result = await generateObject({\n        model: aiModel,\n        system: systemPrompt,\n        prompt: userPrompt,\n        schema: ExampleGenerationResponseSchema,\n        temperature: 0.8,\n        maxTokens: 2000,\n      });\n      \n      const endTime = new Date();\n      \n      // Track the interaction\n      await trackAIInteraction(\n        model.modelId,\n        interactionType.typeId,\n        clerkUserId,\n        result.usage?.promptTokens || 0,\n        result.usage?.completionTokens || 0,\n        startTime,\n        endTime,\n        { articleTitle, categoryName, existingQuestionsCount: existingQuestions.length },\n        userPrompt,\n        JSON.stringify(result.object)\n      );\n      \n      return result.object;\n    } catch (err) {\n      error = err;\n      const endTime = new Date();\n      \n      try {\n        const { model, interactionType } = await getModelForInteraction('interactive_examples');\n        await trackAIInteraction(\n          model.modelId,\n          interactionType.typeId,\n          clerkUserId,\n          0,\n          0,\n          startTime,\n          endTime,\n          { articleTitle, categoryName, existingQuestionsCount: existingQuestions.length },\n          userPrompt,\n          undefined,\n          String(err)\n        );\n      } catch (trackingError) {\n        console.error('Failed to track error:', trackingError);\n      }\n      \n      throw error;\n    }\n  },\n\n  async markUserAnswer(questionText: string, userAnswer: string, questionType: string, markingHint?: string, clerkUserId: string | null = null) {\n    const systemPrompt = `You are an IT education expert marking student answers. Be encouraging but accurate. Provide constructive feedback that helps learning.`;\n    \n    const userPrompt = `Question: ${questionText}\nQuestion Type: ${questionType}\nUser's Answer: ${userAnswer}\n${markingHint ? `Marking Hint: ${markingHint}` : ''}\n\nEvaluate if the answer is correct and provide helpful feedback. For command line questions, accept reasonable variations (e.g., with or without sudo, different flag orders).`;\n\n    const startTime = new Date();\n    let result, error;\n    \n    try {\n      const { model, interactionType } = await getModelForInteraction('answer_marking');\n      const aiModel = await createProviderForModel(model.modelId);\n      \n      result = await generateObject({\n        model: aiModel,\n        system: systemPrompt,\n        prompt: userPrompt,\n        schema: MarkingResponseSchema,\n        temperature: 0.3,\n        maxTokens: 500,\n      });\n      \n      const endTime = new Date();\n      \n      // Track the interaction\n      await trackAIInteraction(\n        model.modelId,\n        interactionType.typeId,\n        clerkUserId,\n        result.usage?.promptTokens || 0,\n        result.usage?.completionTokens || 0,\n        startTime,\n        endTime,\n        { questionType, hasMarkingHint: !!markingHint },\n        userPrompt,\n        JSON.stringify(result.object)\n      );\n      \n      return result.object;\n    } catch (err) {\n      error = err;\n      const endTime = new Date();\n      \n      try {\n        const { model, interactionType } = await getModelForInteraction('answer_marking');\n        await trackAIInteraction(\n          model.modelId,\n          interactionType.typeId,\n          clerkUserId,\n          0,\n          0,\n          startTime,\n          endTime,\n          { questionType, hasMarkingHint: !!markingHint },\n          userPrompt,\n          undefined,\n          String(err)\n        );\n      } catch (trackingError) {\n        console.error('Failed to track error:', trackingError);\n      }\n      \n      throw error;\n    }\n  },\n\n  async extractSearchKeywords(query: string, clerkUserId: string | null = null) {\n    const systemPrompt = `You are an AI assistant that analyzes user search queries to extract relevant keywords and understand search intent. Your goal is to help find the most relevant content by identifying key terms and concepts.`;\n\n    const userPrompt = `User's search query: \"${query}\"\n\nAnalyze this query and provide:\n1. Key technical keywords that should be searched for in content\n2. The overall search intent (what the user is trying to accomplish)\n3. Alternative search terms that might be used in technical documentation\n\nFocus on technical terms, commands, concepts, and tools that would likely appear in IT articles addressing this query.\n\nExamples:\n- \"How to reclaim space used by docker\" → keywords: [\"docker\", \"prune\", \"cleanup\", \"storage\", \"disk space\", \"remove\", \"images\", \"containers\", \"volumes\"]\n- \"Kubernetes troubleshooting\" → keywords: [\"kubectl\", \"pods\", \"services\", \"debugging\", \"logs\", \"events\", \"status\"]`;\n\n    const startTime = new Date();\n    \n    try {\n      const { model, interactionType } = await getModelForInteraction('keyword_extraction');\n      const aiModel = await createProviderForModel(model.modelId);\n      \n      const result = await generateObject({\n        model: aiModel,\n        system: systemPrompt,\n        prompt: userPrompt,\n        schema: KeywordExtractionSchema,\n        temperature: 0.3,\n        maxTokens: 500,\n      });\n      \n      const endTime = new Date();\n      \n      await trackAIInteraction(\n        model.modelId,\n        interactionType.typeId,\n        clerkUserId,\n        result.usage?.promptTokens || 0,\n        result.usage?.completionTokens || 0,\n        startTime,\n        endTime,\n        { query },\n        userPrompt,\n        JSON.stringify(result.object)\n      );\n      \n      return result.object;\n    } catch (err) {\n      const endTime = new Date();\n      try {\n        const { model, interactionType } = await getModelForInteraction('keyword_extraction');\n        await trackAIInteraction(model.modelId, interactionType.typeId, clerkUserId, 0, 0, startTime, endTime, { query }, userPrompt, undefined, String(err));\n      } catch (trackingError) {\n        console.error('Failed to track error:', trackingError);\n      }\n      throw err;\n    }\n  },\n\n  async reorderSearchResults(query: string, articles: Array<{articleId: string, articleTitle: string, category: {categoryName: string}, isContentGenerated: boolean}>, categories: Array<{categoryId: string, categoryName: string, description: string | null}>, clerkUserId: string | null = null) {\n    const systemPrompt = `You are an AI assistant that helps reorder search results based on relevance to the user's query. Your goal is to put the most relevant and helpful content first.\n\nConsider:\n1. Direct relevance to the query\n2. Level of detail appropriate for the query (beginner vs advanced)\n3. Practical usefulness for someone asking this question\n4. Logical learning progression (basics before advanced topics)`;\n\n    const userPrompt = `User's search query: \"${query}\"\n\nAvailable articles:\n${articles.map((article, index) => {\n  const categories = article.categories?.map(c => c.category.categoryName).join(', ') || 'No category';\n  return `${index + 1}. ID: ${article.articleId}\n   Title: ${article.articleTitle}\n   Categories: ${categories}\n   Status: ${article.isContentGenerated ? 'Ready' : 'Content pending'}`;\n}).join('\\n\\n')}\n\nAvailable categories:\n${categories.map(cat => \n  `- ${cat.categoryName}${cat.description ? `: ${cat.description}` : ''}`\n).join('\\n')}\n\nPlease reorder these articles by relevance to the user's query. Return the article IDs in order from most relevant to least relevant.\n\nConsider what someone searching for \"${query}\" would most likely want to learn about first.`;\n\n    const startTime = new Date();\n    \n    try {\n      const { model, interactionType } = await getModelForInteraction('search_reordering');\n      const aiModel = await createProviderForModel(model.modelId);\n      \n      const result = await generateObject({\n        model: aiModel,\n        system: systemPrompt,\n        prompt: userPrompt,\n        schema: ReorderResultsSchema,\n        temperature: 0.3, // Lower temperature for more consistent ordering\n        maxTokens: 1000,\n      });\n      \n      const endTime = new Date();\n      \n      await trackAIInteraction(\n        model.modelId,\n        interactionType.typeId,\n        clerkUserId,\n        result.usage?.promptTokens || 0,\n        result.usage?.completionTokens || 0,\n        startTime,\n        endTime,\n        { query, articlesCount: articles.length, categoriesCount: categories.length },\n        userPrompt,\n        JSON.stringify(result.object)\n      );\n      \n      return result.object;\n    } catch (err) {\n      const endTime = new Date();\n      try {\n        const { model, interactionType } = await getModelForInteraction('search_reordering');\n        await trackAIInteraction(model.modelId, interactionType.typeId, clerkUserId, 0, 0, startTime, endTime, { query, articlesCount: articles.length }, userPrompt, undefined, String(err));\n      } catch (trackingError) {\n        console.error('Failed to track error:', trackingError);\n      }\n      throw err;\n    }\n  },\n\n  async validateArticleSuggestion(articleTitle: string, articleContent: string, suggestionType: string, suggestionDetails: string, clerkUserId: string | null = null) {\n    // Check for URLs in the suggestion details first to prevent spam\n    const urlPattern = /https?:\\/\\/[^\\s]+|www\\.[^\\s]+|\\b[a-zA-Z0-9][a-zA-Z0-9-]*\\.[a-zA-Z]{2,}\\b/gi;\n    const containsUrl = urlPattern.test(suggestionDetails);\n    \n    if (containsUrl) {\n      // Immediately reject suggestions containing URLs\n      return {\n        isValid: false,\n        reason: 'Suggestions containing URLs are not allowed to prevent spam. Please describe the improvement without including any links.',\n        updatedContent: null,\n        diff: null,\n        description: null\n      };\n    }\n    \n    // Check for references to external websites or resources\n    const websiteReferencePattern = /\\b(website|site|webpage|web page|blog|portal|platform|resource|link|reference|check out|visit|go to|see|refer to|found at|available at|hosted at|located at)\\b.*\\b(com|org|net|io|dev|edu|gov|co|uk|ca|au|de|fr|it|es|nl|be|ch|at|se|no|dk|fi|pl|ru|jp|cn|in|br|mx|za)\\b/gi;\n    const domainNamePattern = /\\b(github|gitlab|bitbucket|stackoverflow|medium|reddit|youtube|google|facebook|twitter|linkedin|amazon|microsoft|apple|mozilla|wikipedia|wikimedia|npm|pypi|docker|kubernetes)\\b/gi;\n    \n    if (websiteReferencePattern.test(suggestionDetails) || domainNamePattern.test(suggestionDetails)) {\n      return {\n        isValid: false,\n        reason: 'Suggestions that reference external websites or resources are not allowed. Please describe the improvement using only the content that should be added to the article itself.',\n        updatedContent: null,\n        diff: null,\n        description: null\n      };\n    }\n    \n    const systemPrompt = `You are an AI assistant helping to validate and apply user suggestions to educational IT articles. Be concise but thorough.`;\n    \n    // For very large articles, we might need to be more strategic\n    const contentLength = articleContent.length;\n    const isLargeArticle = contentLength > 10000;\n    \n    let processedContent = articleContent;\n    if (isLargeArticle && contentLength > 20000) {\n      // For extremely large articles, we might need to truncate\n      console.log(`Article is very large (${contentLength} chars), processing full content`);\n    }\n    \n    const userPrompt = `Article Title: ${articleTitle}\nCurrent Content (in Markdown format):\n${processedContent}\n\nUser Suggestion Type: ${suggestionType}\nUser Suggestion Details: ${suggestionDetails}\n\nPlease analyze this suggestion carefully:\n\n1. First, determine if the suggestion is appropriate and valid:\n   - Is it relevant to the article's topic and title?\n   - Is it technically accurate?\n   - Is it appropriate for the article's educational purpose?\n   - Does it improve the article's quality or clarity?\n   \n2. CRITICAL SPAM PREVENTION RULES - Immediately REJECT if the suggestion:\n   - Contains ANY URLs, links, or web addresses\n   - References ANY external websites, blogs, or online resources\n   - Mentions specific website names (GitHub, Stack Overflow, etc.)\n   - Asks to add references to external content\n   - Suggests visiting, checking out, or referring to any external resource\n   - Contains phrases like \"see [website]\", \"refer to [resource]\", \"check out [site]\"\n   - Attempts to promote or reference any external platform or service\n   \n3. If the suggestion is VALID and contains NO external references:\n   - Apply the suggested change to the article\n   - Return the COMPLETE updated article in Markdown format\n   - Ensure all Markdown formatting is preserved (headings, code blocks, lists, etc.)\n   - The updated content should include the entire article, not just the changed section\n   - Also provide a human-readable description of the change made\n   \n4. If the suggestion is INVALID:\n   - Explain clearly why the suggestion cannot be applied\n   - If it references external content, state: \"Suggestions referencing external websites or resources are not allowed. Please provide self-contained improvements.\"\n\nIMPORTANT: \n- The updatedContent field must contain the ENTIRE article in valid Markdown format\n- Preserve all existing Markdown formatting (# headings, code blocks with triple backticks, lists, etc.)\n- Do not wrap the content in any additional code blocks\n- The description should be a concise summary of what was changed\n- NEVER add ANY external links, references, or website mentions to the article`;\n\n    const startTime = new Date();\n    let result, error;\n    \n    try {\n      const { model, interactionType } = await getModelForInteraction('article_suggestion_validation');\n      const aiModel = await createProviderForModel(model.modelId);\n      \n      // Calculate needed tokens based on article size\n      const estimatedOutputTokens = Math.ceil(contentLength / 3) + 1000; // Extra for the added content\n      const maxTokensNeeded = Math.min(estimatedOutputTokens, 16000); // Cap at 16k tokens\n      \n      result = await generateObject({\n        model: aiModel,\n        system: systemPrompt,\n        prompt: userPrompt,\n        schema: ArticleSuggestionValidationSchema,\n        temperature: 0.3,\n        maxTokens: Math.max(maxTokensNeeded, model.maxTokens || 4000),\n      });\n      \n      const endTime = new Date();\n      \n      // If the suggestion was valid and we have updated content, generate the diff\n      if (result.object.isValid && result.object.updatedContent) {\n        const diff = createPatch(\n          articleTitle,\n          articleContent,\n          result.object.updatedContent,\n          'original',\n          'updated'\n        );\n        result.object.diff = diff;\n      }\n      \n      // Track the interaction\n      await trackAIInteraction(\n        model.modelId,\n        interactionType.typeId,\n        clerkUserId,\n        result.usage?.promptTokens || 0,\n        result.usage?.completionTokens || 0,\n        startTime,\n        endTime,\n        { articleTitle, suggestionType },\n        userPrompt,\n        JSON.stringify(result.object)\n      );\n      \n      return result.object;\n    } catch (err) {\n      error = err;\n      const endTime = new Date();\n      \n      // Try to get model info for error tracking\n      try {\n        const { model, interactionType } = await getModelForInteraction('article_suggestion_validation');\n        await trackAIInteraction(\n          model.modelId,\n          interactionType.typeId,\n          clerkUserId,\n          0,\n          0,\n          startTime,\n          endTime,\n          { articleTitle, suggestionType },\n          userPrompt,\n          undefined,\n          String(err)\n        );\n      } catch (trackingError) {\n        console.error('Failed to track error:', trackingError);\n      }\n      \n      throw error;\n    }\n  },\n\n  async selectAndCreateTags(articleTitle: string, categoryName: string, existingTags: Array<{tagId: string, tagName: string, description: string | null}>, clerkUserId: string | null = null) {\n    const systemPrompt = `You are an AI assistant that helps select and create relevant tags for IT articles. Your goal is to choose appropriate existing tags and suggest new ones when necessary.\n\nIMPORTANT GUIDELINES:\n1. Always prefer existing tags when they are relevant\n2. Keep tag names SHORT and focused (1-3 words max)\n3. Tags should be specific technical concepts, tools, or methodologies\n4. Avoid generic words like \"guide\", \"tutorial\", \"basics\", \"advanced\"\n5. Use standard industry terminology\n6. For new tags, suggest a relevant color (hex code) that helps with organization\n7. Don't create tags that are too similar to existing ones`;\n\n    const userPrompt = `Article Title: \"${articleTitle}\"\nCategory: \"${categoryName}\"\n\nEXISTING TAGS in the system:\n${existingTags.map(tag => `- ID: ${tag.tagId}, Name: \"${tag.tagName}\"${tag.description ? `, Description: ${tag.description}` : ''}`).join('\\n')}\n\nBased on the article title and category, suggest:\n1. Which existing tags (by ID) are relevant for this article\n2. Any new tags that should be created for this article\n\nRULES:\n- Select 3-6 tags total (existing + new)\n- New tag names should be concise and technical\n- Focus on tools, technologies, concepts, methodologies\n- Avoid duplicating existing tag concepts\n- For new tags, provide optional descriptions and colors`;\n\n    const startTime = new Date();\n    \n    try {\n      const { model, interactionType } = await getModelForInteraction('tag_selection');\n      const aiModel = await createProviderForModel(model.modelId);\n      \n      const result = await generateObject({\n        model: aiModel,\n        system: systemPrompt,\n        prompt: userPrompt,\n        schema: TagSelectionResponseSchema,\n        temperature: 0.3, // Lower temperature for more consistent tagging\n        maxTokens: 1000,\n      });\n      \n      const endTime = new Date();\n      \n      await trackAIInteraction(\n        model.modelId,\n        interactionType.typeId,\n        clerkUserId,\n        result.usage?.promptTokens || 0,\n        result.usage?.completionTokens || 0,\n        startTime,\n        endTime,\n        { articleTitle, categoryName, existingTagsCount: existingTags.length },\n        userPrompt,\n        JSON.stringify(result.object)\n      );\n      \n      return result.object;\n    } catch (err) {\n      const endTime = new Date();\n      try {\n        const { model, interactionType } = await getModelForInteraction('tag_selection');\n        await trackAIInteraction(model.modelId, interactionType.typeId, clerkUserId, 0, 0, startTime, endTime, { articleTitle, categoryName }, userPrompt, undefined, String(err));\n      } catch (trackingError) {\n        console.error('Failed to track error:', trackingError);\n      }\n      throw err;\n    }\n  },\n\n  // Get all active AI models\n  async getActiveModels() {\n    return await prisma.aIModel.findMany({\n      where: { isActive: true },\n      orderBy: { displayName: 'asc' }\n    });\n  },\n\n  // Get all interaction types\n  async getInteractionTypes() {\n    return await prisma.aIInteractionType.findMany({\n      include: { defaultModel: true },\n      orderBy: { displayName: 'asc' }\n    });\n  },\n\n  // Utility functions for admin management\n  async createModel(data: {\n    modelName: string;\n    provider: string;\n    displayName: string;\n    description?: string;\n    apiKey: string;\n    inputTokenCostPer1M: number;\n    outputTokenCostPer1M: number;\n    maxTokens?: number;\n    isDefault?: boolean;\n  }) {\n    return await prisma.aIModel.create({\n      data: {\n        ...data,\n        apiKey: encryptApiKey(data.apiKey),\n        inputTokenCostPer1M: data.inputTokenCostPer1M,\n        outputTokenCostPer1M: data.outputTokenCostPer1M,\n      }\n    });\n  },\n\n  async updateModel(modelId: string, data: any) {\n    if (data.apiKey) {\n      data.apiKey = encryptApiKey(data.apiKey);\n    }\n    return await prisma.aIModel.update({\n      where: { modelId },\n      data\n    });\n  },\n\n  async deleteModel(modelId: string) {\n    return await prisma.aIModel.delete({\n      where: { modelId }\n    });\n  }\n};\n\n// Export utility functions\nexport { createProviderForModel, getModelForInteraction, trackAIInteraction };\n\n// Export types\nexport type CategorySuggestion = z.infer<typeof CategorySuggestionSchema>;\nexport type ArticleSuggestion = z.infer<typeof ArticleSuggestionSchema>;\nexport type AISearchResponse = z.infer<typeof AISearchResponseSchema>;\nexport type InteractiveExampleGeneration = z.infer<typeof InteractiveExampleSchema>;\nexport type ExampleGenerationResponse = z.infer<typeof ExampleGenerationResponseSchema>;\nexport type MarkingResponse = z.infer<typeof MarkingResponseSchema>;\nexport type ReorderResultsResponse = z.infer<typeof ReorderResultsSchema>;\nexport type KeywordExtractionResponse = z.infer<typeof KeywordExtractionSchema>;\nexport type TagSuggestion = z.infer<typeof TagSuggestionSchema>;\nexport type TagSelectionResponse = z.infer<typeof TagSelectionResponseSchema>;\nexport type ArticleSuggestionValidationResponse = z.infer<typeof ArticleSuggestionValidationSchema>;","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/lib/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/lib/bullmq.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Worker' is defined but never used.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[940,943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[940,943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Queue, Worker, QueueEvents } from 'bullmq';\nimport Redis from 'ioredis';\n\nconst redisUrl = process.env.REDIS_URL || 'redis://localhost:6379';\n\nconst connection = new Redis(redisUrl, {\n  maxRetriesPerRequest: null,\n  enableReadyCheck: false,\n});\n\nexport const emailQueue = new Queue('email', {\n  connection: connection.duplicate(),\n  defaultJobOptions: {\n    removeOnComplete: {\n      age: 24 * 3600, // keep completed jobs for 24 hours\n      count: 100, // keep the last 100 completed jobs\n    },\n    removeOnFail: {\n      age: 48 * 3600, // keep failed jobs for 48 hours\n    },\n    attempts: 3,\n    backoff: {\n      type: 'exponential',\n      delay: 2000,\n    },\n  },\n});\n\nexport const queueEvents = new QueueEvents('email', {\n  connection: connection.duplicate(),\n});\n\nexport type EmailJobData = {\n  to: string | string[];\n  subject: string;\n  text?: string;\n  html?: string;\n  template?: string;\n  templateData?: Record<string, any>;\n  from?: string;\n  replyTo?: string;\n  attachments?: Array<{\n    filename: string;\n    content: Buffer | string;\n    contentType?: string;\n  }>;\n};\n\nexport async function addEmailToQueue(data: EmailJobData) {\n  return await emailQueue.add('send-email', data);\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/lib/email-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[166,169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[166,169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { addEmailToQueue } from \"./bullmq\";\n\nexport interface SendTemplateEmailOptions {\n  to: string | string[];\n  templateKey: string;\n  variables?: Record<string, any>;\n  replyTo?: string;\n}\n\nexport async function sendTemplateEmail(options: SendTemplateEmailOptions) {\n  const { to, templateKey, variables, replyTo } = options;\n\n  try {\n    const job = await addEmailToQueue({\n      to,\n      subject: \"\", // Will be filled by template\n      template: templateKey,\n      templateData: variables,\n      replyTo,\n    });\n\n    return { success: true, jobId: job.id };\n  } catch (error) {\n    console.error(\"Failed to queue email:\", error);\n    throw error;\n  }\n}\n\n// Predefined email sending functions for common scenarios\nexport const emails = {\n  // User welcome email\n  async sendWelcomeEmail(userId: string, email: string, firstName?: string, lastName?: string) {\n    return sendTemplateEmail({\n      to: email,\n      templateKey: \"welcome_email\",\n      variables: {\n        firstName: firstName || \"User\",\n        lastName: lastName || \"\",\n        email,\n        userId,\n      },\n    });\n  },\n\n  // Comment notification\n  async sendCommentNotification(\n    recipientEmail: string,\n    commenterName: string,\n    articleTitle: string,\n    articleSlug: string,\n    commentContent: string\n  ) {\n    return sendTemplateEmail({\n      to: recipientEmail,\n      templateKey: \"comment_notification\",\n      variables: {\n        commenterName,\n        articleTitle,\n        articleUrl: `${process.env.NEXT_PUBLIC_APP_URL}/articles/${articleSlug}`,\n        commentContent,\n      },\n    });\n  },\n\n  // Article flagged notification\n  async sendArticleFlaggedNotification(\n    adminEmails: string[],\n    articleTitle: string,\n    flaggedBy: string,\n    flagReason: string\n  ) {\n    return sendTemplateEmail({\n      to: adminEmails,\n      templateKey: \"article_flagged\",\n      variables: {\n        articleTitle,\n        flaggedBy,\n        flagReason,\n        adminUrl: `${process.env.NEXT_PUBLIC_APP_URL}/admin/flagged`,\n      },\n    });\n  },\n\n  // Subscription confirmation\n  async sendSubscriptionConfirmation(\n    email: string,\n    firstName: string,\n    tier: string,\n    amount: number\n  ) {\n    return sendTemplateEmail({\n      to: email,\n      templateKey: \"subscription_confirmation\",\n      variables: {\n        firstName,\n        tier,\n        amount: (amount / 100).toFixed(2), // Convert from cents\n        billingPortalUrl: `${process.env.NEXT_PUBLIC_APP_URL}/api/subscription/portal`,\n      },\n    });\n  },\n\n  // Article suggestion approved\n  async sendSuggestionApproved(\n    email: string,\n    firstName: string,\n    articleTitle: string,\n    articleSlug: string\n  ) {\n    return sendTemplateEmail({\n      to: email,\n      templateKey: \"suggestion_approved\",\n      variables: {\n        firstName,\n        articleTitle,\n        articleUrl: `${process.env.NEXT_PUBLIC_APP_URL}/articles/${articleSlug}`,\n      },\n    });\n  },\n\n  // Achievement unlocked\n  async sendAchievementUnlocked(\n    email: string,\n    firstName: string,\n    achievementName: string,\n    achievementDescription: string\n  ) {\n    return sendTemplateEmail({\n      to: email,\n      templateKey: \"achievement_unlocked\",\n      variables: {\n        firstName,\n        achievementName,\n        achievementDescription,\n        dashboardUrl: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard/achievements`,\n      },\n    });\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/lib/mailgun.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[181,184],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[181,184],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1790,1793],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1790,1793],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2573,2576],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2573,2576],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import formData from 'form-data';\nimport Mailgun from 'mailgun.js';\n\nconst mailgun = new Mailgun(formData);\n\n// Initialize client lazily to ensure env vars are loaded\nlet mgClient: any;\n\nfunction getMgClient() {\n  if (!mgClient) {\n    const apiKey = process.env.MAILGUN_API_KEY;\n    if (!apiKey) {\n      throw new Error('MAILGUN_API_KEY is not configured');\n    }\n    \n    // Debug logging\n    console.log('Mailgun initialization:', {\n      apiKeyLength: apiKey.length,\n      apiKeyPrefix: apiKey.substring(0, 10) + '...',\n      domain: process.env.MAILGUN_DOMAIN,\n    });\n    \n    // Check if using EU region\n    const isEU = process.env.MAILGUN_REGION?.toUpperCase() === 'EU';\n    const apiUrl = isEU ? 'https://api.eu.mailgun.net' : 'https://api.mailgun.net';\n    \n    console.log('Using Mailgun API URL:', apiUrl, '(Region:', process.env.MAILGUN_REGION || 'US', ')');\n    \n    mgClient = mailgun.client({\n      username: 'api',\n      key: apiKey,\n      url: apiUrl,\n    });\n  }\n  return mgClient;\n}\n\nexport interface SendEmailOptions {\n  to: string | string[];\n  subject: string;\n  text?: string;\n  html?: string;\n  from?: string;\n  replyTo?: string;\n  attachments?: Array<{\n    filename: string;\n    data: Buffer | string;\n    contentType?: string;\n  }>;\n}\n\nexport async function sendEmail(options: SendEmailOptions) {\n  const { to, subject, text, html, from, replyTo, attachments } = options;\n\n  const domain = process.env.MAILGUN_DOMAIN;\n  if (!domain) {\n    throw new Error('MAILGUN_DOMAIN is not configured');\n  }\n\n  if (!process.env.MAILGUN_API_KEY) {\n    throw new Error('MAILGUN_API_KEY is not configured');\n  }\n\n  const defaultFrom = `${process.env.MAILGUN_FROM_NAME || 'IT Learning Platform'} <${process.env.MAILGUN_FROM_EMAIL || 'noreply@' + domain}>`;\n\n  const messageData: any = {\n    from: from || defaultFrom,\n    to: Array.isArray(to) ? to.join(', ') : to,\n    subject,\n    text,\n    html,\n  };\n\n  if (replyTo) {\n    messageData['h:Reply-To'] = replyTo;\n  }\n\n  if (attachments && attachments.length > 0) {\n    messageData.attachment = attachments.map((att) => ({\n      filename: att.filename,\n      data: att.data,\n      contentType: att.contentType,\n    }));\n  }\n\n  try {\n    const mg = getMgClient();\n    console.log('Sending email with domain:', domain);\n    console.log('Message data:', {\n      ...messageData,\n      html: messageData.html ? '[HTML content]' : undefined,\n      text: messageData.text ? '[Text content]' : undefined,\n    });\n    \n    const result = await mg.messages.create(domain, messageData);\n    return result;\n  } catch (error: any) {\n    console.error('Failed to send email:', error);\n    if (error.status === 401) {\n      console.error('Authentication failed. Please check:');\n      console.error('1. API key is correct');\n      console.error('2. Domain is verified in Mailgun');\n      console.error('3. API key has permissions for this domain');\n      console.error('4. You are using the correct region (US vs EU)');\n    }\n    throw error;\n  }\n}\n\nexport async function validateEmail(email: string): Promise<boolean> {\n  try {\n    const mg = getMgClient();\n    const result = await mg.validate.get(email);\n    return result.is_valid || false;\n  } catch (error) {\n    console.error('Email validation failed:', error);\n    return false;\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/lib/openai.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/lib/prisma.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/lib/stripe.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2711,2714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2711,2714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Stripe from 'stripe';\n\n// Only initialize Stripe on the server side\nexport const stripe = typeof window === 'undefined' && process.env.STRIPE_SECRET_KEY\n  ? new Stripe(process.env.STRIPE_SECRET_KEY, {\n      apiVersion: '2024-12-18.acacia',\n      typescript: true,\n    })\n  : null;\n\nexport const SUBSCRIPTION_TIERS = {\n  FREE: {\n    name: 'Free',\n    price: 0,\n    features: [\n      'Access to basic articles',\n      'Limited interactive examples',\n      'Community support',\n    ],\n  },\n  STANDARD: {\n    name: 'Standard',\n    price: Number(process.env.STRIPE_STANDARD_PRICE_MONTHLY) || 8,\n    features: [\n      'All Free features',\n      'Unlimited article access',\n      'All interactive examples',\n      'AI-powered chat support',\n      'Progress tracking',\n      'Download articles for offline reading',\n    ],\n  },\n  MAX: {\n    name: 'Max',\n    price: Number(process.env.STRIPE_MAX_PRICE_MONTHLY) || 14,\n    features: [\n      'All Standard features',\n      'Priority AI chat support',\n      'Personalized learning paths',\n      'Advanced analytics',\n      'Early access to new content',\n      'Direct support from experts',\n      'Custom curated lists',\n    ],\n  },\n};\n\nexport async function createOrRetrieveCustomer(\n  email: string,\n  clerkUserId: string,\n  name?: string\n): Promise<string> {\n  if (!stripe) {\n    throw new Error('Stripe is not initialized');\n  }\n\n  // First, try to retrieve existing customer by metadata\n  const existingCustomers = await stripe.customers.list({\n    email,\n    limit: 1,\n  });\n\n  if (existingCustomers.data.length > 0) {\n    return existingCustomers.data[0].id;\n  }\n\n  // Create new customer\n  const customer = await stripe.customers.create({\n    email,\n    name,\n    metadata: {\n      clerkUserId,\n    },\n  });\n\n  return customer.id;\n}\n\nexport async function createCheckoutSession(\n  customerId: string,\n  priceId: string,\n  successUrl: string,\n  cancelUrl: string,\n  clerkUserId: string\n) {\n  if (!stripe) {\n    throw new Error('Stripe is not initialized');\n  }\n\n  const session = await stripe.checkout.sessions.create({\n    customer: customerId,\n    payment_method_types: ['card'],\n    line_items: [\n      {\n        price: priceId,\n        quantity: 1,\n      },\n    ],\n    mode: 'subscription',\n    success_url: successUrl,\n    cancel_url: cancelUrl,\n    metadata: {\n      clerkUserId,\n    },\n  });\n\n  return session;\n}\n\nexport async function createPortalSession(\n  customerId: string,\n  returnUrl: string\n) {\n  if (!stripe) {\n    throw new Error('Stripe is not initialized');\n  }\n\n  try {\n    const session = await stripe.billingPortal.sessions.create({\n      customer: customerId,\n      return_url: returnUrl,\n    });\n\n    return session;\n  } catch (error: any) {\n    console.error('Portal session creation error details:', {\n      message: error.message,\n      type: error.type,\n      statusCode: error.statusCode,\n    });\n    \n    // If no configuration exists, provide a more helpful error\n    if (error.message?.includes('No configuration provided')) {\n      throw new Error(\n        'Stripe Customer Portal is not configured. Please visit https://dashboard.stripe.com/test/settings/billing/portal to set it up.'\n      );\n    }\n    \n    throw error;\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/lib/subscription-check.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/workers/email.worker.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2363,2366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2363,2366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":115,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3551,3554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3551,3554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Worker, Job } from 'bullmq';\nimport Redis from 'ioredis';\nimport { sendEmail } from '@/lib/mailgun';\nimport { EmailJobData } from '@/lib/bullmq';\nimport { PrismaClient, EmailStatus } from '@prisma/client';\n\nconst prisma = new PrismaClient();\nconst redisUrl = process.env.REDIS_URL || 'redis://localhost:6379';\n\nconst connection = new Redis(redisUrl, {\n  maxRetriesPerRequest: null,\n  enableReadyCheck: false,\n});\n\nasync function processEmailJob(job: Job<EmailJobData>) {\n  const { to, subject, text, html, template, templateData, from, replyTo, attachments } = job.data;\n  \n  let emailLogId: string | null = null;\n  let templateId: string | null = null;\n  let finalSubject = subject;\n  let finalHtml = html;\n  let finalText = text;\n  let finalFrom = from;\n\n  try {\n    // If using a template, fetch it from the database\n    if (template) {\n      const emailTemplate = await prisma.emailTemplate.findUnique({\n        where: { templateKey: template, isActive: true },\n      });\n\n      if (emailTemplate) {\n        templateId = emailTemplate.templateId;\n        \n        // Process template variables\n        if (templateData && emailTemplate.htmlContent) {\n          finalHtml = processTemplateVariables(emailTemplate.htmlContent, templateData);\n          finalSubject = processTemplateVariables(emailTemplate.subject, templateData);\n          \n          if (emailTemplate.textContent) {\n            finalText = processTemplateVariables(emailTemplate.textContent, templateData);\n          }\n        } else {\n          finalHtml = emailTemplate.htmlContent;\n          finalSubject = emailTemplate.subject;\n          finalText = emailTemplate.textContent || undefined;\n        }\n\n        // Use template's from settings if not overridden\n        if (!from && emailTemplate.fromEmail) {\n          finalFrom = emailTemplate.fromName \n            ? `${emailTemplate.fromName} <${emailTemplate.fromEmail}>`\n            : emailTemplate.fromEmail;\n        }\n      }\n    }\n\n    // Create email log entry\n    const emailLog = await prisma.emailLog.create({\n      data: {\n        templateId,\n        to: Array.isArray(to) ? to.join(', ') : to,\n        from: finalFrom || `${process.env.MAILGUN_FROM_NAME || 'IT Learning Platform'} <${process.env.MAILGUN_FROM_EMAIL}>`,\n        subject: finalSubject,\n        status: EmailStatus.PENDING,\n        metadata: job.data as any,\n      },\n    });\n    emailLogId = emailLog.logId;\n\n    // Send email via Mailgun\n    const result = await sendEmail({\n      to,\n      subject: finalSubject,\n      text: finalText,\n      html: finalHtml,\n      from: finalFrom,\n      replyTo,\n      attachments: attachments?.map(att => ({\n        filename: att.filename,\n        data: Buffer.from(att.content),\n        contentType: att.contentType,\n      })),\n    });\n\n    // Update log with success\n    await prisma.emailLog.update({\n      where: { logId: emailLogId },\n      data: {\n        status: EmailStatus.SENT,\n        messageId: result.id,\n      },\n    });\n\n    console.log(`Email sent successfully: ${result.id}`);\n    return { success: true, messageId: result.id };\n  } catch (error) {\n    console.error('Email sending failed:', error);\n    \n    // Update log with failure\n    if (emailLogId) {\n      await prisma.emailLog.update({\n        where: { logId: emailLogId },\n        data: {\n          status: EmailStatus.FAILED,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        },\n      });\n    }\n\n    throw error;\n  }\n}\n\nfunction processTemplateVariables(template: string, data: Record<string, any>): string {\n  let processed = template;\n  \n  // Add global variables that are always available\n  const globalVariables = {\n    siteName: process.env.SITE_NAME || process.env.MAILGUN_FROM_NAME || 'IT Learning Platform',\n    siteUrl: process.env.SITE_URL || process.env.NEXT_PUBLIC_APP_URL || 'https://localhost:3000',\n    currentYear: new Date().getFullYear().toString(),\n    supportEmail: process.env.MAILGUN_FROM_EMAIL || 'support@yourdomain.com',\n    ...data, // User-provided data takes precedence\n  };\n  \n  // Replace {{variable}} with data values\n  Object.entries(globalVariables).forEach(([key, value]) => {\n    const regex = new RegExp(`{{\\\\s*${key}\\\\s*}}`, 'g');\n    processed = processed.replace(regex, String(value));\n  });\n  \n  return processed;\n}\n\n// Create the worker\nexport const emailWorker = new Worker('email', processEmailJob, {\n  connection: connection.duplicate(),\n  concurrency: 5,\n  removeOnComplete: { count: 100 },\n  removeOnFail: { count: 100 },\n});\n\nemailWorker.on('completed', (job) => {\n  console.log(`Email job ${job.id} completed`);\n});\n\nemailWorker.on('failed', (job, err) => {\n  console.error(`Email job ${job?.id} failed:`, err);\n});\n\n// Graceful shutdown\nprocess.on('SIGTERM', async () => {\n  console.log('Shutting down email worker...');\n  await emailWorker.close();\n  await prisma.$disconnect();\n  process.exit(0);\n});","usedDeprecatedRules":[]},{"filePath":"/Users/simoncarr/dev/linux-training/it-learning-platform/src/workers/start-worker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
