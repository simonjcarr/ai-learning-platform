generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  clerkUserId                  String                @id @unique
  email                        String                @unique
  username                     String?               @unique
  appSpecificCreatedAt         DateTime              @default(now())
  lastLoginToApp               DateTime?
  firstName                    String?
  imageUrl                     String?
  lastName                     String?
  stripeCustomerId             String?               @unique
  subscriptionCurrentPeriodEnd DateTime?
  subscriptionId               String?
  subscriptionStatus           SubscriptionStatus    @default(INACTIVE)
  subscriptionTier             String                @default("FREE")
  role                         Role                  @default(USER)
  aiInteractions               AIInteraction[]
  likedArticles                ArticleLike[]
  articles                     Article[]
  flaggedArticles              Article[]             @relation("FlaggedArticles")
  chatMessages                 ChatMessage[]
  comments                     Comment[]
  flaggedComments              Comment[]             @relation("FlaggedComments")
  curatedLists                 CuratedList[]
  subscriptionHistory          SubscriptionHistory[]
  userResponses                UserResponse[]
  articleViews                 UserArticleView[]
  articleSuggestions           ArticleSuggestion[]
  suggestionRateLimits         SuggestionRateLimit[]
  articleChangeHistories       ArticleChangeHistory[]
  rollbackChangeHistories      ArticleChangeHistory[] @relation("RollbackUser")
  articleGroups                ArticleGroup[]

  @@map("users")
}

model Category {
  categoryId   String            @id @default(cuid())
  categoryName String            @unique
  description  String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  articles     ArticleCategory[]

  @@index([categoryName])
  @@map("categories")
}

model Article {
  articleId            String               @id @default(cuid())
  articleTitle         String
  articleSlug          String               @unique
  contentHtml          String?
  isContentGenerated   Boolean              @default(false)
  createdByClerkUserId String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  streamId             String?
  flagReason           String?
  flaggedAt            DateTime?
  flaggedByClerkUserId String?
  isFlagged            Boolean              @default(false)
  likes                ArticleLike[]
  tags                 ArticleTag[]
  categories           ArticleCategory[]
  createdBy            User?                @relation(fields: [createdByClerkUserId], references: [clerkUserId])
  flaggedBy            User?                @relation("FlaggedArticles", fields: [flaggedByClerkUserId], references: [clerkUserId])
  stream               Stream?              @relation(fields: [streamId], references: [streamId])
  chatMessages         ChatMessage[]
  comments             Comment[]
  curatedListItems     CuratedListItem[]
  interactiveExamples  InteractiveExample[]
  views                UserArticleView[]
  suggestions          ArticleSuggestion[]
  changeHistories      ArticleChangeHistory[]
  articleGroups        ArticleGroupArticle[]

  @@index([streamId])
  @@index([articleSlug])
  @@index([articleTitle])
  @@index([isContentGenerated])
  @@index([createdByClerkUserId])
  @@index([isFlagged])
  @@map("articles")
}

model InteractiveExample {
  exampleId                String         @id @default(cuid())
  articleId                String
  questionType             QuestionType
  scenarioOrQuestionText   String
  optionsJson              Json?
  correctAnswerDescription String
  aiMarkingPromptHint      String?
  createdAt                DateTime       @default(now())
  article                  Article        @relation(fields: [articleId], references: [articleId])
  userResponses            UserResponse[]

  @@index([articleId])
  @@map("interactive_examples")
}

model UserResponse {
  responseId     String             @id @default(cuid())
  clerkUserId    String
  exampleId      String
  userAnswerText String
  isCorrect      Boolean
  aiFeedback     String
  submittedAt    DateTime           @default(now())
  user           User               @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  example        InteractiveExample @relation(fields: [exampleId], references: [exampleId])

  @@index([clerkUserId])
  @@index([exampleId])
  @@map("user_responses")
}

model Channel {
  channelId   String   @id @default(cuid())
  channelName String   @unique
  description String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  streams     Stream[]

  @@index([channelName])
  @@map("channels")
}

model Stream {
  streamId    String    @id @default(cuid())
  streamName  String
  description String?
  channelId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  articles    Article[]
  channel     Channel   @relation(fields: [channelId], references: [channelId])

  @@unique([channelId, streamName])
  @@index([streamName])
  @@index([channelId])
  @@map("streams")
}

model Comment {
  commentId            String    @id @default(cuid())
  articleId            String
  clerkUserId          String
  content              String
  parentId             String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  flagReason           String?
  flaggedAt            DateTime?
  flaggedByClerkUserId String?
  isFlagged            Boolean   @default(false)
  article              Article   @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  user                 User      @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  flaggedBy            User?     @relation("FlaggedComments", fields: [flaggedByClerkUserId], references: [clerkUserId])
  parent               Comment?  @relation("CommentReplies", fields: [parentId], references: [commentId], onDelete: Cascade)
  replies              Comment[] @relation("CommentReplies")

  @@index([articleId])
  @@index([clerkUserId])
  @@index([parentId])
  @@index([isFlagged])
  @@map("comments")
}

model ChatMessage {
  messageId   String   @id @default(cuid())
  articleId   String
  clerkUserId String
  role        ChatRole
  content     String
  exampleId   String?
  createdAt   DateTime @default(now())
  article     Article  @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  user        User     @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)

  @@index([articleId, clerkUserId])
  @@index([exampleId])
  @@map("chat_messages")
}

model ArticleLike {
  likeId      String   @id @default(cuid())
  articleId   String
  clerkUserId String
  createdAt   DateTime @default(now())
  article     Article  @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  user        User     @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)

  @@unique([articleId, clerkUserId])
  @@index([clerkUserId])
  @@index([articleId])
  @@map("article_likes")
}

model CuratedList {
  listId      String            @id @default(cuid())
  clerkUserId String
  listName    String
  description String?
  isPublic    Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  items       CuratedListItem[]
  user        User              @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)

  @@index([clerkUserId])
  @@index([isPublic])
  @@map("curated_lists")
}

model CuratedListItem {
  itemId    String      @id @default(cuid())
  listId    String
  articleId String
  order     Int
  notes     String?
  addedAt   DateTime    @default(now())
  article   Article     @relation(fields: [articleId], references: [articleId])
  list      CuratedList @relation(fields: [listId], references: [listId], onDelete: Cascade)

  @@unique([listId, articleId])
  @@index([listId])
  @@index([articleId])
  @@map("curated_list_items")
}

model SubscriptionHistory {
  historyId      String              @id @default(cuid())
  clerkUserId    String
  subscriptionId String
  eventType      String
  previousTier   String?
  newTier        String
  previousStatus SubscriptionStatus?
  newStatus      SubscriptionStatus
  amount         Int?
  currency       String?
  stripeEventId  String?             @unique
  metadata       Json?
  createdAt      DateTime            @default(now())
  user           User                @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)

  @@index([clerkUserId])
  @@index([subscriptionId])
  @@index([createdAt])
  @@map("subscription_history")
}

model SubscriptionPricing {
  pricingId         String           @id @default(cuid())
  tier              String           @unique
  stripePriceId     String           @unique
  stripeProductId   String?
  monthlyPriceCents Int
  yearlyPriceCents  Int
  features          String[]
  isActive          Boolean          @default(true)
  freeTrialDays     Int              @default(0)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@index([tier])
  @@map("subscription_pricing")
}

model Tag {
  tagId       String       @id @default(cuid())
  tagName     String       @unique
  description String?
  color       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  articles    ArticleTag[]

  @@index([tagName])
  @@map("tags")
}

model ArticleTag {
  articleTagId String   @id @default(cuid())
  articleId    String
  tagId        String
  createdAt    DateTime @default(now())
  article      Article  @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  tag          Tag      @relation(fields: [tagId], references: [tagId], onDelete: Cascade)

  @@unique([articleId, tagId])
  @@index([articleId])
  @@index([tagId])
  @@map("article_tags")
}

model ArticleCategory {
  articleCategoryId String   @id @default(cuid())
  articleId         String
  categoryId        String
  isPrimary         Boolean  @default(false)
  createdAt         DateTime @default(now())
  article           Article  @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  category          Category @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)

  @@unique([articleId, categoryId])
  @@index([articleId])
  @@index([categoryId])
  @@index([isPrimary])
  @@map("article_categories")
}

model AIModel {
  modelId              String              @id @default(cuid())
  modelName            String              @unique
  provider             String
  displayName          String
  description          String?
  apiKey               String
  inputTokenCostPer1M  Decimal             @db.Decimal(10, 6)
  outputTokenCostPer1M Decimal             @db.Decimal(10, 6)
  maxTokens            Int?
  isActive             Boolean             @default(true)
  isDefault            Boolean             @default(false)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  interactionTypes     AIInteractionType[]
  interactions         AIInteraction[]

  @@index([provider])
  @@index([isActive])
  @@index([isDefault])
  @@map("ai_models")
}

model AIInteractionType {
  typeId         String          @id @default(cuid())
  typeName       String          @unique
  displayName    String
  description    String?
  defaultModelId String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  defaultModel   AIModel?        @relation(fields: [defaultModelId], references: [modelId])
  interactions   AIInteraction[]

  @@index([typeName])
  @@map("ai_interaction_types")
}

model AIInteraction {
  interactionId     String            @id @default(cuid())
  clerkUserId       String?
  modelId           String
  interactionTypeId String
  inputTokens       Int
  outputTokens      Int
  inputTokenCost    Decimal           @db.Decimal(10, 8)
  outputTokenCost   Decimal           @db.Decimal(10, 8)
  totalCost         Decimal           @db.Decimal(10, 8)
  prompt            String?
  response          String?
  contextData       Json?
  startedAt         DateTime          @default(now())
  completedAt       DateTime?
  durationMs        Int?
  isSuccessful      Boolean           @default(true)
  errorMessage      String?
  user              User?             @relation(fields: [clerkUserId], references: [clerkUserId])
  interactionType   AIInteractionType @relation(fields: [interactionTypeId], references: [typeId])
  model             AIModel           @relation(fields: [modelId], references: [modelId])

  @@index([clerkUserId])
  @@index([modelId])
  @@index([interactionTypeId])
  @@index([startedAt])
  @@index([isSuccessful])
  @@map("ai_interactions")
}

enum QuestionType {
  MULTIPLE_CHOICE
  TEXT_INPUT
  COMMAND_LINE
}

enum ChatRole {
  USER
  ASSISTANT
}

enum SubscriptionTier {
  FREE
  STANDARD
  MAX
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}

enum Role {
  USER
  EDITOR
  MODERATOR
  ADMIN
}

model UserArticleView {
  viewId      String   @id @default(cuid())
  clerkUserId String
  articleId   String
  viewedAt    DateTime @default(now())
  user        User     @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  article     Article  @relation(fields: [articleId], references: [articleId], onDelete: Cascade)

  @@unique([clerkUserId, articleId])
  @@index([clerkUserId])
  @@index([articleId])
  @@index([viewedAt])
  @@map("user_article_views")
}

model ArticleSuggestion {
  suggestionId         String              @id @default(cuid())
  articleId            String
  clerkUserId          String
  suggestionType       SuggestionType
  suggestionDetails    String
  aiValidationResponse String?
  isApproved           Boolean             @default(false)
  isApplied            Boolean             @default(false)
  rejectionReason      String?
  suggestedAt          DateTime            @default(now())
  processedAt          DateTime?
  appliedAt            DateTime?
  aiInteractionId      String?
  article              Article             @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  user                 User                @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  
  // Link to the change history if this suggestion was approved
  changeHistory        ArticleChangeHistory?

  @@index([articleId])
  @@index([clerkUserId])
  @@index([isApproved])
  @@index([suggestedAt])
  @@map("article_suggestions")
}

model SuggestionRateLimit {
  rateLimitId String   @id @default(cuid())
  clerkUserId String
  articleId   String
  lastSuggestionAt DateTime
  user        User     @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)

  @@unique([clerkUserId, articleId])
  @@index([clerkUserId])
  @@index([articleId])
  @@index([lastSuggestionAt])
  @@map("suggestion_rate_limits")
}

model SuggestionSettings {
  settingsId String @id @default(cuid())
  rateLimitMinutes Int @default(60)
  maxSuggestionsPerUser Int @default(10)
  badgeThresholds Json @default("{\"bronze\": 5, \"silver\": 10, \"gold\": 25}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("suggestion_settings")
}

enum SuggestionType {
  CONTENT_ADDITION
  CONTENT_CORRECTION
  GRAMMAR_SPELLING
  CODE_IMPROVEMENT
  CLARITY_IMPROVEMENT
  EXAMPLE_ADDITION
  LINK_UPDATE
  OTHER
}

model ArticleChangeHistory {
  id                String       @id @default(cuid())
  articleId         String
  article           Article      @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  suggestionId      String       @unique
  suggestion        ArticleSuggestion @relation(fields: [suggestionId], references: [suggestionId], onDelete: Cascade)
  clerkUserId       String
  user              User         @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  
  // Diff information
  diff              String       @db.Text // The actual diff in unified diff format
  beforeContent     String       @db.Text // Full content before change (for rollback)
  afterContent      String       @db.Text // Full content after change
  
  // Change metadata
  changeType        String       // e.g., "suggestion", "admin_edit", "rollback"
  description       String       @db.Text // Human-readable description of the change
  
  // Status tracking
  isActive          Boolean      @default(true) // Whether this change is currently applied
  rolledBackAt      DateTime?
  rolledBackBy      String?
  rollbackUser      User?        @relation("RollbackUser", fields: [rolledBackBy], references: [clerkUserId], onDelete: SetNull)
  
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([articleId])
  @@index([clerkUserId])
  @@index([isActive])
  @@index([createdAt])
  @@map("article_change_histories")
}

model EmailTemplate {
  templateId    String               @id @default(cuid())
  templateKey   String               @unique
  templateName  String
  description   String?
  subject       String
  htmlContent   String               @db.Text
  textContent   String?              @db.Text
  fromEmail     String?
  fromName      String?
  isActive      Boolean              @default(true)
  variables     Json?                // JSON array of variable names and descriptions
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  emailLogs     EmailLog[]

  @@index([templateKey])
  @@index([isActive])
  @@map("email_templates")
}

model EmailLog {
  logId         String          @id @default(cuid())
  templateId    String?
  template      EmailTemplate?  @relation(fields: [templateId], references: [templateId])
  to            String
  from          String
  subject       String
  status        EmailStatus
  messageId     String?         // Mailgun message ID
  error         String?
  metadata      Json?           // Additional data like user ID, article ID, etc.
  sentAt        DateTime        @default(now())
  deliveredAt   DateTime?
  openedAt      DateTime?
  clickedAt     DateTime?
  bouncedAt     DateTime?
  complainedAt   DateTime?

  @@index([to])
  @@index([status])
  @@index([sentAt])
  @@index([templateId])
  @@map("email_logs")
}

enum EmailStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
  COMPLAINED
}

model ArticleGroup {
  groupId       String                @id @default(cuid())
  name          String
  clerkUserId   String
  user          User                  @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  articles      ArticleGroupArticle[]

  @@index([clerkUserId])
  @@map("article_groups")
}

model ArticleGroupArticle {
  id             String       @id @default(cuid())
  groupId        String
  articleId      String
  scrollPosition Int          @default(0)
  addedAt        DateTime     @default(now())
  lastViewedAt   DateTime?
  group          ArticleGroup @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  article        Article      @relation(fields: [articleId], references: [articleId], onDelete: Cascade)

  @@unique([groupId, articleId])
  @@index([groupId])
  @@index([articleId])
  @@map("article_group_articles")
}
