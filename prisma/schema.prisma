generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  clerkUserId                  String                 @id @unique
  email                        String                 @unique
  username                     String?                @unique
  appSpecificCreatedAt         DateTime               @default(now())
  lastLoginToApp               DateTime?
  firstName                    String?
  imageUrl                     String?
  lastName                     String?
  stripeCustomerId             String?                @unique
  subscriptionCurrentPeriodEnd DateTime?
  subscriptionId               String?
  subscriptionStatus           SubscriptionStatus     @default(INACTIVE)
  role                         Role                   @default(USER)
  subscriptionTier             String                 @default("Free")
  subscriptionCancelledAt      DateTime?
  aiInteractions               AIInteraction[]
  articleChangeHistories       ArticleChangeHistory[]
  rollbackChangeHistories      ArticleChangeHistory[] @relation("RollbackUser")
  articleGroups                ArticleGroup[]
  likedArticles                ArticleLike[]
  articleSuggestions           ArticleSuggestion[]
  articles                     Article[]
  flaggedArticles              Article[]              @relation("FlaggedArticles")
  chatMessages                 ChatMessage[]
  comments                     Comment[]
  flaggedComments              Comment[]              @relation("FlaggedComments")
  curatedLists                 CuratedList[]
  subscriptionHistory          SubscriptionHistory[]
  suggestionRateLimits         SuggestionRateLimit[]
  articleViews                 UserArticleView[]
  userResponses                UserResponse[]
  courseEnrollments            CourseEnrollment[]
  courseProgress               CourseProgress[]
  quizAttempts                 CourseQuizAttempt[]
  courseCertificates           CourseCertificate[]
  createdCourses               Course[]               @relation("CreatedCourses")
  courseArticleChangeHistories CourseArticleChangeHistory[]
  courseRollbackChangeHistories CourseArticleChangeHistory[] @relation("CourseRollbackUser")
  finalExamAttempts            FinalExamAttempt[]
  finalExamSessions            FinalExamSession[]
  portfolio                    Portfolio?
  courseComments               CourseComment[]
  flaggedCourseComments        CourseComment[]        @relation("FlaggedCourseComments")
  courseLikes                  CourseLike[]

  @@map("users")
}

model Category {
  categoryId   String            @id @default(cuid())
  categoryName String            @unique
  description  String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  articles     ArticleCategory[]

  @@index([categoryName])
  @@map("categories")
}

model Article {
  articleId            String                 @id @default(cuid())
  articleTitle         String
  articleSlug          String                 @unique
  contentHtml          String?
  isContentGenerated   Boolean                @default(false)
  createdByClerkUserId String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  streamId             String?
  flagReason           String?
  flaggedAt            DateTime?
  flaggedByClerkUserId String?
  isFlagged            Boolean                @default(false)
  seoCanonicalUrl      String?
  seoChangeFreq        SeoChangeFreq?         @default(WEEKLY)
  seoDescription       String?
  seoImageAlt          String?
  seoImageUrl          String?
  seoKeywords          String[]               @default([])
  seoLastModified      DateTime?
  seoNoFollow          Boolean                @default(false)
  seoNoIndex           Boolean                @default(false)
  seoPriority          Float?                 @default(0.7)
  seoTitle             String?
  categories           ArticleCategory[]
  changeHistories      ArticleChangeHistory[]
  articleGroups        ArticleGroupArticle[]
  likes                ArticleLike[]
  suggestions          ArticleSuggestion[]
  tags                 ArticleTag[]
  createdBy            User?                  @relation(fields: [createdByClerkUserId], references: [clerkUserId])
  flaggedBy            User?                  @relation("FlaggedArticles", fields: [flaggedByClerkUserId], references: [clerkUserId])
  stream               Stream?                @relation(fields: [streamId], references: [streamId])
  chatMessages         ChatMessage[]
  comments             Comment[]
  curatedListItems     CuratedListItem[]
  interactiveExamples  InteractiveExample[]
  views                UserArticleView[]

  @@index([streamId])
  @@index([articleSlug])
  @@index([articleTitle])
  @@index([isContentGenerated])
  @@index([createdByClerkUserId])
  @@index([isFlagged])
  @@map("articles")
}

model InteractiveExample {
  exampleId                String         @id @default(cuid())
  articleId                String
  questionType             QuestionType
  scenarioOrQuestionText   String
  optionsJson              Json?
  correctAnswerDescription String
  aiMarkingPromptHint      String?
  createdAt                DateTime       @default(now())
  article                  Article        @relation(fields: [articleId], references: [articleId])
  userResponses            UserResponse[]

  @@index([articleId])
  @@map("interactive_examples")
}

model UserResponse {
  responseId     String             @id @default(cuid())
  clerkUserId    String
  exampleId      String
  userAnswerText String
  isCorrect      Boolean
  aiFeedback     String
  submittedAt    DateTime           @default(now())
  user           User               @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  example        InteractiveExample @relation(fields: [exampleId], references: [exampleId])

  @@index([clerkUserId])
  @@index([exampleId])
  @@map("user_responses")
}

model Channel {
  channelId   String   @id @default(cuid())
  channelName String   @unique
  description String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  streams     Stream[]

  @@index([channelName])
  @@map("channels")
}

model Stream {
  streamId    String    @id @default(cuid())
  streamName  String
  description String?
  channelId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  articles    Article[]
  channel     Channel   @relation(fields: [channelId], references: [channelId])

  @@unique([channelId, streamName])
  @@index([streamName])
  @@index([channelId])
  @@map("streams")
}

model Comment {
  commentId            String    @id @default(cuid())
  articleId            String
  clerkUserId          String
  content              String
  parentId             String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  flagReason           String?
  flaggedAt            DateTime?
  flaggedByClerkUserId String?
  isFlagged            Boolean   @default(false)
  article              Article   @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  user                 User      @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  flaggedBy            User?     @relation("FlaggedComments", fields: [flaggedByClerkUserId], references: [clerkUserId])
  parent               Comment?  @relation("CommentReplies", fields: [parentId], references: [commentId], onDelete: Cascade)
  replies              Comment[] @relation("CommentReplies")

  @@index([articleId])
  @@index([clerkUserId])
  @@index([parentId])
  @@index([isFlagged])
  @@map("comments")
}

model ChatMessage {
  messageId   String   @id @default(cuid())
  articleId   String
  clerkUserId String
  role        ChatRole
  content     String
  exampleId   String?
  createdAt   DateTime @default(now())
  article     Article  @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  user        User     @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)

  @@index([articleId, clerkUserId])
  @@index([exampleId])
  @@map("chat_messages")
}

model ArticleLike {
  likeId      String   @id @default(cuid())
  articleId   String
  clerkUserId String
  createdAt   DateTime @default(now())
  article     Article  @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  user        User     @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)

  @@unique([articleId, clerkUserId])
  @@index([clerkUserId])
  @@index([articleId])
  @@map("article_likes")
}

model CuratedList {
  listId      String            @id @default(cuid())
  clerkUserId String
  listName    String
  description String?
  isPublic    Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  items       CuratedListItem[]
  user        User              @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)

  @@index([clerkUserId])
  @@index([isPublic])
  @@map("curated_lists")
}

model CuratedListItem {
  itemId    String      @id @default(cuid())
  listId    String
  articleId String
  order     Int
  notes     String?
  addedAt   DateTime    @default(now())
  article   Article     @relation(fields: [articleId], references: [articleId])
  list      CuratedList @relation(fields: [listId], references: [listId], onDelete: Cascade)

  @@unique([listId, articleId])
  @@index([listId])
  @@index([articleId])
  @@map("curated_list_items")
}

model SubscriptionHistory {
  historyId      String              @id @default(cuid())
  clerkUserId    String
  subscriptionId String
  eventType      String
  previousStatus SubscriptionStatus?
  newStatus      SubscriptionStatus
  amount         Int?
  currency       String?
  stripeEventId  String?             @unique
  metadata       Json?
  createdAt      DateTime            @default(now())
  previousTier   String?
  newTier        String
  user           User                @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)

  @@index([clerkUserId])
  @@index([subscriptionId])
  @@index([createdAt])
  @@map("subscription_history")
}

model SubscriptionPricing {
  pricingId          String               @id @default(cuid())
  stripePriceId      String               @unique
  monthlyPriceCents  Int
  yearlyPriceCents   Int
  features           String[]
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  freeTrialDays      Int                  @default(0)
  stripeProductId    String?
  tier               String               @unique
  displayOrder       Int                  @default(0)
  featureAssignments PricingTierFeature[]

  @@index([tier])
  @@index([displayOrder])
  @@map("subscription_pricing")
}

model FeatureCategory {
  categoryId   String    @id @default(cuid())
  categoryKey  String    @unique
  categoryName String
  description  String?
  displayOrder Int       @default(0)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  features     Feature[]

  @@index([categoryKey])
  @@index([displayOrder])
  @@index([isActive])
  @@map("feature_categories")
}

model Feature {
  featureId           String               @id @default(cuid())
  featureKey          String               @unique
  featureName         String
  description         String?
  featureType         FeatureType
  isActive            Boolean              @default(true)
  defaultValue        Json?
  metadata            Json?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  categoryId          String
  category            FeatureCategory      @relation(fields: [categoryId], references: [categoryId])
  pricingTierFeatures PricingTierFeature[]

  @@index([featureKey])
  @@index([categoryId])
  @@index([isActive])
  @@map("features")
}

model PricingTierFeature {
  id            String              @id @default(cuid())
  pricingTierId String
  featureId     String
  isEnabled     Boolean             @default(true)
  limitValue    Int?
  configValue   Json?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  feature       Feature             @relation(fields: [featureId], references: [featureId], onDelete: Cascade)
  pricingTier   SubscriptionPricing @relation(fields: [pricingTierId], references: [pricingId], onDelete: Cascade)

  @@unique([pricingTierId, featureId])
  @@index([pricingTierId])
  @@index([featureId])
  @@map("pricing_tier_features")
}

model Tag {
  tagId       String       @id @default(cuid())
  tagName     String       @unique
  description String?
  color       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  articles    ArticleTag[]

  @@index([tagName])
  @@map("tags")
}

model ArticleTag {
  articleTagId String   @id @default(cuid())
  articleId    String
  tagId        String
  createdAt    DateTime @default(now())
  article      Article  @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  tag          Tag      @relation(fields: [tagId], references: [tagId], onDelete: Cascade)

  @@unique([articleId, tagId])
  @@index([articleId])
  @@index([tagId])
  @@map("article_tags")
}

model ArticleCategory {
  articleCategoryId String   @id @default(cuid())
  articleId         String
  categoryId        String
  isPrimary         Boolean  @default(false)
  createdAt         DateTime @default(now())
  article           Article  @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  category          Category @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)

  @@unique([articleId, categoryId])
  @@index([articleId])
  @@index([categoryId])
  @@index([isPrimary])
  @@map("article_categories")
}

model AIModel {
  modelId              String              @id @default(cuid())
  modelName            String              @unique
  provider             String
  displayName          String
  description          String?
  apiKey               String
  inputTokenCostPer1M  Decimal             @db.Decimal(10, 6)
  outputTokenCostPer1M Decimal             @db.Decimal(10, 6)
  isActive             Boolean             @default(true)
  isDefault            Boolean             @default(false)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  interactionTypes     AIInteractionType[]
  interactions         AIInteraction[]

  @@index([provider])
  @@index([isActive])
  @@index([isDefault])
  @@map("ai_models")
}

model YouTubeAPIModel {
  modelId              String              @id @default(cuid())
  modelName            String              @unique @default("youtube_data_api_v3")
  provider             String              @default("youtube")
  displayName          String              @default("YouTube Data API v3")
  description          String?             @default("YouTube Data API for video search integration")
  apiKey               String
  maxResults           Int                 @default(5)
  searchFilters        Json?               // Additional search parameters like duration, category, etc.
  isActive             Boolean             @default(true)
  quotaLimit           Int                 @default(10000) // Daily quota limit
  quotaUsed            Int                 @default(0)
  quotaResetAt         DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt

  @@index([provider])
  @@index([isActive])
  @@map("youtube_api_models")
}

model AIInteractionType {
  typeId         String          @id @default(cuid())
  typeName       String          @unique
  displayName    String
  description    String?
  defaultModelId String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  maxTokens      Int?
  systemPrompt   String?
  temperature    Float?          @default(0.7)
  defaultModel   AIModel?        @relation(fields: [defaultModelId], references: [modelId])
  interactions   AIInteraction[]

  @@index([typeName])
  @@map("ai_interaction_types")
}

model AIInteraction {
  interactionId     String            @id @default(cuid())
  clerkUserId       String?
  modelId           String
  interactionTypeId String
  inputTokens       Int
  outputTokens      Int
  inputTokenCost    Decimal           @db.Decimal(10, 8)
  outputTokenCost   Decimal           @db.Decimal(10, 8)
  totalCost         Decimal           @db.Decimal(10, 8)
  prompt            String?
  response          String?
  contextData       Json?
  startedAt         DateTime          @default(now())
  completedAt       DateTime?
  durationMs        Int?
  isSuccessful      Boolean           @default(true)
  errorMessage      String?
  user              User?             @relation(fields: [clerkUserId], references: [clerkUserId])
  interactionType   AIInteractionType @relation(fields: [interactionTypeId], references: [typeId])
  model             AIModel           @relation(fields: [modelId], references: [modelId])

  @@index([clerkUserId])
  @@index([modelId])
  @@index([interactionTypeId])
  @@index([startedAt])
  @@index([isSuccessful])
  @@map("ai_interactions")
}

model UserArticleView {
  viewId      String   @id @default(cuid())
  clerkUserId String
  articleId   String
  viewedAt    DateTime @default(now())
  article     Article  @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  user        User     @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)

  @@unique([clerkUserId, articleId])
  @@index([clerkUserId])
  @@index([articleId])
  @@index([viewedAt])
  @@map("user_article_views")
}

model ArticleSuggestion {
  suggestionId         String                @id @default(cuid())
  articleId            String
  clerkUserId          String
  suggestionType       SuggestionType
  suggestionDetails    String
  aiValidationResponse String?
  isApproved           Boolean               @default(false)
  isApplied            Boolean               @default(false)
  rejectionReason      String?
  suggestedAt          DateTime              @default(now())
  processedAt          DateTime?
  appliedAt            DateTime?
  aiInteractionId      String?
  changeHistory        ArticleChangeHistory?
  article              Article               @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  user                 User                  @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)

  @@index([articleId])
  @@index([clerkUserId])
  @@index([isApproved])
  @@index([suggestedAt])
  @@map("article_suggestions")
}

model SuggestionRateLimit {
  rateLimitId      String   @id @default(cuid())
  clerkUserId      String
  articleId        String
  lastSuggestionAt DateTime
  user             User     @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)

  @@unique([clerkUserId, articleId])
  @@index([clerkUserId])
  @@index([articleId])
  @@index([lastSuggestionAt])
  @@map("suggestion_rate_limits")
}

model SuggestionSettings {
  settingsId            String   @id @default(cuid())
  rateLimitMinutes      Int      @default(60)
  maxSuggestionsPerUser Int      @default(10)
  badgeThresholds       Json     @default("{\"gold\": 25, \"bronze\": 5, \"silver\": 10}")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("suggestion_settings")
}

model ArticleChangeHistory {
  id            String            @id @default(cuid())
  articleId     String
  suggestionId  String            @unique
  clerkUserId   String
  diff          String
  beforeContent String
  afterContent  String
  changeType    String
  description   String
  isActive      Boolean           @default(true)
  rolledBackAt  DateTime?
  rolledBackBy  String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  article       Article           @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  user          User              @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  rollbackUser  User?             @relation("RollbackUser", fields: [rolledBackBy], references: [clerkUserId])
  suggestion    ArticleSuggestion @relation(fields: [suggestionId], references: [suggestionId], onDelete: Cascade)

  @@index([articleId])
  @@index([clerkUserId])
  @@index([isActive])
  @@index([createdAt])
  @@map("article_change_histories")
}

model EmailTemplate {
  templateId   String     @id @default(cuid())
  templateKey  String     @unique
  templateName String
  description  String?
  subject      String
  htmlContent  String
  textContent  String?
  fromEmail    String?
  fromName     String?
  isActive     Boolean    @default(true)
  variables    Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  emailLogs    EmailLog[]

  @@index([templateKey])
  @@index([isActive])
  @@map("email_templates")
}

model EmailLog {
  logId        String         @id @default(cuid())
  templateId   String?
  to           String
  from         String
  subject      String
  status       EmailStatus
  messageId    String?
  error        String?
  metadata     Json?
  sentAt       DateTime       @default(now())
  deliveredAt  DateTime?
  openedAt     DateTime?
  clickedAt    DateTime?
  bouncedAt    DateTime?
  complainedAt DateTime?
  template     EmailTemplate? @relation(fields: [templateId], references: [templateId])

  @@index([to])
  @@index([status])
  @@index([sentAt])
  @@index([templateId])
  @@map("email_logs")
}

model ArticleGroup {
  groupId     String                @id @default(cuid())
  name        String
  clerkUserId String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  articles    ArticleGroupArticle[]
  user        User                  @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)

  @@index([clerkUserId])
  @@map("article_groups")
}

model ArticleGroupArticle {
  id             String       @id @default(cuid())
  groupId        String
  articleId      String
  scrollPosition Int          @default(0)
  addedAt        DateTime     @default(now())
  lastViewedAt   DateTime?
  article        Article      @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  group          ArticleGroup @relation(fields: [groupId], references: [groupId], onDelete: Cascade)

  @@unique([groupId, articleId])
  @@index([groupId])
  @@index([articleId])
  @@map("article_group_articles")
}

model Course {
  courseId            String               @id @default(cuid())
  title               String
  slug                String               @unique
  description         String
  
  // System prompts used for AI generation
  systemPromptTitle   String?              // The prompt title used for AI generation
  systemPromptDescription String?          // The prompt description used for AI generation
  
  level               CourseLevel
  status              CourseStatus         @default(DRAFT)
  estimatedHours      Int?
  passMarkPercentage  Float                @default(70.0)
  createdByClerkId    String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  publishedAt         DateTime?
  deletedAt           DateTime?
  
  // Course generation tracking
  generationStatus    CourseGenerationStatus @default(PENDING)
  generationStartedAt DateTime?
  generationError     String?
  
  // AI-generated course outline
  courseOutlineJson   Json?
  
  // Social features
  likesCount          Int                  @default(0)
  
  createdBy           User                 @relation("CreatedCourses", fields: [createdByClerkId], references: [clerkUserId])
  sections            CourseSection[]
  enrollments         CourseEnrollment[]
  certificates        CourseCertificate[]
  finalExams          CourseQuiz[]
  finalExamAttempts   FinalExamAttempt[]
  finalExamQuestionBank FinalExamQuestionBank[]
  finalExamSessions   FinalExamSession[]
  examConfig          CourseExamConfig?
  likes               CourseLike[]

  @@index([slug])
  @@index([status])
  @@index([level])
  @@index([createdByClerkId])
  @@index([deletedAt])
  @@map("courses")
}

model CourseSection {
  sectionId     String          @id @default(cuid())
  courseId      String
  title         String
  description   String?
  orderIndex    Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  course        Course          @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  articles      CourseArticle[]
  quizzes       CourseQuiz[]

  @@unique([courseId, orderIndex])
  @@index([courseId])
  @@map("course_sections")
}

model CourseArticle {
  articleId     String        @id @default(cuid())
  sectionId     String
  title         String
  slug          String        @unique
  description   String?
  orderIndex    Int
  contentHtml   String?
  isGenerated   Boolean       @default(false)
  generatedAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  section       CourseSection @relation(fields: [sectionId], references: [sectionId], onDelete: Cascade)
  quizzes       CourseQuiz[]
  progress      CourseProgress[]
  changeHistory CourseArticleChangeHistory[]
  comments      CourseComment[]

  @@unique([sectionId, orderIndex])
  @@index([sectionId])
  @@index([slug])
  @@map("course_articles")
}

model CourseQuiz {
  quizId        String              @id @default(cuid())
  sectionId     String?
  articleId     String?
  courseId      String?             // For final exams
  title         String
  description   String?
  quizType      String              // 'article', 'section', 'final_exam'
  orderIndex    Int?
  passMarkPercentage Float          @default(70.0)
  timeLimit     Int?                // in minutes
  maxAttempts   Int?                // null = unlimited
  cooldownHours Int?                // For final exam retake cooldown
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  section       CourseSection?      @relation(fields: [sectionId], references: [sectionId], onDelete: Cascade)
  article       CourseArticle?      @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  course        Course?             @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  questions     CourseQuizQuestion[]
  attempts      CourseQuizAttempt[]

  @@index([sectionId])
  @@index([articleId])
  @@index([courseId])
  @@index([quizType])
  @@map("course_quizzes")
}

model CourseQuizQuestion {
  questionId    String            @id @default(cuid())
  quizId        String
  questionType  QuizQuestionType
  questionText  String
  optionsJson   Json?             // For multiple choice questions
  correctAnswer String            // For multiple choice: option key, for others: the answer
  explanation   String?
  orderIndex    Int
  points        Float             @default(1.0)
  createdAt     DateTime          @default(now())
  
  quiz          CourseQuiz        @relation(fields: [quizId], references: [quizId], onDelete: Cascade)
  answers       CourseQuizAnswer[]

  @@unique([quizId, orderIndex])
  @@index([quizId])
  @@map("course_quiz_questions")
}

model CourseEnrollment {
  enrollmentId    String           @id @default(cuid())
  courseId        String
  clerkUserId     String
  enrolledAt      DateTime         @default(now())
  completedAt     DateTime?
  lastAccessedAt  DateTime?
  
  course          Course           @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  user            User             @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  progress        CourseProgress[]

  @@unique([courseId, clerkUserId])
  @@index([courseId])
  @@index([clerkUserId])
  @@map("course_enrollments")
}

model CourseProgress {
  progressId    String        @id @default(cuid())
  enrollmentId  String
  articleId     String
  clerkUserId   String
  startedAt     DateTime?
  completedAt   DateTime?
  lastAccessedAt DateTime     @default(now())
  
  // Engagement tracking
  engagementScore      Float?   @default(0)
  scrollPercentage     Int      @default(0)
  interactionCount     Int      @default(0)
  timeSpent           Int      @default(0)
  isCompleted         Boolean  @default(false)
  lastEngagementUpdate DateTime?
  
  enrollment    CourseEnrollment @relation(fields: [enrollmentId], references: [enrollmentId], onDelete: Cascade)
  article       CourseArticle    @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  user          User             @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)

  @@unique([enrollmentId, articleId])
  @@index([enrollmentId])
  @@index([articleId])
  @@index([clerkUserId])
  @@map("course_progress")
}

model CourseQuizAttempt {
  attemptId     String    @id @default(cuid())
  quizId        String
  clerkUserId   String
  startedAt     DateTime  @default(now())
  completedAt   DateTime?
  score         Float?    // Percentage score
  passed        Boolean?  // Whether they passed based on pass mark
  timeSpent     Int?      // in seconds
  
  quiz          CourseQuiz        @relation(fields: [quizId], references: [quizId], onDelete: Cascade)
  user          User              @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  answers       CourseQuizAnswer[]

  @@index([quizId])
  @@index([clerkUserId])
  @@index([startedAt])
  @@map("course_quiz_attempts")
}

model CourseQuizAnswer {
  answerId      String              @id @default(cuid())
  attemptId     String
  questionId    String
  userAnswer    String
  isCorrect     Boolean
  pointsEarned  Float
  submittedAt   DateTime            @default(now())
  
  attempt       CourseQuizAttempt   @relation(fields: [attemptId], references: [attemptId], onDelete: Cascade)
  question      CourseQuizQuestion  @relation(fields: [questionId], references: [questionId], onDelete: Cascade)

  @@unique([attemptId, questionId])
  @@index([attemptId])
  @@index([questionId])
  @@map("course_quiz_answers")
}

model CourseCertificate {
  certificateId String    @id @default(cuid())
  courseId      String
  clerkUserId   String
  issuedAt      DateTime  @default(now())
  certificateData Json    // Contains course name, user name, completion date, etc.
  grade         CertificateGrade? // Bronze, Silver, Gold
  finalScore    Float?    // Overall completion score
  engagementScore Float?  // Engagement score
  isPublic      Boolean   @default(false) // Whether the certificate is shown on public portfolio
  
  course        Course    @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  user          User      @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  portfolioCerts PortfolioCertificate[]

  @@unique([courseId, clerkUserId])
  @@index([courseId])
  @@index([clerkUserId])
  @@index([isPublic])
  @@map("course_certificates")
}

model Portfolio {
  portfolioId       String    @id @default(cuid())
  clerkUserId       String    @unique
  slug              String    @unique
  displayName       String?
  bio               String?
  location          String?
  website           String?
  linkedinUrl       String?
  githubUrl         String?
  isPublic          Boolean   @default(false)
  isAvailableForWork Boolean  @default(false)
  jobTypes          String[]  @default([]) // Array of job types like "Full-time", "Contract", "Remote", etc.
  skills            String[]  @default([]) // Array of skills/technologies
  preferredJobTitles String[] @default([]) // Array of preferred job titles
  salaryRange       String?   // Optional salary range
  availabilityDate  DateTime? // When available to start
  customSections    Json?     // Custom sections for additional portfolio content
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User                   @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  certificates      PortfolioCertificate[]

  @@index([slug])
  @@index([isPublic])
  @@index([isAvailableForWork])
  @@map("portfolios")
}

model PortfolioCertificate {
  portfolioCertId String    @id @default(cuid())
  portfolioId     String
  certificateId   String
  displayOrder    Int       @default(0)
  addedAt         DateTime  @default(now())
  
  portfolio       Portfolio         @relation(fields: [portfolioId], references: [portfolioId], onDelete: Cascade)
  certificate     CourseCertificate @relation(fields: [certificateId], references: [certificateId], onDelete: Cascade)

  @@unique([portfolioId, certificateId])
  @@index([portfolioId])
  @@index([certificateId])
  @@index([displayOrder])
  @@map("portfolio_certificates")
}

model CourseArticleChangeHistory {
  id                String        @id @default(cuid())
  articleId         String
  clerkUserId       String
  diff              String
  beforeContent     String
  afterContent      String
  changeType        String
  description       String
  suggestionType    String?
  suggestionDetails String?
  isActive          Boolean       @default(true)
  rolledBackAt      DateTime?
  rolledBackBy      String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  article           CourseArticle @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  user              User          @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  rollbackUser      User?         @relation("CourseRollbackUser", fields: [rolledBackBy], references: [clerkUserId])

  @@index([articleId])
  @@index([clerkUserId])
  @@index([isActive])
  @@index([createdAt])
  @@map("course_article_change_histories")
}

enum FeatureType {
  BOOLEAN
  NUMERIC_LIMIT
  CUSTOM
}

enum QuestionType {
  MULTIPLE_CHOICE
  TEXT_INPUT
  COMMAND_LINE
}

enum ChatRole {
  USER
  ASSISTANT
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}

enum Role {
  USER
  EDITOR
  MODERATOR
  ADMIN
}

enum SeoChangeFreq {
  ALWAYS
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  NEVER
}

enum SuggestionType {
  CONTENT_ADDITION
  CONTENT_CORRECTION
  GRAMMAR_SPELLING
  CODE_IMPROVEMENT
  CLARITY_IMPROVEMENT
  EXAMPLE_ADDITION
  LINK_UPDATE
  OTHER
}

enum EmailStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
  COMPLAINED
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  GENERATING
  PUBLISHED
  ARCHIVED
}

enum QuizQuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_BLANK
  ESSAY
}

enum CourseGenerationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum CertificateGrade {
  BRONZE
  SILVER
  GOLD
}

model CourseCompletionSettings {
  settingsId                   String   @id @default(cuid())
  bronzeThreshold             Float    @default(65.0)
  silverThreshold             Float    @default(75.0)
  goldThreshold               Float    @default(90.0)
  minEngagementScore          Float    @default(75.0)
  minQuizAverage              Float    @default(70.0)
  minArticlesCompletedPercent Float    @default(85.0)
  finalExamRequired           Boolean  @default(true)
  finalExamCooldownHours      Int      @default(24)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  @@map("course_completion_settings")
}

model QuizGenerationSettings {
  settingsId                String   @id @default(cuid())
  articleQuizMinQuestions   Int      @default(3)
  articleQuizMaxQuestions   Int      @default(5)
  sectionQuizMinQuestions   Int      @default(5)
  sectionQuizMaxQuestions   Int      @default(8)
  finalExamMinQuestions     Int      @default(15)
  finalExamMaxQuestions     Int      @default(25)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@map("quiz_generation_settings")
}

model QuestionPointSettings {
  settingsId              String   @id @default(cuid())
  multipleChoicePoints    Float    @default(1.0)
  trueFalsePoints        Float    @default(1.0)
  fillInBlankPoints      Float    @default(1.0)
  essayMinPoints         Float    @default(2.0)
  essayMaxPoints         Float    @default(5.0)
  essayPassingThreshold  Float    @default(0.6)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@map("question_point_settings")
}

model CourseComment {
  commentId            String          @id @default(cuid())
  courseArticleId      String
  clerkUserId          String
  content              String
  parentId             String?
  
  // AI analysis fields
  isQuestion           Boolean         @default(false)
  aiAnalyzed           Boolean         @default(false)
  aiReplyId            String?         @unique
  
  // Moderation
  flagReason           String?
  flaggedAt            DateTime?
  flaggedByClerkUserId String?
  isFlagged            Boolean         @default(false)
  
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  
  // Relations
  courseArticle        CourseArticle   @relation(fields: [courseArticleId], references: [articleId], onDelete: Cascade)
  user                 User            @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  parent               CourseComment?  @relation("CourseCommentReplies", fields: [parentId], references: [commentId], onDelete: Cascade)
  replies              CourseComment[] @relation("CourseCommentReplies")
  aiReply              CourseComment?  @relation("AIReply", fields: [aiReplyId], references: [commentId])
  aiReplyFor           CourseComment?  @relation("AIReply")
  flaggedBy            User?           @relation("FlaggedCourseComments", fields: [flaggedByClerkUserId], references: [clerkUserId])
  
  @@index([courseArticleId])
  @@index([clerkUserId])
  @@index([parentId])
  @@index([isFlagged])
  @@index([isQuestion])
  @@map("course_comments")
}

model CourseLike {
  likeId       String   @id @default(cuid())
  courseId     String
  clerkUserId  String
  createdAt    DateTime @default(now())
  
  course       Course   @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  user         User     @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  
  @@unique([courseId, clerkUserId])
  @@index([courseId])
  @@index([clerkUserId])
  @@map("course_likes")
}

model FinalExamQuestionBank {
  questionId    String            @id @default(cuid())
  courseId      String
  questionType  QuizQuestionType
  questionText  String
  optionsJson   Json?             // For multiple choice questions
  correctAnswer String            // For multiple choice: option key, for others: the answer
  explanation   String?
  points        Float             @default(1.0)
  createdAt     DateTime          @default(now())
  
  course        Course            @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  examQuestions FinalExamQuestion[]

  @@index([courseId])
  @@index([questionType])
  @@map("final_exam_question_bank")
}

model FinalExamSession {
  sessionId   String              @id @default(cuid())
  courseId    String
  clerkUserId String
  startedAt   DateTime            @default(now())
  completedAt DateTime?
  score       Float?
  passed      Boolean?
  canRetakeAt DateTime?
  
  course      Course              @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  user        User                @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  questions   FinalExamQuestion[]
  answers     FinalExamAnswer[]

  @@index([courseId])
  @@index([clerkUserId])
  @@index([startedAt])
  @@map("final_exam_sessions")
}

model FinalExamQuestion {
  id            String                 @id @default(cuid())
  sessionId     String
  bankQuestionId String
  orderIndex    Int
  
  session       FinalExamSession       @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  bankQuestion  FinalExamQuestionBank  @relation(fields: [bankQuestionId], references: [questionId], onDelete: Cascade)
  answers       FinalExamAnswer[]

  @@unique([sessionId, orderIndex])
  @@index([sessionId])
  @@index([bankQuestionId])
  @@map("final_exam_questions")
}

model FinalExamAnswer {
  answerId      String            @id @default(cuid())
  sessionId     String
  questionId    String
  userAnswer    String
  isCorrect     Boolean?          // null for essay questions pending AI grading
  pointsEarned  Float?            // null for essay questions pending AI grading
  aiGrading     Json?             // AI grading details for essay questions
  submittedAt   DateTime          @default(now())
  gradedAt      DateTime?
  
  session       FinalExamSession  @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  question      FinalExamQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, questionId])
  @@index([sessionId])
  @@index([questionId])
  @@map("final_exam_answers")
}

model FinalExamAttempt {
  attemptId   String    @id @default(cuid())
  courseId    String
  clerkUserId String
  attemptedAt DateTime  @default(now())
  score       Float?
  passed      Boolean?
  canRetakeAt DateTime?

  course Course @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  user   User   @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)

  @@index([courseId])
  @@index([clerkUserId])
  @@index([attemptedAt])
  @@map("final_exam_attempts")
}

model AIRateLimit {
  rateLimitId String    @id @default(cuid())
  provider    String
  modelId     String
  isActive    Boolean   @default(true)
  timeoutUntil DateTime
  hitCount    Int       @default(1)
  firstHitAt  DateTime  @default(now())
  lastHitAt   DateTime  @default(now())
  clearedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([provider, modelId])
  @@index([provider])
  @@index([isActive])
  @@index([timeoutUntil])
  @@map("ai_rate_limits")
}

model BullMQConfig {
  configId                     String   @id @default(cuid())
  emailQueueAttempts           Int      @default(3)
  emailQueueBackoffDelay       Int      @default(2000)
  courseGenerationAttempts     Int      @default(5)
  courseGenerationBackoffDelay Int      @default(10000)
  sitemapQueueAttempts         Int      @default(2)
  sitemapQueueBackoffDelay     Int      @default(5000)
  rateLimitRetrySeconds        Int      @default(60)
  maxBackoffMinutes            Int      @default(5)
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  @@map("bullmq_config")
}

model CourseExamConfig {
  configId           String   @id @default(cuid())
  courseId           String   @unique
  questionBankSize   Int      @default(125)
  essayQuestionsInBank Int    @default(10)
  examQuestionCount  Int      @default(25)
  minEssayQuestions  Int      @default(1)
  maxEssayQuestions  Int      @default(2)
  examTimeLimit      Int?     @default(120)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  course             Course   @relation(fields: [courseId], references: [courseId], onDelete: Cascade)

  @@index([courseId])
  @@map("course_exam_configs")
}
