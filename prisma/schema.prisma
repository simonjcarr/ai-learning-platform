// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  clerkUserId         String   @id @unique
  email               String   @unique
  username            String?  @unique
  firstName           String?
  lastName            String?
  imageUrl            String?
  appSpecificCreatedAt DateTime @default(now())
  lastLoginToApp      DateTime?
  
  // Stripe subscription fields
  stripeCustomerId    String?  @unique
  subscriptionTier    SubscriptionTier @default(FREE)
  subscriptionStatus  SubscriptionStatus @default(INACTIVE)
  subscriptionId      String?
  subscriptionCurrentPeriodEnd DateTime?
  
  // RBAC role field
  role                Role     @default(USER)
  
  articles            Article[]
  userResponses       UserResponse[]
  comments            Comment[]
  chatMessages        ChatMessage[]
  likedArticles       ArticleLike[]
  curatedLists        CuratedList[]
  subscriptionHistory SubscriptionHistory[]
  
  @@map("users")
}

model Category {
  categoryId   String   @id @default(cuid())
  categoryName String   @unique
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  articles     Article[]
  
  @@index([categoryName])
  @@map("categories")
}

model Article {
  articleId            String   @id @default(cuid())
  categoryId           String?
  streamId             String?
  articleTitle         String
  articleSlug          String   @unique
  contentHtml          String?  @db.Text
  isContentGenerated   Boolean  @default(false)
  createdByClerkUserId String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  category             Category? @relation(fields: [categoryId], references: [categoryId])
  stream               Stream?   @relation(fields: [streamId], references: [streamId])
  createdBy            User?     @relation(fields: [createdByClerkUserId], references: [clerkUserId], onDelete: SetNull)
  interactiveExamples  InteractiveExample[]
  comments             Comment[]
  chatMessages         ChatMessage[]
  likes                ArticleLike[]
  curatedListItems     CuratedListItem[]
  
  @@index([categoryId])
  @@index([streamId])
  @@index([articleSlug])
  @@index([articleTitle])
  @@index([isContentGenerated])
  @@index([createdByClerkUserId])
  @@map("articles")
}

model InteractiveExample {
  exampleId                String   @id @default(cuid())
  articleId                String
  questionType             QuestionType
  scenarioOrQuestionText   String   @db.Text
  optionsJson              Json?
  correctAnswerDescription String   @db.Text
  aiMarkingPromptHint      String?  @db.Text
  createdAt                DateTime @default(now())
  
  article                  Article  @relation(fields: [articleId], references: [articleId])
  userResponses            UserResponse[]
  
  @@index([articleId])
  @@map("interactive_examples")
}

model UserResponse {
  responseId     String   @id @default(cuid())
  clerkUserId    String
  exampleId      String
  userAnswerText String   @db.Text
  isCorrect      Boolean
  aiFeedback     String   @db.Text
  submittedAt    DateTime @default(now())
  
  user           User     @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  example        InteractiveExample @relation(fields: [exampleId], references: [exampleId])
  
  @@index([clerkUserId])
  @@index([exampleId])
  @@map("user_responses")
}

enum QuestionType {
  MULTIPLE_CHOICE
  TEXT_INPUT
  COMMAND_LINE
}

model Channel {
  channelId    String   @id @default(cuid())
  channelName  String   @unique
  description  String?
  icon         String?  // Optional icon identifier
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  streams      Stream[]
  
  @@index([channelName])
  @@map("channels")
}

model Stream {
  streamId     String   @id @default(cuid())
  streamName   String
  description  String?
  channelId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  channel      Channel  @relation(fields: [channelId], references: [channelId])
  articles     Article[]
  
  @@unique([channelId, streamName])
  @@index([streamName])
  @@index([channelId])
  @@map("streams")
}

model Comment {
  commentId    String   @id @default(cuid())
  articleId    String
  clerkUserId  String
  content      String   @db.Text
  parentId     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  article      Article  @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  user         User     @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  parent       Comment? @relation("CommentReplies", fields: [parentId], references: [commentId], onDelete: Cascade)
  replies      Comment[] @relation("CommentReplies")
  
  @@index([articleId])
  @@index([clerkUserId])
  @@index([parentId])
  @@map("comments")
}

model ChatMessage {
  messageId       String   @id @default(cuid())
  articleId       String
  clerkUserId     String
  role            ChatRole
  content         String   @db.Text
  exampleId       String?  // Reference to specific quiz question if applicable
  createdAt       DateTime @default(now())
  
  article         Article  @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  user            User     @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  
  @@index([articleId, clerkUserId])
  @@index([exampleId])
  @@map("chat_messages")
}

enum ChatRole {
  USER
  ASSISTANT
}

enum SubscriptionTier {
  FREE
  STANDARD
  MAX
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}

enum Role {
  USER
  EDITOR
  MODERATOR
  ADMIN
}

model ArticleLike {
  likeId      String   @id @default(cuid())
  articleId   String
  clerkUserId String
  createdAt   DateTime @default(now())
  
  article     Article  @relation(fields: [articleId], references: [articleId], onDelete: Cascade)
  user        User     @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  
  @@unique([articleId, clerkUserId])
  @@index([clerkUserId])
  @@index([articleId])
  @@map("article_likes")
}

model CuratedList {
  listId      String   @id @default(cuid())
  clerkUserId String
  listName    String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  items       CuratedListItem[]
  
  @@index([clerkUserId])
  @@index([isPublic])
  @@map("curated_lists")
}

model CuratedListItem {
  itemId      String   @id @default(cuid())
  listId      String
  articleId   String
  order       Int
  notes       String?  @db.Text
  addedAt     DateTime @default(now())
  
  list        CuratedList @relation(fields: [listId], references: [listId], onDelete: Cascade)
  article     Article     @relation(fields: [articleId], references: [articleId])
  
  @@unique([listId, articleId])
  @@index([listId])
  @@index([articleId])
  @@map("curated_list_items")
}

model SubscriptionHistory {
  historyId           String   @id @default(cuid())
  clerkUserId         String
  subscriptionId      String
  eventType           String   // e.g., "created", "updated", "cancelled"
  previousTier        SubscriptionTier?
  newTier             SubscriptionTier
  previousStatus      SubscriptionStatus?
  newStatus           SubscriptionStatus
  amount              Int?     // Amount in cents
  currency            String?  // e.g., "usd"
  stripeEventId       String?  @unique
  metadata            Json?    // Additional event data from Stripe
  createdAt           DateTime @default(now())
  
  user                User     @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  
  @@index([clerkUserId])
  @@index([subscriptionId])
  @@index([createdAt])
  @@map("subscription_history")
}
